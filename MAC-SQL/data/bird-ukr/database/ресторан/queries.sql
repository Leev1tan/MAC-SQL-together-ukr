-- Зразки SQL-запитів для бази даних "Ресторан"
-- Для українського набору даних Text-to-SQL

-- =============================================
-- ДОВІДКОВІ ЗАПИТИ
-- =============================================

-- 1. Отримати всі посади персоналу, відсортовані за зарплатою (від найвищої)
SELECT назва, базова_зарплата, додатковий_відсоток
FROM посади
ORDER BY базова_зарплата DESC;

-- 2. Отримати всі можливі статуси замовлень
SELECT ід, назва, опис, є_фінальним
FROM статуси_замовлень
ORDER BY ід;

-- 3. Отримати всі доступні методи оплати
SELECT назва, комісія_відсоток
FROM методи_оплати
WHERE активний = TRUE
ORDER BY комісія_відсоток;

-- =============================================
-- ЗАПИТИ ЩОДО ПЕРСОНАЛУ
-- =============================================

-- 4. Отримати список всіх активних працівників із їх посадами
SELECT п.прізвище, п.імя, пос.назва AS посада, п.ставка_зарплати
FROM персонал п
JOIN посади пос ON п.посада_ід = пос.ід
WHERE п.активний = TRUE
ORDER BY пос.назва, п.прізвище;

-- 5. Знайти працівників, які працюють більше 3 років
SELECT 
    прізвище, імя, дата_прийому, 
    EXTRACT(YEAR FROM AGE(CURRENT_DATE, дата_прийому)) AS років_стажу
FROM персонал
WHERE дата_звільнення IS NULL 
AND EXTRACT(YEAR FROM AGE(CURRENT_DATE, дата_прийому)) >= 3
ORDER BY дата_прийому;

-- 6. Отримати графік роботи офіціантів на наступний тиждень
SELECT 
    п.прізвище, п.імя, 
    зп.дата, 
    TO_CHAR(зп.час_початку, 'HH24:MI') AS початок_зміни, 
    TO_CHAR(зп.час_кінця, 'HH24:MI') AS кінець_зміни
FROM зміни_персоналу зп
JOIN персонал п ON зп.персонал_ід = п.ід
JOIN посади пос ON п.посада_ід = пос.ід
WHERE пос.назва = 'Офіціант'
AND зп.дата BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days'
ORDER BY зп.дата, зп.час_початку;

-- 7. Розрахувати загальну кількість годин роботи кожного працівника за місяць
SELECT 
    п.прізвище, п.імя, 
    SUM(EXTRACT(EPOCH FROM (зп.час_кінця - зп.час_початку))/3600 - зп.перерва_хвилин/60.0) AS години_роботи
FROM зміни_персоналу зп
JOIN персонал п ON зп.персонал_ід = п.ід
WHERE EXTRACT(MONTH FROM зп.дата) = EXTRACT(MONTH FROM CURRENT_DATE)
AND EXTRACT(YEAR FROM зп.дата) = EXTRACT(YEAR FROM CURRENT_DATE)
GROUP BY п.ід, п.прізвище, п.імя
ORDER BY години_роботи DESC;

-- =============================================
-- ЗАПИТИ ЩОДО СТРАВ
-- =============================================

-- 8. Отримати всі страви у вказаній категорії
SELECT с.назва, с.ціна, с.вага_грам, с.час_приготування_хвилин, с.калорійність
FROM страви с
JOIN категорії к ON с.категорія_ід = к.ід
WHERE к.назва = 'Десерти' AND с.активна = TRUE
ORDER BY с.порядок_в_меню;

-- 9. Знайти всі вегетаріанські страви у меню
SELECT с.назва, к.назва AS категорія, с.ціна, с.опис
FROM страви с
JOIN категорії к ON с.категорія_ід = к.ід
WHERE с.вегетаріанська = TRUE AND с.активна = TRUE
ORDER BY к.назва, с.назва;

-- 10. Отримати десять найдорожчих страв у меню
SELECT с.назва, к.назва AS категорія, с.ціна, с.вага_грам
FROM страви с
JOIN категорії к ON с.категорія_ід = к.ід
WHERE с.активна = TRUE
ORDER BY с.ціна DESC
LIMIT 10;

-- 11. Отримати всі страви з їх інгредієнтами
SELECT 
    с.назва AS страва, 
    к.назва AS категорія,
    і.назва AS інгредієнт,
    ві.кількість,
    і.одиниця_виміру
FROM страви с
JOIN категорії к ON с.категорія_ід = к.ід
JOIN використання_інгредієнтів ві ON с.ід = ві.страва_ід
JOIN інгредієнти і ON ві.інгредієнт_ід = і.ід
WHERE с.активна = TRUE
ORDER BY с.назва, і.назва;

-- 12. Знайти страви, які містять вказаний алерген
SELECT DISTINCT с.назва, с.опис, с.ціна
FROM страви с
JOIN використання_інгредієнтів ві ON с.ід = ві.страва_ід
JOIN інгредієнти і ON ві.інгредієнт_ід = і.ід
WHERE і.алерген = TRUE AND і.назва ILIKE '%горіх%'
AND с.активна = TRUE
ORDER BY с.назва;

-- =============================================
-- ЗАПИТИ ЩОДО СТОЛИКІВ ТА РЕЗЕРВАЦІЙ
-- =============================================

-- 13. Знайти всі доступні столики на 4+ персон на вказану дату і час
SELECT 
    ст.номер, 
    ст.кількість_місць, 
    ст.розташування
FROM столики ст
WHERE ст.активний = TRUE
AND ст.кількість_місць >= 4
AND NOT EXISTS (
    SELECT 1
    FROM резервації рез
    WHERE рез.столик_ід = ст.ід
    AND рез.дата = '2024-06-15'
    AND '19:00' BETWEEN рез.час_початку AND рез.час_кінця
    AND рез.статус_ід IN (SELECT ід FROM статуси_резервацій WHERE назва IN ('Підтверджено', 'Очікується'))
)
ORDER BY ст.кількість_місць;

-- 14. Отримати всі резервації на сьогодні
SELECT 
    рез.дата, 
    рез.час_початку, 
    рез.час_кінця, 
    ст.номер AS столик,
    рез.прізвище_клієнта, 
    рез.імя_клієнта,
    рез.телефон_клієнта,
    рез.кількість_гостей,
    стр.назва AS статус
FROM резервації рез
JOIN столики ст ON рез.столик_ід = ст.ід
JOIN статуси_резервацій стр ON рез.статус_ід = стр.ід
WHERE рез.дата = CURRENT_DATE
ORDER BY рез.час_початку;

-- 15. Підрахувати кількість резервацій для кожного столика за останній місяць
SELECT 
    ст.номер AS столик, 
    COUNT(рез.ід) AS кількість_резервацій
FROM столики ст
LEFT JOIN резервації рез ON ст.ід = рез.столик_ід
WHERE рез.дата BETWEEN CURRENT_DATE - INTERVAL '30 days' AND CURRENT_DATE
AND рез.статус_ід IN (SELECT ід FROM статуси_резервацій WHERE назва IN ('Підтверджено', 'Відвідано'))
GROUP BY ст.ід, ст.номер
ORDER BY кількість_резервацій DESC;

-- =============================================
-- ЗАПИТИ ЩОДО ЗАМОВЛЕНЬ
-- =============================================

-- 16. Отримати всі замовлення за сьогодні з деталями
SELECT 
    з.ід AS замовлення_номер,
    ст.номер AS столик,
    TO_CHAR(з.дата_час, 'HH24:MI') AS час,
    стз.назва AS статус,
    п.прізвище || ' ' || п.імя AS офіціант,
    з.кількість_клієнтів,
    з.загальна_сума,
    з.сума_знижки,
    з.фінальна_сума,
    мо.назва AS спосіб_оплати
FROM замовлення з
JOIN столики ст ON з.столик_ід = ст.ід
JOIN статуси_замовлень стз ON з.статус_ід = стз.ід
JOIN персонал п ON з.офіціант_ід = п.ід
LEFT JOIN методи_оплати мо ON з.метод_оплати_ід = мо.ід
WHERE DATE(з.дата_час) = CURRENT_DATE
ORDER BY з.дата_час;

-- 17. Список позицій конкретного замовлення
SELECT 
    с.назва AS страва,
    пз.кількість,
    пз.ціна_за_одиницю,
    пз.загальна_ціна,
    пз.стан
FROM позиції_замовлення пз
JOIN страви с ON пз.страва_ід = с.ід
WHERE пз.замовлення_ід = 123 -- Приклад ід замовлення
ORDER BY пз.час_замовлення;

-- 18. Топ-10 найпопулярніших страв за місяць
SELECT 
    с.назва,
    к.назва AS категорія,
    SUM(пз.кількість) AS кількість_замовлень
FROM позиції_замовлення пз
JOIN страви с ON пз.страва_ід = с.ід
JOIN категорії к ON с.категорія_ід = к.ід
JOIN замовлення з ON пз.замовлення_ід = з.ід
WHERE з.дата_час >= CURRENT_DATE - INTERVAL '30 days'
GROUP BY с.ід, с.назва, к.назва
ORDER BY кількість_замовлень DESC
LIMIT 10;

-- 19. Обчислити середню суму замовлення для кожного офіціанта
SELECT 
    п.прізвище || ' ' || п.імя AS офіціант,
    ROUND(AVG(з.фінальна_сума), 2) AS середня_сума_замовлення,
    COUNT(з.ід) AS кількість_замовлень
FROM замовлення з
JOIN персонал п ON з.офіціант_ід = п.ід
WHERE з.дата_час >= CURRENT_DATE - INTERVAL '30 days'
AND з.статус_ід IN (SELECT ід FROM статуси_замовлень WHERE є_фінальним = TRUE)
GROUP BY п.ід, п.прізвище, п.імя
ORDER BY середня_сума_замовлення DESC;

-- 20. Знайти всі замовлення, де є страва "Борщ український"
SELECT 
    з.ід AS замовлення_номер,
    TO_CHAR(з.дата_час, 'YYYY-MM-DD HH24:MI') AS дата_час,
    ст.номер AS столик,
    п.прізвище || ' ' || п.імя AS офіціант,
    з.фінальна_сума
FROM замовлення з
JOIN позиції_замовлення пз ON з.ід = пз.замовлення_ід
JOIN страви с ON пз.страва_ід = с.ід
JOIN столики ст ON з.столик_ід = ст.ід
JOIN персонал п ON з.офіціант_ід = п.ід
WHERE с.назва = 'Борщ український'
ORDER BY з.дата_час DESC;

-- =============================================
-- ЗАПИТИ ЩОДО ІНГРЕДІЄНТІВ
-- =============================================

-- 21. Отримати список інгредієнтів, які закінчуються на складі
SELECT 
    і.назва,
    і.одиниця_виміру,
    і.кількість_на_складі,
    і.мінімальна_кількість,
    пос.назва AS постачальник
FROM інгредієнти і
LEFT JOIN постачальники пос ON і.постачальник_ід = пос.ід
WHERE і.кількість_на_складі <= і.мінімальна_кількість
AND і.активний = TRUE
ORDER BY і.кількість_на_складі / і.мінімальна_кількість;

-- 22. Знайти страви, які не можуть бути приготовані через брак інгредієнтів
SELECT DISTINCT 
    с.назва AS страва,
    к.назва AS категорія
FROM страви с
JOIN категорії к ON с.категорія_ід = к.ід
JOIN використання_інгредієнтів ві ON с.ід = ві.страва_ід
JOIN інгредієнти і ON ві.інгредієнт_ід = і.ід
WHERE с.активна = TRUE
AND ві.обовязковий = TRUE 
AND (і.кількість_на_складі < ві.кількість OR і.активний = FALSE)
AND NOT EXISTS (
    SELECT 1 FROM використання_інгредієнтів ві2
    WHERE ві2.страва_ід = с.ід 
    AND ві2.інгредієнт_ід = ві.інгредієнт_ід
    AND ві2.альтернативний_інгредієнт_ід IS NOT NULL
)
ORDER BY к.назва, с.назва;

-- 23. Аналіз витрат на інгредієнти за останні 3 місяці
SELECT 
    EXTRACT(MONTH FROM п.дата_постачання) AS місяць,
    EXTRACT(YEAR FROM п.дата_постачання) AS рік,
    SUM(п.загальна_вартість) AS загальні_витрати,
    ROUND(AVG(п.ціна_за_одиницю), 2) AS середня_ціна_за_одиницю
FROM постачання п
WHERE п.дата_постачання >= CURRENT_DATE - INTERVAL '3 months'
GROUP BY EXTRACT(YEAR FROM п.дата_постачання), EXTRACT(MONTH FROM п.дата_постачання)
ORDER BY рік, місяць;

-- 24. Знайти топ-5 найдорожчих інгредієнтів у закупці
SELECT 
    і.назва,
    і.одиниця_виміру,
    ROUND(AVG(п.ціна_за_одиницю), 2) AS середня_ціна_закупки,
    SUM(п.кількість) AS загальна_кількість_закуплено,
    SUM(п.загальна_вартість) AS загальна_вартість
FROM інгредієнти і
JOIN постачання п ON і.ід = п.інгредієнт_ід
WHERE п.дата_постачання >= CURRENT_DATE - INTERVAL '6 months'
GROUP BY і.ід, і.назва, і.одиниця_виміру
ORDER BY середня_ціна_закупки DESC
LIMIT 5;

-- =============================================
-- АНАЛІТИЧНІ ЗАПИТИ
-- =============================================

-- 25. Виручка по днях тижня (за останні 3 місяці)
SELECT 
    TO_CHAR(з.дата_час, 'Day') AS день_тижня,
    COUNT(з.ід) AS кількість_замовлень,
    ROUND(SUM(з.фінальна_сума), 2) AS загальна_виручка,
    ROUND(AVG(з.фінальна_сума), 2) AS середній_чек
FROM замовлення з
WHERE з.дата_час >= CURRENT_DATE - INTERVAL '3 months'
AND з.статус_ід IN (SELECT ід FROM статуси_замовлень WHERE є_фінальним = TRUE)
GROUP BY TO_CHAR(з.дата_час, 'Day'), EXTRACT(DOW FROM з.дата_час)
ORDER BY EXTRACT(DOW FROM з.дата_час);

-- 26. Виручка по годинах (за останній місяць)
SELECT 
    EXTRACT(HOUR FROM з.дата_час) AS година,
    COUNT(з.ід) AS кількість_замовлень,
    ROUND(SUM(з.фінальна_сума), 2) AS загальна_виручка
FROM замовлення з
WHERE з.дата_час >= CURRENT_DATE - INTERVAL '30 days'
AND з.статус_ід IN (SELECT ід FROM статуси_замовлень WHERE є_фінальним = TRUE)
GROUP BY EXTRACT(HOUR FROM з.дата_час)
ORDER BY година;

-- 27. Порівняння виручки по місяцях
SELECT 
    EXTRACT(YEAR FROM з.дата_час) AS рік,
    EXTRACT(MONTH FROM з.дата_час) AS місяць,
    COUNT(з.ід) AS кількість_замовлень,
    SUM(з.фінальна_сума) AS виручка,
    AVG(з.фінальна_сума) AS середній_чек,
    SUM(з.чайові) AS чайові,
    COUNT(DISTINCT з.офіціант_ід) AS кількість_офіціантів
FROM замовлення з
WHERE з.дата_час >= CURRENT_DATE - INTERVAL '12 months'
AND з.статус_ід IN (SELECT ід FROM статуси_замовлень WHERE є_фінальним = TRUE)
GROUP BY EXTRACT(YEAR FROM з.дата_час), EXTRACT(MONTH FROM з.дата_час)
ORDER BY рік DESC, місяць DESC;

-- 28. Продуктивність офіціантів
WITH офіціант_метрики AS (
    SELECT 
        з.офіціант_ід,
        COUNT(з.ід) AS кількість_замовлень,
        SUM(з.фінальна_сума) AS загальна_виручка,
        SUM(з.чайові) AS загальні_чайові,
        AVG(з.фінальна_сума) AS середній_чек
    FROM замовлення з
    WHERE з.дата_час >= CURRENT_DATE - INTERVAL '30 days'
    AND з.статус_ід IN (SELECT ід FROM статуси_замовлень WHERE є_фінальним = TRUE)
    GROUP BY з.офіціант_ід
)
SELECT 
    п.прізвище || ' ' || п.імя AS офіціант,
    ом.кількість_замовлень,
    ROUND(ом.загальна_виручка, 2) AS виручка,
    ROUND(ом.загальні_чайові, 2) AS чайові,
    ROUND(ом.загальні_чайові / NULLIF(ом.загальна_виручка, 0) * 100, 2) AS відсоток_чайових,
    ROUND(ом.середній_чек, 2) AS середній_чек
FROM офіціант_метрики ом
JOIN персонал п ON ом.офіціант_ід = п.ід
ORDER BY виручка DESC;

-- 29. Ефективність використання столиків
SELECT 
    ст.номер AS столик,
    ст.кількість_місць,
    COUNT(з.ід) AS кількість_замовлень,
    SUM(з.фінальна_сума) AS виручка,
    ROUND(SUM(з.фінальна_сума) / ст.кількість_місць, 2) AS виручка_на_місце,
    ROUND(AVG(з.кількість_клієнтів::numeric / ст.кількість_місць) * 100, 2) AS середня_заповненість
FROM столики ст
LEFT JOIN замовлення з ON ст.ід = з.столик_ід
WHERE з.дата_час >= CURRENT_DATE - INTERVAL '30 days'
AND з.статус_ід IN (SELECT ід FROM статуси_замовлень WHERE є_фінальним = TRUE)
GROUP BY ст.ід, ст.номер, ст.кількість_місць
ORDER BY виручка DESC;

-- 30. Аналіз методів оплати
SELECT 
    мо.назва AS метод_оплати,
    COUNT(з.ід) AS кількість_замовлень,
    ROUND(SUM(з.фінальна_сума), 2) AS загальна_сума,
    ROUND(AVG(з.фінальна_сума), 2) AS середній_чек,
    ROUND(COUNT(з.ід) * 100.0 / (SELECT COUNT(*) FROM замовлення 
                               WHERE дата_час >= CURRENT_DATE - INTERVAL '30 days'
                               AND статус_ід IN (SELECT ід FROM статуси_замовлень WHERE є_фінальним = TRUE)), 2) AS відсоток_від_всіх
FROM замовлення з
JOIN методи_оплати мо ON з.метод_оплати_ід = мо.ід
WHERE з.дата_час >= CURRENT_DATE - INTERVAL '30 days'
AND з.статус_ід IN (SELECT ід FROM статуси_замовлень WHERE є_фінальним = TRUE)
GROUP BY мо.ід, мо.назва
ORDER BY загальна_сума DESC;

-- Приклади запитів до бази даних "Ресторан"
-- Кодування: UTF-8

-- =============================================
-- УКРАЇНСЬКА БАЗА ДАНИХ ДЛЯ TEXT-TO-SQL ЗАДАЧ (BIRD-TYPE BENCHMARK)
-- =============================================
-- Ця база даних є частиною українського набору даних для задач Text-to-SQL,
-- аналогічного англомовному набору BIRD (Benchmarking Intermediate Reasoning for text-to-SQL).
-- Запити розділені на три рівні складності для комплексного оцінювання здатності
-- моделей розуміти природну мову українською та генерувати відповідний SQL код.
-- =============================================

-- =============================================
-- ПРОСТІ ЗАПИТИ (РІВЕНЬ 1)
-- =============================================

-- Запит 1: Вивести всі активні страви з меню з їх назвами, цінами та категоріями
SELECT с.ід, с.назва, с.ціна, к.назва AS категорія
FROM страви с
JOIN категорії к ON с.категорія_ід = к.ід
WHERE с.активна = TRUE
ORDER BY к.назва, с.назва;

-- Запит 2: Знайти всі вільні столики в залі на 4 або більше осіб
SELECT ід, номер, зона, кількість_місць
FROM столики
WHERE статус = 'вільний' AND кількість_місць >= 4
ORDER BY кількість_місць;

-- Запит 3: Показати всі вегетаріанські страви з меню
SELECT назва, опис, ціна, вага_гр
FROM страви
WHERE вегетаріанська = TRUE AND активна = TRUE
ORDER BY ціна;

-- Запит 4: Вивести всі резервації на сьогоднішній день
SELECT р.ід, р.клієнт_ім_я, р.контактний_телефон, с.номер AS номер_столика, 
       р.дата_час, р.кількість_гостей
FROM резервації р
JOIN столики с ON р.стіл_ід = с.ід
WHERE DATE(р.дата_час) = CURRENT_DATE
ORDER BY р.дата_час;

-- Запит 5: Знайти всі активні категорії верхнього рівня (без батьківської категорії)
SELECT ід, назва, опис
FROM категорії
WHERE батьківська_категорія_ід IS NULL AND активна = TRUE
ORDER BY порядок_сортування;

-- =============================================
-- ЗАПИТИ СЕРЕДНЬОЇ СКЛАДНОСТІ (РІВЕНЬ 2)
-- =============================================

-- Запит 1: Показати топ-5 найпопулярніших страв за кількістю замовлень
SELECT с.назва, COUNT(п.ід) AS кількість_замовлень, SUM(п.кількість) AS загальна_кількість
FROM позиції_замовлення п
JOIN страви с ON п.страва_ід = с.ід
GROUP BY с.ід, с.назва
ORDER BY загальна_кількість DESC
LIMIT 5;

-- Запит 2: Знайти середню суму замовлення та загальну виручку по днях тижня
SELECT 
    TO_CHAR(дата_час, 'Day') AS день_тижня,
    COUNT(ід) AS кількість_замовлень,
    AVG(сума) AS середня_сума,
    SUM(сума) AS загальна_виручка
FROM замовлення
WHERE статус = 'завершено'
GROUP BY TO_CHAR(дата_час, 'Day'), EXTRACT(DOW FROM дата_час)
ORDER BY EXTRACT(DOW FROM дата_час);

-- Запит 3: Отримати статистику по офіціантах: кількість замовлень, сума, середні чайові
SELECT 
    п.прізвище || ' ' || п.ім_я AS офіціант,
    COUNT(з.ід) AS кількість_замовлень,
    SUM(з.сума) AS загальна_сума,
    AVG(з.чайові) AS середні_чайові,
    SUM(з.чайові) AS сума_чайових
FROM замовлення з
JOIN персонал п ON з.офіціант_ід = п.ід
WHERE з.статус = 'завершено'
GROUP BY п.ід, п.прізвище, п.ім_я
ORDER BY загальна_сума DESC;

-- Запит 4: Знайти всі поточні замовлення з деталями позицій
SELECT 
    з.ід AS замовлення_ід,
    с.номер AS номер_столика,
    з.дата_час,
    стр.назва AS страва,
    п.кількість,
    п.ціна_за_одиницю,
    п.кількість * п.ціна_за_одиницю AS вартість,
    п.статус AS статус_позиції
FROM замовлення з
JOIN столики с ON з.стіл_ід = с.ід
JOIN позиції_замовлення п ON з.ід = п.замовлення_ід
JOIN страви стр ON п.страва_ід = стр.ід
WHERE з.статус IN ('прийнято', 'в процесі', 'готується')
ORDER BY з.дата_час, з.ід, п.ід;

-- Запит 5: Знайти страви, які ніхто не замовляв за останній місяць
SELECT с.ід, с.назва, с.ціна, к.назва AS категорія
FROM страви с
JOIN категорії к ON с.категорія_ід = к.ід
WHERE с.активна = TRUE AND с.ід NOT IN (
    SELECT DISTINCT страва_ід
    FROM позиції_замовлення п
    JOIN замовлення з ON п.замовлення_ід = з.ід
    WHERE з.дата_час >= CURRENT_DATE - INTERVAL '30 days'
)
ORDER BY к.назва, с.назва;

-- =============================================
-- СКЛАДНІ ЗАПИТИ (РІВЕНЬ 3)
-- =============================================

-- Запит 1: Аналіз продажів за категоріями з динамікою по днях тижня
WITH продажі_категорій AS (
    SELECT 
        к.назва AS категорія,
        EXTRACT(DOW FROM з.дата_час) AS день_тижня_номер,
        TO_CHAR(з.дата_час, 'Day') AS день_тижня,
        SUM(п.кількість) AS кількість_проданих,
        SUM(п.кількість * п.ціна_за_одиницю) AS виручка
    FROM позиції_замовлення п
    JOIN замовлення з ON п.замовлення_ід = з.ід
    JOIN страви с ON п.страва_ід = с.ід
    JOIN категорії к ON с.категорія_ід = к.ід
    WHERE з.статус = 'завершено'
    GROUP BY к.назва, EXTRACT(DOW FROM з.дата_час), TO_CHAR(з.дата_час, 'Day')
)
SELECT 
    категорія,
    день_тижня,
    кількість_проданих,
    виручка,
    ROUND(виручка / SUM(виручка) OVER (PARTITION BY категорія) * 100, 2) AS відсоток_від_загальних_продажів_категорії
FROM продажі_категорій
ORDER BY категорія, день_тижня_номер;

-- Запит 2: Щомісячний звіт про ефективність персоналу
WITH щомісячні_показники AS (
    SELECT 
        п.ід AS персонал_ід,
        п.прізвище || ' ' || п.ім_я AS співробітник,
        DATE_TRUNC('month', з.дата_час) AS місяць,
        COUNT(DISTINCT з.ід) AS кількість_замовлень,
        SUM(з.сума) AS загальна_сума,
        SUM(з.чайові) AS сума_чайових,
        AVG(з.сума) AS середня_сума_замовлення,
        COUNT(DISTINCT з.ід) / COUNT(DISTINCT DATE(з.дата_час)) AS середня_кількість_замовлень_на_день
    FROM замовлення з
    JOIN персонал п ON з.офіціант_ід = п.ід
    WHERE з.статус = 'завершено'
    GROUP BY п.ід, п.прізвище, п.ім_я, DATE_TRUNC('month', з.дата_час)
)
SELECT 
    співробітник,
    TO_CHAR(місяць, 'Month YYYY') AS місяць,
    кількість_замовлень,
    загальна_сума,
    сума_чайових,
    ROUND(сума_чайових / загальна_сума * 100, 2) AS відсоток_чайових,
    середня_сума_замовлення,
    середня_кількість_замовлень_на_день,
    RANK() OVER (PARTITION BY місяць ORDER BY загальна_сума DESC) AS ранг_за_виручкою
FROM щомісячні_показники
ORDER BY місяць DESC, загальна_сума DESC;

-- Запит 3: Аналіз завантаженості ресторану за годинами та днями тижня
WITH погодинна_завантаженість AS (
    SELECT 
        EXTRACT(DOW FROM з.дата_час) AS день_тижня_номер,
        TO_CHAR(з.дата_час, 'Day') AS день_тижня,
        EXTRACT(HOUR FROM з.дата_час) AS година,
        COUNT(DISTINCT з.ід) AS кількість_замовлень,
        SUM(з.сума) AS виручка,
        COUNT(DISTINCT з.стіл_ід) AS кількість_зайнятих_столиків,
        COUNT(DISTINCT з.стіл_ід) / (SELECT COUNT(*) FROM столики WHERE активний = TRUE) AS коефіцієнт_завантаженості
    FROM замовлення з
    WHERE з.статус = 'завершено'
    GROUP BY EXTRACT(DOW FROM з.дата_час), TO_CHAR(з.дата_час, 'Day'), EXTRACT(HOUR FROM з.дата_час)
)
SELECT 
    день_тижня,
    година || ':00 - ' || година || ':59' AS часовий_проміжок,
    кількість_замовлень,
    виручка,
    кількість_зайнятих_столиків,
    ROUND(коефіцієнт_завантаженості * 100, 2) AS відсоток_завантаженості,
    CASE 
        WHEN коефіцієнт_завантаженості > 0.8 THEN 'Висока'
        WHEN коефіцієнт_завантаженості > 0.5 THEN 'Середня'
        ELSE 'Низька'
    END AS категорія_завантаженості
FROM погодинна_завантаженість
ORDER BY день_тижня_номер, година;

-- Запит 4: Аналіз частоти спільних замовлень страв (асоціативний аналіз)
WITH спільні_страви AS (
    SELECT 
        п1.страва_ід AS страва1_ід,
        п2.страва_ід AS страва2_ід,
        COUNT(DISTINCT п1.замовлення_ід) AS кількість_спільних_замовлень
    FROM позиції_замовлення п1
    JOIN позиції_замовлення п2 ON п1.замовлення_ід = п2.замовлення_ід AND п1.страва_ід < п2.страва_ід
    GROUP BY п1.страва_ід, п2.страва_ід
    HAVING COUNT(DISTINCT п1.замовлення_ід) > 2
)
SELECT 
    с1.назва AS страва1,
    с2.назва AS страва2,
    сс.кількість_спільних_замовлень,
    ROUND(сс.кількість_спільних_замовлень / (
        SELECT COUNT(DISTINCT замовлення_ід) 
        FROM позиції_замовлення 
        WHERE страва_ід = сс.страва1_ід
    ) * 100, 2) AS відсоток_від_страви1,
    ROUND(сс.кількість_спільних_замовлень / (
        SELECT COUNT(DISTINCT замовлення_ід) 
        FROM позиції_замовлення 
        WHERE страва_ід = сс.страва2_ід
    ) * 100, 2) AS відсоток_від_страви2
FROM спільні_страви сс
JOIN страви с1 ON сс.страва1_ід = с1.ід
JOIN страви с2 ON сс.страва2_ід = с2.ід
ORDER BY кількість_спільних_замовлень DESC
LIMIT 20;

-- Запит 5: Аналіз LTV клієнтів з сегментацією
WITH показники_клієнтів AS (
    SELECT 
        к.ід,
        к.прізвище || ' ' || к.ім_я AS клієнт,
        COUNT(DISTINCT з.ід) AS кількість_відвідувань,
        SUM(з.сума) AS загальна_сума,
        SUM(з.сума) / COUNT(DISTINCT з.ід) AS середній_чек,
        MIN(з.дата_час) AS перше_відвідування,
        MAX(з.дата_час) AS останнє_відвідування,
        EXTRACT(DAY FROM NOW() - MAX(з.дата_час)) AS днів_з_останнього_відвідування,
        EXTRACT(DAY FROM MAX(з.дата_час) - MIN(з.дата_час)) / 
            CASE WHEN COUNT(DISTINCT з.ід) - 1 = 0 THEN 1 ELSE COUNT(DISTINCT з.ід) - 1 END 
            AS середній_інтервал_між_відвідуваннями
    FROM клієнти к
    JOIN замовлення з ON к.ід = з.клієнт_ід
    WHERE з.статус = 'завершено'
    GROUP BY к.ід, к.прізвище, к.ім_я
),
сегментація AS (
    SELECT 
        *,
        CASE 
            WHEN кількість_відвідувань > 10 AND днів_з_останнього_відвідування < 30 THEN 'Лояльні клієнти'
            WHEN кількість_відвідувань > 5 AND днів_з_останнього_відвідування < 60 THEN 'Регулярні клієнти'
            WHEN кількість_відвідувань <= 5 AND днів_з_останнього_відвідування < 30 THEN 'Нові клієнти'
            WHEN днів_з_останнього_відвідування >= 60 AND днів_з_останнього_відвідування < 180 THEN 'Клієнти під ризиком відтоку'
            ELSE 'Неактивні клієнти'
        END AS сегмент
    FROM показники_клієнтів
)
SELECT 
    клієнт,
    сегмент,
    кількість_відвідувань,
    загальна_сума,
    ROUND(середній_чек, 2) AS середній_чек,
    TO_CHAR(перше_відвідування, 'YYYY-MM-DD') AS перше_відвідування,
    TO_CHAR(останнє_відвідування, 'YYYY-MM-DD') AS останнє_відвідування,
    днів_з_останнього_відвідування,
    ROUND(середній_інтервал_між_відвідуваннями, 1) AS середній_інтервал_днів,
    ROUND(загальна_сума / EXTRACT(DAY FROM останнє_відвідування - перше_відвідування) * 365, 2) AS річний_LTV
FROM сегментація
ORDER BY річний_LTV DESC; 