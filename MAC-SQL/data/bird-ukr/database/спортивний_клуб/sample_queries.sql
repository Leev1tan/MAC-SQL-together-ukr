-- Приклади запитів для бази даних "Спортивний клуб"
-- Призначення: Демонстрація запитів різного рівня складності до бази даних
-- Кодування: UTF-8

-- ============================================================
-- ПРОСТІ ЗАПИТИ
-- ============================================================

-- 1. Отримання списку всіх активних членів клубу
SELECT id, прізвище, імя, по_батькові, телефон, email
FROM члени_клубу
WHERE статус = 'Активний'
ORDER BY прізвище, імя;

-- 2. Отримання списку всіх тренерів за спеціалізацією
SELECT id, прізвище, імя, по_батькові, спеціалізація, досвід
FROM тренери
WHERE спеціалізація = 'Фітнес' AND статус = 'Активний'
ORDER BY досвід DESC;

-- 3. Отримання списку всіх доступних приміщень
SELECT id, назва, тип, площа, місткість
FROM приміщення
WHERE доступність = TRUE
ORDER BY тип, назва;

-- 4. Отримання списку абонементів за вартістю (від дешевших до дорожчих)
SELECT id, назва, опис, тривалість_днів, вартість
FROM абонементи
WHERE активний = TRUE
ORDER BY вартість;

-- 5. Отримання розкладу занять на певний день тижня
SELECT р.день_тижня, р.час_початку, р.час_завершення, 
       з.назва AS назва_заняття, 
       т.прізвище || ' ' || т.імя AS тренер,
       п.назва AS приміщення
FROM розклад р
JOIN заняття з ON р.заняття_id = з.id
JOIN тренери т ON р.тренер_id = т.id
JOIN приміщення п ON р.приміщення_id = п.id
WHERE р.день_тижня = 1  -- Понеділок
AND р.активний = TRUE
ORDER BY р.час_початку;

-- ============================================================
-- ЗАПИТИ СЕРЕДНЬОЇ СКЛАДНОСТІ
-- ============================================================

-- 6. Підрахунок кількості активних членств за типами абонементів
SELECT а.назва AS тип_абонементу, 
       COUNT(ч.id) AS кількість_активних_членств
FROM членство ч
JOIN абонементи а ON ч.абонемент_id = а.id
JOIN статуси_членства с ON ч.статус_id = с.id
WHERE с.назва = 'Активний'
GROUP BY а.назва
ORDER BY кількість_активних_членств DESC;

-- 7. Знаходження тренерів із найбільшою кількістю занять у розкладі
SELECT т.прізвище, т.імя, т.спеціалізація, COUNT(р.id) AS кількість_занять
FROM тренери т
JOIN розклад р ON т.id = р.тренер_id
WHERE р.активний = TRUE
GROUP BY т.id
ORDER BY кількість_занять DESC
LIMIT 5;

-- 8. Аналіз завантаженості приміщень за кількістю занять
SELECT п.назва AS приміщення, п.тип,
       COUNT(р.id) AS кількість_занять,
       SUM(CASE WHEN р.день_тижня BETWEEN 1 AND 5 THEN 1 ELSE 0 END) AS робочі_дні,
       SUM(CASE WHEN р.день_тижня IN (6, 7) THEN 1 ELSE 0 END) AS вихідні
FROM приміщення п
LEFT JOIN розклад р ON п.id = р.приміщення_id AND р.активний = TRUE
GROUP BY п.id
ORDER BY кількість_занять DESC;

-- 9. Статистика відвідуваності занять за останній місяць
SELECT з.назва AS заняття,
       COUNT(зз.id) AS всього_записів,
       SUM(CASE WHEN в.id IS NOT NULL THEN 1 ELSE 0 END) AS відвідано,
       ROUND(CAST(SUM(CASE WHEN в.id IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(зз.id) * 100, 2) AS відсоток_відвідування
FROM записи_на_заняття зз
JOIN розклад р ON зз.розклад_id = р.id
JOIN заняття з ON р.заняття_id = з.id
LEFT JOIN відвідування в ON зз.id = в.запис_на_заняття_id
WHERE зз.дата >= date('now', '-1 month')
GROUP BY з.id
ORDER BY відсоток_відвідування DESC;

-- 10. Виявлення членів клубу з закінченими абонементами
SELECT чк.прізвище, чк.імя, чк.телефон, чк.email,
       а.назва AS абонемент,
       ч.дата_завершення AS дата_закінчення,
       julianday('now') - julianday(ч.дата_завершення) AS днів_після_закінчення
FROM членство ч
JOIN члени_клубу чк ON ч.член_клубу_id = чк.id
JOIN абонементи а ON ч.абонемент_id = а.id
JOIN статуси_членства с ON ч.статус_id = с.id
WHERE с.назва = 'Завершено'
AND ч.дата_завершення BETWEEN date('now', '-30 day') AND date('now')
ORDER BY дата_закінчення;

-- ============================================================
-- СКЛАДНІ ЗАПИТИ
-- ============================================================

-- 11. Комплексний аналіз відвідуваності за днями тижня і годинами
WITH відвідування_за_часом AS (
    SELECT 
        strftime('%w', в.дата) AS день_тижня,
        strftime('%H', в.час_входу) AS година,
        COUNT(*) AS кількість
    FROM відвідування в
    WHERE в.дата >= date('now', '-3 month')
    GROUP BY день_тижня, година
)
SELECT 
    CASE 
        WHEN день_тижня = '0' THEN 'Неділя'
        WHEN день_тижня = '1' THEN 'Понеділок'
        WHEN день_тижня = '2' THEN 'Вівторок'
        WHEN день_тижня = '3' THEN 'Середа'
        WHEN день_тижня = '4' THEN 'Четвер'
        WHEN день_тижня = '5' THEN "П'ятниця"
        WHEN день_тижня = '6' THEN 'Субота'
    END AS день,
    година || ':00-' || година || ':59' AS часовий_проміжок,
    кількість,
    ROUND(кількість * 100.0 / SUM(кількість) OVER (PARTITION BY день_тижня), 2) AS відсоток_за_день,
    ROUND(кількість * 100.0 / SUM(кількість) OVER (), 2) AS відсоток_загальний
FROM відвідування_за_часом
ORDER BY день_тижня, година;

-- 12. Ефективність тренерів за кількістю індивідуальних тренувань та доходом
SELECT 
    т.прізвище, 
    т.імя, 
    т.спеціалізація,
    COUNT(б.id) AS кількість_бронювань,
    SUM(CASE WHEN б.оплачено = TRUE THEN б.вартість ELSE 0 END) AS загальний_дохід,
    AVG(CASE WHEN б.оплачено = TRUE THEN б.вартість ELSE NULL END) AS середня_вартість,
    COUNT(DISTINCT б.член_клубу_id) AS унікальних_клієнтів,
    ROUND(COUNT(б.id) * 1.0 / COUNT(DISTINCT б.член_клубу_id), 2) AS бронювань_на_клієнта
FROM тренери т
LEFT JOIN бронювання б ON т.id = б.тренер_id
WHERE б.дата >= date('now', '-6 month') OR б.дата IS NULL
GROUP BY т.id
HAVING кількість_бронювань > 0
ORDER BY загальний_дохід DESC;

-- 13. Аналіз зміни кількості активних членів клубу за місяцями
WITH місяці AS (
    SELECT date('now', '-11 month', 'start of month') AS місяць
    UNION SELECT date('now', '-10 month', 'start of month')
    UNION SELECT date('now', '-9 month', 'start of month')
    UNION SELECT date('now', '-8 month', 'start of month')
    UNION SELECT date('now', '-7 month', 'start of month')
    UNION SELECT date('now', '-6 month', 'start of month')
    UNION SELECT date('now', '-5 month', 'start of month')
    UNION SELECT date('now', '-4 month', 'start of month')
    UNION SELECT date('now', '-3 month', 'start of month')
    UNION SELECT date('now', '-2 month', 'start of month')
    UNION SELECT date('now', '-1 month', 'start of month')
    UNION SELECT date('now', 'start of month')
),
активні_члени AS (
    SELECT 
        date(м.місяць),
        COUNT(DISTINCT ч.член_клубу_id) AS кількість_активних
    FROM місяці м
    LEFT JOIN членство ч ON 
        date(м.місяць) >= ч.дата_початку AND 
        date(м.місяць) <= coalesce(ч.дата_завершення, date('now')) AND
        ч.статус_id = (SELECT id FROM статуси_членства WHERE назва = 'Активний')
    GROUP BY м.місяць
),
нові_члени AS (
    SELECT 
        date(м.місяць),
        COUNT(чк.id) AS нових_членів
    FROM місяці м
    LEFT JOIN члени_клубу чк ON 
        strftime('%Y-%m', чк.дата_реєстрації) = strftime('%Y-%m', м.місяць)
    GROUP BY м.місяць
),
втрачені_члени AS (
    SELECT 
        date(м.місяць),
        COUNT(ч.id) AS завершених_членств
    FROM місяці м
    LEFT JOIN членство ч ON 
        strftime('%Y-%m', ч.дата_завершення) = strftime('%Y-%m', м.місяць) AND
        ч.статус_id = (SELECT id FROM статуси_членства WHERE назва = 'Завершено')
    GROUP BY м.місяць
)
SELECT 
    strftime('%Y-%m', a.місяць) AS місяць_рік,
    a.кількість_активних,
    n.нових_членів,
    v.завершених_членств,
    n.нових_членів - v.завершених_членств AS чистий_приріст
FROM активні_члени a
JOIN нові_члени n ON a.місяць = n.місяць
JOIN втрачені_члени v ON a.місяць = v.місяць
ORDER BY a.місяць;

-- 14. Розрахунок середньої тривалості відвідування клубу за типами абонементів
SELECT 
    а.назва AS тип_абонементу,
    ROUND(AVG(julianday(в.час_виходу) - julianday(в.час_входу)) * 24 * 60, 2) AS середня_тривалість_хв,
    ROUND(MIN(julianday(в.час_виходу) - julianday(в.час_входу)) * 24 * 60, 2) AS мінімальна_тривалість_хв,
    ROUND(MAX(julianday(в.час_виходу) - julianday(в.час_входу)) * 24 * 60, 2) AS максимальна_тривалість_хв,
    COUNT(в.id) AS кількість_відвідувань
FROM відвідування в
JOIN члени_клубу чк ON в.член_клубу_id = чк.id
JOIN членство ч ON чк.id = ч.член_клубу_id
JOIN абонементи а ON ч.абонемент_id = а.id
WHERE в.час_виходу IS NOT NULL
AND ч.дата_початку <= в.дата AND ч.дата_завершення >= в.дата
GROUP BY а.назва
HAVING кількість_відвідувань > 10
ORDER BY середня_тривалість_хв DESC;

-- 15. Виявлення найбільш прибуткових аспектів діяльності клубу
WITH доходи_від_абонементів AS (
    SELECT 
        'Абонементи' AS джерело_доходу,
        а.назва AS деталі,
        COUNT(п.id) AS кількість_продажів,
        SUM(п.сума) AS сума_доходу
    FROM платежі п
    JOIN членство ч ON п.членство_id = ч.id
    JOIN абонементи а ON ч.абонемент_id = а.id
    WHERE п.тип = 'Абонемент'
    AND date(п.дата) >= date('now', '-6 month')
    GROUP BY а.назва
),
доходи_від_тренувань AS (
    SELECT 
        'Індивідуальні тренування' AS джерело_доходу,
        т.прізвище || ' ' || т.імя AS деталі,
        COUNT(б.id) AS кількість_продажів,
        SUM(б.вартість) AS сума_доходу
    FROM бронювання б
    JOIN тренери т ON б.тренер_id = т.id
    WHERE б.оплачено = TRUE
    AND б.дата >= date('now', '-6 month')
    GROUP BY т.id
),
загальні_доходи AS (
    SELECT * FROM доходи_від_абонементів
    UNION ALL
    SELECT * FROM доходи_від_тренувань
)
SELECT 
    джерело_доходу,
    деталі,
    кількість_продажів,
    сума_доходу,
    ROUND(сума_доходу / кількість_продажів, 2) AS середня_вартість,
    ROUND(сума_доходу * 100.0 / SUM(сума_доходу) OVER (), 2) AS відсоток_від_загального
FROM загальні_доходи
ORDER BY сума_доходу DESC
LIMIT 15; 