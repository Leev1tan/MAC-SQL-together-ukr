-- Приклади запитів до бази даних "Університет"
-- Encoding: UTF-8

-- 1. Базові запити ВИБІРКИ

-- 1.1. Вибрати всіх студентів факультету інформаційних технологій
SELECT 
    с.прізвище, 
    с.імя, 
    с.по_батькові, 
    г.назва AS група, 
    н.назва AS напрям, 
    ф.назва AS факультет
FROM 
    студенти с
    JOIN групи г ON с.група_ід = г.ід
    JOIN напрями н ON г.напрям_ід = н.ід
    JOIN кафедри к ON н.кафедра_ід = к.ід
    JOIN факультети ф ON к.факультет_ід = ф.ід
WHERE 
    ф.назва = 'Факультет інформаційних технологій'
ORDER BY 
    с.прізвище, с.імя;

-- 1.2. Отримати список всіх активних викладачів кафедри програмної інженерії
SELECT 
    в.прізвище, 
    в.імя, 
    в.по_батькові, 
    п.назва AS посада, 
    к.назва AS кафедра
FROM 
    викладачі в
    JOIN кафедри к ON в.кафедра_ід = к.ід
    JOIN посади п ON в.посада_ід = п.ід
WHERE 
    к.назва = 'Кафедра програмної інженерії' 
    AND в.активний = TRUE
ORDER BY 
    в.прізвище, в.імя;

-- 1.3. Знайти всі курси, які викладаються у поточному семестрі
SELECT DISTINCT
    к.назва AS курс,
    к.код AS код_курсу,
    к.кількість_кредитів,
    каф.назва AS кафедра
FROM 
    заняття з
    JOIN курси к ON з.курс_ід = к.ід
    JOIN кафедри каф ON к.кафедра_ід = каф.ід
    JOIN семестри с ON з.семестр_ід = с.ід
WHERE 
    с.є_активним = TRUE
ORDER BY 
    каф.назва, к.назва;

-- 2. АГРЕГАТНІ ФУНКЦІЇ та ГРУПУВАННЯ

-- 2.1. Порахувати кількість студентів у кожній групі
SELECT 
    г.назва AS група, 
    н.назва AS напрям, 
    COUNT(с.ід) AS кількість_студентів
FROM 
    групи г
    LEFT JOIN студенти с ON г.ід = с.група_ід
    JOIN напрями н ON г.напрям_ід = н.ід
GROUP BY 
    г.назва, н.назва
ORDER BY 
    г.назва;

-- 2.2. Обчислити середній бал студентів з кожного курсу за поточний семестр
SELECT 
    к.назва AS курс,
    семестр.назва AS семестр,
    ROUND(AVG(о.оцінка), 2) AS середній_бал,
    COUNT(DISTINCT о.запис_на_курс_ід) AS кількість_оцінок
FROM 
    оцінки о
    JOIN записи_на_курси зк ON о.запис_на_курс_ід = зк.ід
    JOIN заняття з ON зк.заняття_ід = з.ід
    JOIN курси к ON з.курс_ід = к.ід
    JOIN семестри семестр ON з.семестр_ід = семестр.ід
WHERE 
    семестр.є_активним = TRUE
    AND о.тип_оцінювання IN ('екзамен', 'залік')
GROUP BY 
    к.назва, семестр.назва
ORDER BY 
    середній_бал DESC;

-- 2.3. Знайти кількість курсів, які викладає кожен викладач
SELECT 
    в.прізвище, 
    в.імя, 
    COUNT(DISTINCT з.курс_ід) AS кількість_курсів
FROM 
    викладачі в
    JOIN заняття з ON в.ід = з.викладач_ід
    JOIN семестри с ON з.семестр_ід = с.ід
WHERE 
    с.є_активним = TRUE
GROUP BY 
    в.ід, в.прізвище, в.імя
ORDER BY 
    кількість_курсів DESC;

-- 3. СКЛАДНІ ЗАПИТИ з ПІДЗАПИТАМИ та УМОВАМИ

-- 3.1. Знайти студентів з найвищим середнім балом у кожній групі
SELECT 
    г.назва AS група,
    с.прізвище,
    с.імя,
    с.середній_бал
FROM 
    студенти с
    JOIN групи г ON с.група_ід = г.ід
WHERE 
    (с.група_ід, с.середній_бал) IN (
        SELECT 
            група_ід, 
            MAX(середній_бал) 
        FROM 
            студенти 
        WHERE 
            середній_бал IS NOT NULL 
        GROUP BY 
            група_ід
    )
ORDER BY 
    г.назва;

-- 3.2. Знайти викладачів, які не викладають жодного курсу в поточному семестрі
SELECT 
    в.прізвище, 
    в.імя, 
    к.назва AS кафедра
FROM 
    викладачі в
    JOIN кафедри к ON в.кафедра_ід = к.ід
WHERE 
    в.активний = TRUE
    AND в.ід NOT IN (
        SELECT DISTINCT викладач_ід 
        FROM заняття з 
        JOIN семестри с ON з.семестр_ід = с.ід 
        WHERE с.є_активним = TRUE
    )
ORDER BY 
    к.назва, в.прізвище;

-- 3.3. Знайти аудиторії, які не використовуються в певний день тижня
SELECT 
    б.назва || ', ауд. ' || а.номер AS аудиторія,
    а.тип,
    а.місткість
FROM 
    аудиторії а
    JOIN будівлі б ON а.будівля_ід = б.ід
WHERE 
    а.ід NOT IN (
        SELECT DISTINCT р.аудиторія_ід
        FROM розклад_занять р
        JOIN заняття з ON р.заняття_ід = з.ід
        JOIN семестри с ON з.семестр_ід = с.ід
        WHERE р.день_тижня = 1  -- Понеділок
        AND с.є_активним = TRUE
    )
ORDER BY 
    б.назва, а.номер;

-- 4. ОНОВЛЕННЯ, ВСТАВКА та ВИДАЛЕННЯ ДАНИХ

-- 4.1. Додати нового студента
INSERT INTO студенти (
    студентський_квиток, 
    прізвище, 
    імя, 
    по_батькові, 
    стать, 
    дата_народження, 
    група_ід, 
    дата_вступу, 
    форма_навчання, 
    фінансування, 
    статус_ід, 
    електронна_пошта
) VALUES (
    'КН-2024-1234',
    'Петренко',
    'Іван',
    'Олександрович',
    'Ч',
    '2003-05-15',
    (SELECT ід FROM групи WHERE назва = 'КН-201'),
    '2023-09-01',
    'денна',
    'бюджет',
    (SELECT ід FROM статуси_студентів WHERE назва = 'Активний'),
    'petrenko.ivan@university.edu'
);

-- 4.2. Змінити статус студента на "Академічна відпустка"
UPDATE студенти
SET 
    статус_ід = (SELECT ід FROM статуси_студентів WHERE назва = 'Академічна відпустка')
WHERE 
    студентський_квиток = 'КН-2024-1234';

-- 4.3. Видалити студента, який відрахований
DELETE FROM студенти
WHERE статус_ід = (SELECT ід FROM статуси_студентів WHERE назва = 'Відрахований')
  AND ід NOT IN (SELECT DISTINCT студент_ід FROM записи_на_курси);

-- 5. СКЛАДНІ ЗАПИТИ з КІЛЬКОМА З'ЄДНАННЯМИ

-- 5.1. Отримати повний розклад для конкретної групи на тиждень
SELECT 
    CASE 
        WHEN р.день_тижня = 1 THEN 'Понеділок'
        WHEN р.день_тижня = 2 THEN 'Вівторок'
        WHEN р.день_тижня = 3 THEN 'Середа'
        WHEN р.день_тижня = 4 THEN 'Четвер'
        WHEN р.день_тижня = 5 THEN 'П''ятниця'
        WHEN р.день_тижня = 6 THEN 'Субота'
        WHEN р.день_тижня = 7 THEN 'Неділя'
    END AS день,
    TO_CHAR(р.час_початку, 'HH24:MI') || '-' || TO_CHAR(р.час_кінця, 'HH24:MI') AS час,
    к.назва AS дисципліна,
    тз.назва AS тип_заняття,
    в.прізвище || ' ' || LEFT(в.імя, 1) || '.' || LEFT(COALESCE(в.по_батькові, ''), 1) || '.' AS викладач,
    б.назва || ', ауд. ' || а.номер AS аудиторія
FROM 
    розклад_занять р
    JOIN заняття з ON р.заняття_ід = з.ід
    JOIN курси к ON з.курс_ід = к.ід
    JOIN типи_занять тз ON з.тип_заняття_ід = тз.ід
    JOIN викладачі в ON з.викладач_ід = в.ід
    JOIN аудиторії а ON р.аудиторія_ід = а.ід
    JOIN будівлі б ON а.будівля_ід = б.ід
    JOIN групи г ON з.група_ід = г.ід
    JOIN семестри с ON з.семестр_ід = с.ід
WHERE 
    г.назва = 'КН-201'
    AND с.є_активним = TRUE
ORDER BY 
    р.день_тижня, р.час_початку;

-- 5.2. Знайти всі пари для викладача в конкретний день
SELECT 
    TO_CHAR(р.час_початку, 'HH24:MI') || '-' || TO_CHAR(р.час_кінця, 'HH24:MI') AS час,
    к.назва AS дисципліна,
    тз.назва AS тип_заняття,
    г.назва AS група,
    б.назва || ', ауд. ' || а.номер AS аудиторія
FROM 
    розклад_занять р
    JOIN заняття з ON р.заняття_ід = з.ід
    JOIN курси к ON з.курс_ід = к.ід
    JOIN типи_занять тз ON з.тип_заняття_ід = тз.ід
    JOIN викладачі в ON з.викладач_ід = в.ід
    JOIN аудиторії а ON р.аудиторія_ід = а.ід
    JOIN будівлі б ON а.будівля_ід = б.ід
    JOIN групи г ON з.група_ід = г.ід
    JOIN семестри с ON з.семестр_ід = с.ід
WHERE 
    в.прізвище = 'Іваненко'
    AND в.імя = 'Олег'
    AND р.день_тижня = 2  -- Вівторок
    AND с.є_активним = TRUE
ORDER BY 
    р.час_початку;

-- 6. АНАЛІТИЧНІ ЗАПИТИ з УМОВАМИ ТА ФУНКЦІЯМИ

-- 6.1. Знайти студентів, які мають заборгованості (оцінка менше 60) за активними курсами
SELECT DISTINCT
    с.прізвище,
    с.імя,
    г.назва AS група,
    к.назва AS курс,
    о.оцінка
FROM 
    оцінки о
    JOIN записи_на_курси зк ON о.запис_на_курс_ід = зк.ід
    JOIN студенти с ON зк.студент_ід = с.ід
    JOIN групи г ON с.група_ід = г.ід
    JOIN заняття з ON зк.заняття_ід = з.ід
    JOIN курси к ON з.курс_ід = к.ід
    JOIN семестри семестр ON з.семестр_ід = семестр.ід
WHERE 
    семестр.є_активним = TRUE
    AND о.тип_оцінювання IN ('екзамен', 'залік')
    AND о.оцінка < 60
ORDER BY 
    с.прізвище, с.імя, к.назва;

-- 6.2. Порахувати загальну кількість годин навантаження для кожного викладача по типах занять
SELECT 
    в.прізвище,
    в.імя,
    к.назва AS кафедра,
    SUM(CASE WHEN тз.назва = 'Лекція' THEN курс.години_лекцій ELSE 0 END) AS години_лекцій,
    SUM(CASE WHEN тз.назва = 'Практичне заняття' THEN курс.години_практичних ELSE 0 END) AS години_практичних,
    SUM(CASE WHEN тз.назва = 'Лабораторна робота' THEN курс.години_лабораторних ELSE 0 END) AS години_лабораторних,
    SUM(курс.години_лекцій + курс.години_практичних + курс.години_лабораторних) AS загальні_години
FROM 
    викладачі в
    JOIN заняття з ON в.ід = з.викладач_ід
    JOIN курси курс ON з.курс_ід = курс.ід
    JOIN типи_занять тз ON з.тип_заняття_ід = тз.ід
    JOIN кафедри к ON в.кафедра_ід = к.ід
    JOIN семестри с ON з.семестр_ід = с.ід
WHERE 
    с.є_активним = TRUE
GROUP BY 
    в.ід, в.прізвище, в.імя, к.назва
ORDER BY 
    загальні_години DESC;

-- 6.3. Визначити найпопулярніші курси за кількістю записаних студентів
SELECT 
    к.назва AS курс,
    каф.назва AS кафедра,
    COUNT(DISTINCT зк.студент_ід) AS кількість_студентів
FROM 
    записи_на_курси зк
    JOIN заняття з ON зк.заняття_ід = з.ід
    JOIN курси к ON з.курс_ід = к.ід
    JOIN кафедри каф ON к.кафедра_ід = каф.ід
    JOIN семестри с ON з.семестр_ід = с.ід
WHERE 
    с.є_активним = TRUE
    AND зк.статус = 'активний'
GROUP BY 
    к.назва, каф.назва
HAVING 
    COUNT(DISTINCT зк.студент_ід) > 20
ORDER BY 
    кількість_студентів DESC;

-- 7. ЗАПИТИ З ВИКОРИСТАННЯМ Віконних функцій (WINDOW FUNCTIONS)

-- 7.1. Ранжування студентів за середнім балом в межах кожної групи
SELECT 
    с.прізвище,
    с.імя,
    г.назва AS група,
    с.середній_бал,
    RANK() OVER (PARTITION BY с.група_ід ORDER BY с.середній_бал DESC) AS ранг_у_групі
FROM 
    студенти с
    JOIN групи г ON с.група_ід = г.ід
WHERE 
    с.середній_бал IS NOT NULL
ORDER BY 
    г.назва, ранг_у_групі;

-- 7.2. Аналіз тенденції оцінок по семестрах для кожного студента
SELECT 
    с.прізвище,
    с.імя,
    семестр.назва AS семестр,
    семестр.навчальний_рік,
    ROUND(AVG(о.оцінка), 2) AS середній_бал,
    ROUND(AVG(о.оцінка) OVER (
        PARTITION BY с.ід 
        ORDER BY семестр.навчальний_рік, семестр.назва
        ROWS BETWEEN 1 PRECEDING AND CURRENT ROW
    ), 2) AS ковзний_середній
FROM 
    оцінки о
    JOIN записи_на_курси зк ON о.запис_на_курс_ід = зк.ід
    JOIN студенти с ON зк.студент_ід = с.ід
    JOIN заняття з ON зк.заняття_ід = з.ід
    JOIN семестри семестр ON з.семестр_ід = семестр.ід
WHERE 
    о.тип_оцінювання IN ('екзамен', 'залік')
GROUP BY 
    с.ід, с.прізвище, с.імя, семестр.назва, семестр.навчальний_рік
ORDER BY 
    с.прізвище, семестр.навчальний_рік, семестр.назва;

-- 8. ЗАПИТИ З УМОВНОЮ ЛОГІКОЮ ТА ПЕРЕТВОРЕННЯМИ

-- 8.1. Категоризація студентів за середнім балом
SELECT 
    с.прізвище,
    с.імя,
    г.назва AS група,
    с.середній_бал,
    CASE 
        WHEN с.середній_бал >= 90 THEN 'Відмінник'
        WHEN с.середній_бал >= 75 THEN 'Добре'
        WHEN с.середній_бал >= 60 THEN 'Задовільно'
        ELSE 'Потребує покращення'
    END AS категорія
FROM 
    студенти с
    JOIN групи г ON с.група_ід = г.ід
WHERE 
    с.середній_бал IS NOT NULL
ORDER BY 
    с.середній_бал DESC;

-- 8.2. Статистика використання аудиторій в розкладі
SELECT 
    б.назва || ', ауд. ' || а.номер AS аудиторія,
    а.тип,
    а.місткість,
    COUNT(р.ід) AS кількість_занять,
    ROUND(COUNT(р.ід) * 100.0 / (SELECT COUNT(*) FROM розклад_занять), 2) AS відсоток_використання
FROM 
    аудиторії а
    JOIN будівлі б ON а.будівля_ід = б.ід
    LEFT JOIN розклад_занять р ON а.ід = р.аудиторія_ід
    LEFT JOIN заняття з ON р.заняття_ід = з.ід
    LEFT JOIN семестри с ON з.семестр_ід = с.ід
WHERE 
    с.є_активним = TRUE OR с.є_активним IS NULL
GROUP BY 
    а.ід, б.назва, а.номер, а.тип, а.місткість
ORDER BY 
    кількість_занять DESC;

-- 9. ЗАПИТИ З ТИМЧАСОВИМИ ТАБЛИЦЯМИ ТА CTE

-- 9.1. Знайти студентів з найвищим середнім балом по кожному факультету
WITH студенти_факультети AS (
    SELECT 
        с.ід,
        с.прізвище,
        с.імя,
        с.середній_бал,
        ф.ід AS факультет_ід,
        ф.назва AS факультет
    FROM 
        студенти с
        JOIN групи г ON с.група_ід = г.ід
        JOIN напрями н ON г.напрям_ід = н.ід
        JOIN кафедри к ON н.кафедра_ід = к.ід
        JOIN факультети ф ON к.факультет_ід = ф.ід
    WHERE 
        с.середній_бал IS NOT NULL
),
кращі_студенти AS (
    SELECT 
        ід,
        прізвище,
        імя,
        середній_бал,
        факультет,
        RANK() OVER (PARTITION BY факультет_ід ORDER BY середній_бал DESC) AS ранг
    FROM 
        студенти_факультети
)
SELECT 
    прізвище,
    імя,
    факультет,
    середній_бал
FROM 
    кращі_студенти
WHERE 
    ранг = 1
ORDER BY 
    факультет;

-- 9.2. Аналіз навантаження аудиторій протягом дня
WITH використання_аудиторій AS (
    SELECT 
        р.аудиторія_ід,
        р.день_тижня,
        COUNT(р.ід) AS кількість_занять
    FROM 
        розклад_занять р
        JOIN заняття з ON р.заняття_ід = з.ід
        JOIN семестри с ON з.семестр_ід = с.ід
    WHERE 
        с.є_активним = TRUE
    GROUP BY 
        р.аудиторія_ід, р.день_тижня
)
SELECT 
    б.назва || ', ауд. ' || а.номер AS аудиторія,
    а.тип,
    COALESCE(в1.кількість_занять, 0) AS понеділок,
    COALESCE(в2.кількість_занять, 0) AS вівторок,
    COALESCE(в3.кількість_занять, 0) AS середа,
    COALESCE(в4.кількість_занять, 0) AS четвер,
    COALESCE(в5.кількість_занять, 0) AS пятниця,
    COALESCE(в6.кількість_занять, 0) AS субота
FROM 
    аудиторії а
    JOIN будівлі б ON а.будівля_ід = б.ід
    LEFT JOIN використання_аудиторій в1 ON а.ід = в1.аудиторія_ід AND в1.день_тижня = 1
    LEFT JOIN використання_аудиторій в2 ON а.ід = в2.аудиторія_ід AND в2.день_тижня = 2
    LEFT JOIN використання_аудиторій в3 ON а.ід = в3.аудиторія_ід AND в3.день_тижня = 3
    LEFT JOIN використання_аудиторій в4 ON а.ід = в4.аудиторія_ід AND в4.день_тижня = 4
    LEFT JOIN використання_аудиторій в5 ON а.ід = в5.аудиторія_ід AND в5.день_тижня = 5
    LEFT JOIN використання_аудиторій в6 ON а.ід = в6.аудиторія_ід AND в6.день_тижня = 6
ORDER BY 
    б.назва, а.номер;

-- 10. СКЛАДНІ АНАЛІТИЧНІ ЗАПИТИ

-- 10.1. Аналіз успішності студентів різних форм навчання і фінансування
SELECT 
    с.форма_навчання,
    с.фінансування,
    ROUND(AVG(с.середній_бал), 2) AS середній_бал,
    COUNT(с.ід) AS кількість_студентів,
    COUNT(CASE WHEN с.середній_бал >= 90 THEN 1 END) AS відмінники,
    COUNT(CASE WHEN с.середній_бал >= 75 AND с.середній_бал < 90 THEN 1 END) AS добре,
    COUNT(CASE WHEN с.середній_бал >= 60 AND с.середній_бал < 75 THEN 1 END) AS задовільно,
    COUNT(CASE WHEN с.середній_бал < 60 THEN 1 END) AS незадовільно,
    ROUND(COUNT(CASE WHEN с.середній_бал >= 60 THEN 1 END) * 100.0 / COUNT(с.ід), 2) AS відсоток_успішності
FROM 
    студенти с
WHERE 
    с.середній_бал IS NOT NULL
GROUP BY 
    с.форма_навчання, с.фінансування
ORDER BY 
    середній_бал DESC;

-- 10.2. Порівняльний аналіз навантаження кафедр
SELECT 
    к.назва AS кафедра,
    ф.назва AS факультет,
    COUNT(DISTINCT курс.ід) AS кількість_курсів,
    COUNT(DISTINCT з.ід) AS кількість_занять,
    COUNT(DISTINCT з.група_ід) AS кількість_груп,
    COUNT(DISTINCT в.ід) AS кількість_викладачів,
    ROUND(COUNT(DISTINCT з.ід) * 1.0 / COUNT(DISTINCT в.ід), 2) AS навантаження_на_викладача
FROM 
    кафедри к
    JOIN факультети ф ON к.факультет_ід = ф.ід
    LEFT JOIN курси курс ON к.ід = курс.кафедра_ід
    LEFT JOIN заняття з ON курс.ід = з.курс_ід
    LEFT JOIN семестри с ON з.семестр_ід = с.ід
    LEFT JOIN викладачі в ON в.кафедра_ід = к.ід AND в.активний = TRUE
WHERE 
    с.є_активним = TRUE OR с.є_активним IS NULL
GROUP BY 
    к.назва, ф.назва
ORDER BY 
    навантаження_на_викладача DESC;

-- 10.3. Аналіз розподілу оцінок за різними типами занять
SELECT 
    тз.назва AS тип_заняття,
    COUNT(о.ід) AS кількість_оцінок,
    ROUND(AVG(о.оцінка), 2) AS середня_оцінка,
    MIN(о.оцінка) AS мінімальна_оцінка,
    MAX(о.оцінка) AS максимальна_оцінка,
    ROUND(STDDEV(о.оцінка), 2) AS стандартне_відхилення,
    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY о.оцінка) AS медіана
FROM 
    оцінки о
    JOIN записи_на_курси зк ON о.запис_на_курс_ід = зк.ід
    JOIN заняття з ON зк.заняття_ід = з.ід
    JOIN типи_занять тз ON з.тип_заняття_ід = тз.ід
    JOIN семестри с ON з.семестр_ід = с.ід
WHERE 
    с.є_активним = TRUE
GROUP BY 
    тз.назва
ORDER BY 
    середня_оцінка DESC; 