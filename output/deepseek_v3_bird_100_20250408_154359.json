{
  "metadata": {
    "timestamp": "2025-04-08T16:30:34.249601",
    "num_samples": 100,
    "execution_accuracy": 0.54,
    "avg_gold_time": 1.178192913532257,
    "avg_pred_time": 0.08549151854081587,
    "model": "deepseek-ai/DeepSeek-V3",
    "dataset": "BIRD",
    "metrics": {
      "exact_match": 0.07
    }
  },
  "results": [
    {
      "db_id": "formula_1",
      "question": "What is the average time in seconds of champion for each year, before year 1975?",
      "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;",
      "gold_sql": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
      "pred_sql": "SELECT T2.`year`, AVG(\n    (CAST(substr(T1.`time`, 1, 2) AS INTEGER) * 3600) + \n    (CAST(substr(T1.`time`, 4, 2) AS INTEGER) * 60) + \n    CAST(substr(T1.`time`, 7, 2) AS INTEGER) + \n    (CAST(substr(T1.`time`, 10, 3) AS INTEGER) / 1000)\n  ) AS avg_time_seconds\n  FROM results AS T1\n  INNER JOIN races AS T2\n  ON T1.`raceId` = T2.`raceId`\n  WHERE T1.`positionText` = '1'\n  AND T2.`year` < 1975\n  AND T1.`time` IS NOT NULL\n  GROUP BY T2.`year`",
      "execution_time": 42.870503,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0020029544830322266,
      "pred_time": 0.0010006427764892578
    },
    {
      "db_id": "debit_card_specializing",
      "question": "Please list the product description of the products consumed in September, 2013.",
      "evidence": "September 2013 refers to 201309; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
      "gold_sql": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'",
      "pred_sql": "SELECT DISTINCT T3.`Description`\n  FROM yearmonth AS T1\n  INNER JOIN transactions_1k AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  INNER JOIN products AS T3\n  ON T2.`ProductID` = T3.`ProductID`\n  WHERE SUBSTR(T1.`Date`, 1, 4) = '2013'\n  AND SUBSTR(T1.`Date`, 5, 2) = '09'\n  AND T3.`Description` IS NOT NULL",
      "execution_time": 19.869046,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.2922649383544922,
      "pred_time": 0.04403948783874512
    },
    {
      "db_id": "student_club",
      "question": "What is the total amount of money spent for food?",
      "evidence": "total amount of money spent refers to SUM(spent); spent for food refers to category = 'Food'",
      "gold_sql": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
      "pred_sql": "SELECT SUM(`spent`)\n  FROM budget\n  WHERE `category` = 'Food'",
      "execution_time": 9.519646,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "european_football_2",
      "question": "What are the short name of team who played safe while creating chance of passing?",
      "evidence": "played safe while creating chance of passing refers to chanceCreationPassingClass = 'Safe'; short name of team refers to team_short_name",
      "gold_sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'",
      "pred_sql": "SELECT T2.`team_short_name`\n  FROM Team_Attributes AS T1\n  INNER JOIN Team AS T2\n  ON T1.`team_api_id` = T2.`team_api_id`\n  WHERE T1.`chanceCreationPassingClass` = 'Safe'",
      "execution_time": 47.71917,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010004043579101562,
      "pred_time": 0.0
    },
    {
      "db_id": "superhero",
      "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
      "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'; a height of over 200cm refers to height_cm > 200",
      "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
      "pred_sql": "SELECT COUNT(*)\n  FROM superhero AS T1\n  INNER JOIN hero_power AS T2\n  ON T1.`id` = T2.`hero_id`\n  INNER JOIN superpower AS T3\n  ON T2.`power_id` = T3.`id`\n  WHERE T3.`power_name` = 'Super Strength'\n  AND T1.`height_cm` > 200",
      "execution_time": 11.265155,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010006427764892578,
      "pred_time": 0.0010004043579101562
    },
    {
      "db_id": "financial",
      "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
      "evidence": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995",
      "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
      "pred_sql": "SELECT COUNT(*)\n  FROM client AS T1\n  INNER JOIN district AS T2\n  ON T1.`district_id` = T2.`district_id`\n  WHERE T1.`gender` = 'M'\n  AND T2.`district_id` = (\n    SELECT `district_id`\n    FROM district\n    ORDER BY `A15` DESC\n    LIMIT 1 OFFSET 1\n  )",
      "execution_time": 87.38329,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.001001596450805664,
      "pred_time": 0.0
    },
    {
      "db_id": "toxicology",
      "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
      "evidence": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent",
      "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
      "pred_sql": "SELECT ROUND((COUNT(CASE WHEN `label` = '+' THEN 1 END) * 100.0 / COUNT(`molecule_id`)), 3) AS percentage_carcinogenic\n  FROM molecule",
      "execution_time": 7.836244,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
      "evidence": "player and driver are synonyms; the lap time of 0:0M:SS refers to lapTime.time LIKE 'M:SS%';race number refers to raceId; introduction website of the drivers refers to url;",
      "gold_sql": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
      "pred_sql": "SELECT T2.`url`\n  FROM lapTimes AS T1\n  INNER JOIN drivers AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE T1.`raceId` = 161\n  AND T1.`time` LIKE '1:27%'",
      "execution_time": 17.222849,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "toxicology",
      "question": "What is the most common bond type?",
      "evidence": "most common bond type refers MAX(COUNT(bond_type))",
      "gold_sql": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
      "pred_sql": "SELECT `bond_type`\n  FROM bond\n  GROUP BY `bond_type`\n  ORDER BY COUNT(*) DESC\n  LIMIT 1",
      "execution_time": 5.371942,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.002002716064453125,
      "pred_time": 0.0010013580322265625
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "How many patients with an Ig G higher than normal?",
      "evidence": "Ig G higher than normal refers to IGG >= 2000; Should consider DISTINCT in the final result;",
      "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000",
      "pred_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`IGG` >= 2000",
      "execution_time": 12.275207,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.029026269912719727,
      "pred_time": 0.002002239227294922
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
      "evidence": "underage patients refers to year(Birthday) < 18; three-year period from 1990 to 1993 refers to year(`Examination Date`) between '1990' and '1993'",
      "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18",
      "pred_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Examination AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`Birthday` IS NOT NULL\n  AND (strftime('%Y', 'now') - strftime('%Y', T1.`Birthday`)) < 18\n  AND T2.`Examination Date` IS NOT NULL\n  AND strftime('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993'",
      "execution_time": 11.646347,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "student_club",
      "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
      "evidence": "full name refers to first_name, last name",
      "gold_sql": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'",
      "pred_sql": "SELECT T1.`first_name`, T1.`last_name`, SUM(T2.`cost`) AS total_cost\n  FROM member AS T1\n  INNER JOIN expense AS T2\n  ON T1.`member_id` = T2.`link_to_member`\n  WHERE T1.`member_id` = 'rec4BLdZHS2Blfp4v'\n  GROUP BY T1.`first_name`, T1.`last_name`",
      "execution_time": 13.688603,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010020732879638672,
      "pred_time": 0.0
    },
    {
      "db_id": "california_schools",
      "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
      "evidence": "Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54.",
      "gold_sql": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
      "pred_sql": "SELECT \n  (SELECT COUNT(*) FROM schools WHERE `StatusType` = 'Merged' AND `DOC` = '54' AND `County` = 'Orange') * 1.0 /\n  (SELECT COUNT(*) FROM schools WHERE `StatusType` = 'Merged' AND `DOC` = '52' AND `County` = 'Orange') AS ratio",
      "execution_time": 16.254412,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.006005287170410156,
      "pred_time": 0.011010408401489258
    },
    {
      "db_id": "toxicology",
      "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
      "evidence": "hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
      "gold_sql": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label",
      "pred_sql": "SELECT \n  (SELECT COUNT(*) FROM atom WHERE `molecule_id` = 'TR006' AND `element` = 'h') * 1.0 / \n  (SELECT COUNT(*) FROM atom WHERE `molecule_id` = 'TR006') AS ratio,\n  `label`\n  FROM molecule\n  WHERE `molecule_id` = 'TR006' AND `label` IS NOT NULL",
      "execution_time": 13.110408,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.009008646011352539,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
      "evidence": "the best lap time refers to min(milliseconds); List the driver refers to drivers.forename and drivers.surname; List the race refers to races.name",
      "gold_sql": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
      "pred_sql": "SELECT T2.`forename`, T2.`surname`, T3.`name`\n  FROM lapTimes AS T1\n  INNER JOIN drivers AS T2 ON T1.`driverId` = T2.`driverId`\n  INNER JOIN races AS T3 ON T1.`raceId` = T3.`raceId`\n  WHERE T1.`milliseconds` = (\n    SELECT MIN(`milliseconds`)\n    FROM lapTimes\n  )",
      "execution_time": 14.311006,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0370333194732666,
      "pred_time": 0.04504036903381348
    },
    {
      "db_id": "student_club",
      "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
      "evidence": "The first 4 strings of the event_date values in the event table can represent year; The difference of the total amount spent = SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)",
      "gold_sql": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
      "pred_sql": "SELECT (\n  (SELECT SUM(T1.`spent`)\n   FROM budget AS T1\n   INNER JOIN event AS T2\n   ON T1.`link_to_event` = T2.`event_id`\n   WHERE T2.`event_date` LIKE '2019%') -\n  (SELECT SUM(T3.`spent`)\n   FROM budget AS T3\n   INNER JOIN event AS T4\n   ON T3.`link_to_event` = T4.`event_id`\n   WHERE T4.`event_date` LIKE '2020%')\n) AS difference",
      "execution_time": 15.085449,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "financial",
      "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
      "evidence": "Status = 'C' stands for running contract, ok so far; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100.",
      "gold_sql": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
      "pred_sql": "SELECT (\n  (SELECT COUNT(DISTINCT T1.`account_id`)\n   FROM loan AS T1\n   WHERE T1.`amount` < 100000\n   AND T1.`status` = 'C') * 100.0 /\n  (SELECT COUNT(DISTINCT T2.`account_id`)\n   FROM loan AS T2\n   WHERE T2.`amount` < 100000)\n) AS percentage",
      "execution_time": 18.525617,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
      "evidence": "normal Ig A level refers to IGA > 80 AND IGA < 500; came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990;",
      "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'",
      "pred_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`First Date` >= '1990-01-01'\n  AND T1.`First Date` IS NOT NULL\n  AND T2.`IGA` > 80 AND T2.`IGA` < 500\n  AND T2.`IGA` IS NOT NULL",
      "execution_time": 11.717839,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0030028820037841797,
      "pred_time": 0.0010004043579101562
    },
    {
      "db_id": "superhero",
      "question": "What is Abomination's superpower?",
      "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
      "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
      "pred_sql": "SELECT T2.`power_name`\n  FROM hero_power AS T1\n  INNER JOIN superpower AS T2\n  ON T1.`power_id` = T2.`id`\n  WHERE T1.`hero_id` = (\n    SELECT `id`\n    FROM superhero\n    WHERE `superhero_name` = 'Abomination'\n  )",
      "execution_time": 13.695511,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010008811950683594,
      "pred_time": 0.0
    },
    {
      "db_id": "superhero",
      "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
      "evidence": "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to colour = 'No Colour'",
      "gold_sql": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
      "pred_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN colour AS T2\n  ON T1.`eye_colour_id` = T2.`id`\n  WHERE T1.`height_cm` BETWEEN 170 AND 190\n  AND T2.`colour` = 'No Colour'",
      "execution_time": 11.001167,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
      "evidence": "normal Ig G level refers to IGG > 900 and IGG < 2000; have symptoms refers to Symptoms IS NOT NULL;",
      "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL",
      "pred_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  INNER JOIN Examination AS T3\n  ON T1.`ID` = T3.`ID`\n  WHERE T2.`IGG` > 900 AND T2.`IGG` < 2000\n  AND T3.`Symptoms` IS NOT NULL",
      "execution_time": 9.446125,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.004004955291748047
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
      "evidence": "male refers to SEX = 'M'; in-patient refers to Admission = '+'; outpatient refers to Admission = '-'; percentage = DIVIDE(COUNT(ID) where SEX = 'M' and Admission = '+', COUNT(ID) where SEX\u0412\u00a0 = 'M' and Admission = '-')",
      "gold_sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'",
      "pred_sql": "SELECT \n  (COUNT(CASE WHEN `Admission` = '+' THEN 1 END) * 100.0 / \n   COUNT(CASE WHEN `Admission` = '-' THEN 1 END)) - 100 AS deviation_percentage\n  FROM Patient\n  WHERE `SEX` = 'M'",
      "execution_time": 13.589796,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "european_football_2",
      "question": "Please provide the full name of the away team that scored the most goals.",
      "evidence": "full name refers to team_long_name; away team refers to away_team_api_id; scored the most goals refers to MAX(away_team_goal)",
      "gold_sql": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1",
      "pred_sql": "SELECT T2.`team_long_name`\n  FROM `Match` AS T1\n  INNER JOIN `Team` AS T2\n  ON T1.`away_team_api_id` = T2.`team_api_id`\n  WHERE T1.`away_team_goal` = (\n    SELECT MAX(`away_team_goal`)\n    FROM `Match`\n  )\n  GROUP BY T2.`team_long_name`",
      "execution_time": 35.732134,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.05404806137084961,
      "pred_time": 0.07989263534545898
    },
    {
      "db_id": "debit_card_specializing",
      "question": "What was the average monthly consumption of customers in SME for the year 2013?",
      "evidence": "Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
      "gold_sql": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
      "pred_sql": "SELECT AVG(T2.`Consumption`) / 12 AS avg_monthly_consumption\n  FROM customers AS T1\n  INNER JOIN yearmonth AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  WHERE T1.`Segment` = 'SME'\n  AND T2.`Date` LIKE '2013%'",
      "execution_time": 7.41686,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.043039798736572266,
      "pred_time": 0.03803443908691406
    },
    {
      "db_id": "formula_1",
      "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
      "evidence": "the fastest lap speed among all refers to max(fastestLapSpeed); Spanish Grand Prix refers to races.name = 'Spanish Grand Prix';",
      "gold_sql": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
      "pred_sql": "SELECT MAX(`fastestLapSpeed`)\n  FROM results\n  WHERE `raceId` = (\n    SELECT `raceId`\n    FROM races\n    WHERE `name` = 'Spanish Grand Prix' AND `year` = 2009\n  )",
      "execution_time": 10.502469,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0020020008087158203,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "State the ID and age of patient with positive degree of coagulation.",
      "evidence": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); positive degree of coagulation refers to RVVT = '+';",
      "gold_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
      "pred_sql": "SELECT T1.`ID`, (strftime('%Y', 'now') - strftime('%Y', T2.`Birthday`)) AS age\n  FROM Examination AS T1\n  INNER JOIN Patient AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`RVVT` = '+'\n  AND T2.`Birthday` IS NOT NULL",
      "execution_time": 16.514535,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.001001119613647461
    },
    {
      "db_id": "superhero",
      "question": "List the heroes' names whose eyes and hair colours are both black.",
      "evidence": "heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';",
      "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'",
      "pred_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN colour AS T2 ON T1.`eye_colour_id` = T2.`id`\n  INNER JOIN colour AS T3 ON T1.`hair_colour_id` = T3.`id`\n  WHERE T2.`colour` = 'Black'\n  AND T3.`colour` = 'Black'",
      "execution_time": 17.2911,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "debit_card_specializing",
      "question": "How many percent of LAM customer consumed more than 46.73?",
      "evidence": "Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100.",
      "gold_sql": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
      "pred_sql": "SELECT (\n  (SELECT COUNT(DISTINCT T1.`CustomerID`)\n    FROM customers AS T1\n    INNER JOIN yearmonth AS T2\n    ON T1.`CustomerID` = T2.`CustomerID`\n    WHERE T1.`Segment` = 'LAM'\n    AND T2.`Consumption` > 46.73)\n  * 100.0 /\n  (SELECT COUNT(*)\n    FROM customers\n    WHERE `Segment` = 'LAM')\n) AS percentage",
      "execution_time": 8.510778,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.033029794692993164,
      "pred_time": 0.039037466049194336
    },
    {
      "db_id": "financial",
      "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
      "evidence": "the credit card is high-level refers to card.type = 'gold'; eligible for loans refers to disp.type = 'OWNER'",
      "gold_sql": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
      "pred_sql": "SELECT T1.`client_id`, \n       (strftime('%Y', 'now') - strftime('%Y', T1.`birth_date`)) - \n       (strftime('%m-%d', 'now') < strftime('%m-%d', T1.`birth_date`)) AS age\nFROM client AS T1\nINNER JOIN disp AS T2 ON T1.`client_id` = T2.`client_id`\nINNER JOIN card AS T3 ON T2.`disp_id` = T3.`disp_id`\nWHERE T3.`type` = 'gold'\nAND T2.`type` = 'OWNER'",
      "execution_time": 13.860706,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0010013580322265625
    },
    {
      "db_id": "california_schools",
      "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
      "evidence": "Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, State, Zip code",
      "gold_sql": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1",
      "pred_sql": "SELECT s.`Street`, s.`City`, s.`Zip`, s.`State`\nFROM schools AS s\nJOIN (\n    SELECT sc.`cds`, \n           CAST(sc.`NumGE1500` AS REAL) / sc.`NumTstTakr` AS excellence_rate\n    FROM satscores AS sc\n    WHERE sc.`NumTstTakr` > 0\n    GROUP BY sc.`cds`\n    ORDER BY excellence_rate ASC\n    LIMIT 1\n) AS lowest_rate ON s.`CDSCode` = lowest_rate.`cds`\nWHERE s.`City` IS NOT NULL\n  AND s.`Zip` IS NOT NULL\n  AND s.`State` IS NOT NULL",
      "execution_time": 30.430388,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.02402186393737793,
      "pred_time": 0.0010013580322265625
    },
    {
      "db_id": "card_games",
      "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
      "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
      "gold_sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
      "pred_sql": "SELECT T1.`name`, T2.`format`\n  FROM cards AS T1\n  INNER JOIN legalities AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T1.`edhrecRank` = 1\n  AND T2.`status` = 'Banned'",
      "execution_time": 300.831543,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.043047189712524414,
      "pred_time": 0.0430445671081543
    },
    {
      "db_id": "toxicology",
      "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
      "evidence": "double bond refers to bond_type = '='; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type = '='), COUNT(bond_id)) as percent where molecule_id = 'TR008'",
      "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'",
      "pred_sql": "SELECT ROUND(100.0 * SUM(CASE WHEN `bond_type` = '=' THEN 1 ELSE 0 END) / COUNT(`bond_id`), 5) AS percentage\n  FROM bond\n  WHERE `molecule_id` = 'TR008'",
      "execution_time": 9.512017,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "superhero",
      "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
      "evidence": "super hero names refers to superhero_name;male superheros refers to gender = 'Male';Calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)",
      "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
      "pred_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN gender AS T2\n  ON T1.`gender_id` = T2.`id`\n  WHERE T2.`gender` = 'Male'\n  AND T1.`weight_kg` > (\n    SELECT AVG(`weight_kg`) * 0.79\n    FROM superhero\n  )\n  AND T1.`superhero_name` IS NOT NULL",
      "execution_time": 30.083305,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010018348693847656,
      "pred_time": 0.0
    },
    {
      "db_id": "superhero",
      "question": "Describe the names of neutral alignment superheroes.",
      "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
      "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
      "pred_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN alignment AS T2\n  ON T1.`alignment_id` = T2.`id`\n  WHERE T2.`alignment` = 'Neutral'",
      "execution_time": 25.88026,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
      "evidence": "severe degree of thrombosis refers to thrombosis = 2; disease refers to diagnosis;",
      "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
      "pred_sql": "SELECT T1.`ID`, T2.`SEX`, T2.`Diagnosis`\n  FROM Examination AS T1\n  INNER JOIN Patient AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`Thrombosis` = 2",
      "execution_time": 12.352081,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "financial",
      "question": "How many accounts have running contracts in Branch location 1?",
      "evidence": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
      "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
      "pred_sql": "SELECT COUNT(DISTINCT T1.`account_id`)\n  FROM loan AS T1\n  INNER JOIN account AS T2\n  ON T1.`account_id` = T2.`account_id`\n  WHERE T2.`district_id` = 1\n  AND (T1.`status` = 'C' OR T1.`status` = 'D')",
      "execution_time": 21.636092,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
      "evidence": "thrombosis level 2 refers to Thrombosis = 2; ANA pattern of only S refers to ANA = 'S'; average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`); calculation = MULTIPLY(AVG + AVG, 0.2)",
      "gold_sql": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
      "pred_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Examination AS T1\n  INNER JOIN Patient AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`Thrombosis` = 2\n  AND T1.`ANA Pattern` = 'S'\n  AND T1.`aCL IgM` > (\n    SELECT AVG(`aCL IgM`) * 1.2\n    FROM Examination\n    WHERE `aCL IgM` IS NOT NULL\n  )",
      "execution_time": 13.594189,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "student_club",
      "question": "Indicate the cost of posters for 'September Speaker' event.",
      "evidence": "'Posters' is the expense description; 'September Speaker' is an event name",
      "gold_sql": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
      "pred_sql": "SELECT `cost`\n  FROM expense\n  WHERE `expense_description` = 'Posters'\n  AND `link_to_budget` = (\n    SELECT `budget_id`\n    FROM budget\n    WHERE `link_to_event` = (\n      SELECT `event_id`\n      FROM event\n      WHERE `event_name` = 'September Speaker'\n    )\n  )",
      "execution_time": 17.739657,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "superhero",
      "question": "How many heroes have stealth power?",
      "evidence": "stealth power refers to power_name = 'Stealth';",
      "gold_sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
      "pred_sql": "SELECT COUNT(DISTINCT T1.`hero_id`)\n  FROM hero_power AS T1\n  INNER JOIN superpower AS T2\n  ON T1.`power_id` = T2.`id`\n  WHERE T2.`power_name` = 'Stealth'",
      "execution_time": 19.178508,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010006427764892578,
      "pred_time": 0.0010013580322265625
    },
    {
      "db_id": "formula_1",
      "question": "From race no. 50 to 100, how many finishers have been disqualified?",
      "evidence": "disqualified refers to statusID = 2, finisher refers to time! = null; race no. refers to raceId; raceId > 50 and raceId < 100;",
      "gold_sql": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
      "pred_sql": "SELECT COUNT(*)\n  FROM results\n  WHERE `raceId` > 50 AND `raceId` < 100\n  AND `time` IS NOT NULL\n  AND `statusId` = 2",
      "execution_time": 18.289456,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.002001047134399414,
      "pred_time": 0.001001596450805664
    },
    {
      "db_id": "card_games",
      "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
      "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
      "gold_sql": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
      "pred_sql": "SELECT T3.`name`\n  FROM cards AS T1\n  INNER JOIN sets AS T2\n  ON T1.`setCode` = T2.`code`\n  INNER JOIN foreign_data AS T3\n  ON T1.`uuid` = T3.`uuid`\n  WHERE T2.`name` = 'Coldsnap'\n  AND T3.`language` = 'Italian'\n  AND T1.`convertedManaCost` = (\n    SELECT MAX(T4.`convertedManaCost`)\n    FROM cards AS T4\n    INNER JOIN sets AS T5\n    ON T4.`setCode` = T5.`code`\n    WHERE T5.`name` = 'Coldsnap'\n  )",
      "execution_time": 29.902871,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.16965961456298828,
      "pred_time": 0.2301795482635498
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "How many female patients were given an APS diagnosis?",
      "evidence": "female refers to SEX = 'F'; APS diagnosis refers to Diagnosis='APS'",
      "gold_sql": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
      "pred_sql": "SELECT COUNT(*)\n  FROM Patient\n  WHERE `SEX` = 'F'\n  AND `Diagnosis` = 'APS'",
      "execution_time": 17.646261,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010006427764892578,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
      "evidence": "born between 1936-1956 refers to year(Birthday) BETWEEN '1936' AND '1956'; male patients refers to sex = 'M'; creatinine phosphokinase beyond the normal range refers to CPK > = 250; Should consider DISTINCT in the final result;",
      "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250",
      "pred_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`SEX` = 'M'\n  AND strftime('%Y', T1.`Birthday`) BETWEEN '1936' AND '1956'\n  AND T2.`CPK` >= 250",
      "execution_time": 20.699079,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010008811950683594,
      "pred_time": 0.0
    },
    {
      "db_id": "financial",
      "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
      "evidence": "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary.",
      "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
      "pred_sql": "SELECT COUNT(DISTINCT T1.`client_id`)\n  FROM client AS T1\n  INNER JOIN district AS T2\n  ON T1.`district_id` = T2.`district_id`\n  WHERE T1.`gender` = 'M'\n  AND T2.`A3` = 'north Bohemia'\n  AND T2.`A11` > 8000",
      "execution_time": 21.788707,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.001001119613647461,
      "pred_time": 0.0010008811950683594
    },
    {
      "db_id": "student_club",
      "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
      "evidence": "total value refers to SUM(cost); 'October Meeting' is an event name;",
      "gold_sql": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
      "pred_sql": "SELECT T1.`expense_description`, SUM(T1.`cost`) AS total_value\n  FROM expense AS T1\n  INNER JOIN budget AS T2\n  ON T1.`link_to_budget` = T2.`budget_id`\n  WHERE T2.`link_to_event` = (\n    SELECT `event_id`\n    FROM event\n    WHERE `event_name` = 'October Meeting'\n  )\n  AND T1.`approved` = 'true'\n  GROUP BY T1.`expense_description`",
      "execution_time": 24.752487,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "card_games",
      "question": "Lists all types of cards in German.",
      "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
      "gold_sql": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
      "pred_sql": "SELECT DISTINCT T1.`subtypes` AS card_type\n  FROM cards AS T1\n  INNER JOIN foreign_data AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T2.`language` = 'German'\n  AND T1.`subtypes` IS NOT NULL\nUNION\nSELECT DISTINCT T1.`supertypes` AS card_type\n  FROM cards AS T1\n  INNER JOIN foreign_data AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T2.`language` = 'German'\n  AND T1.`supertypes` IS NOT NULL",
      "execution_time": 30.90589,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.1656665802001953,
      "pred_time": 0.3343040943145752
    },
    {
      "db_id": "card_games",
      "question": "How many unknown power cards contain info about the triggered ability",
      "evidence": "unknown power cards refers to power is null or power = '*';contain info about the triggered ability refers to text contains 'triggered ability'",
      "gold_sql": "SELECT Count(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'",
      "pred_sql": "SELECT COUNT(*)\nFROM cards\nWHERE (power IS NULL OR power = '*')\nAND text LIKE '%triggered ability%'",
      "execution_time": 21.429204,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.07206535339355469,
      "pred_time": 0.057051658630371094
    },
    {
      "db_id": "financial",
      "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
      "evidence": "A11 refers to average salary; Female mapps to gender = 'F'",
      "gold_sql": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
      "pred_sql": "SELECT COUNT(DISTINCT T1.`district_id`)\n  FROM client AS T1\n  INNER JOIN district AS T2\n  ON T1.`district_id` = T2.`district_id`\n  WHERE T1.`gender` = 'F'\n  AND T2.`A11` > 6000 AND T2.`A11` < 10000",
      "execution_time": 29.436434,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010006427764892578,
      "pred_time": 0.0009999275207519531
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
      "evidence": "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; does not have thrombosis refers to Thrombosis = 0;",
      "gold_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0",
      "pred_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Examination AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`Admission` IN ('-', '+-')\n  AND T2.`Thrombosis` = 0",
      "execution_time": 20.810063,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "superhero",
      "question": "Who is the dumbest superhero?",
      "evidence": "the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'",
      "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
      "pred_sql": "SELECT T3.`superhero_name`\n  FROM attribute AS T1\n  INNER JOIN hero_attribute AS T2\n  ON T1.`id` = T2.`attribute_id`\n  INNER JOIN superhero AS T3\n  ON T2.`hero_id` = T3.`id`\n  WHERE T1.`attribute_name` = 'Intelligence'\n  AND T2.`attribute_value` = (\n    SELECT MIN(T5.`attribute_value`)\n    FROM attribute AS T4\n    INNER JOIN hero_attribute AS T5\n    ON T4.`id` = T5.`attribute_id`\n    WHERE T4.`attribute_name` = 'Intelligence'\n  )",
      "execution_time": 31.586568,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010013580322265625,
      "pred_time": 0.0020017623901367188
    },
    {
      "db_id": "debit_card_specializing",
      "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
      "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'",
      "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
      "pred_sql": "SELECT COUNT(*)\n  FROM transactions_1k AS T1\n  INNER JOIN gasstations AS T2\n  ON T1.`GasStationID` = T2.`GasStationID`\n  WHERE T2.`Country` = 'CZE'\n  AND T1.`Date` > '2012-01-01'",
      "execution_time": 9.988541,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
      "evidence": "from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100; ",
      "gold_sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
      "pred_sql": "SELECT \n  (COUNT(DISTINCT CASE WHEN T2.`time` IS NOT NULL THEN T1.`driverId` END) * 100.0 / \n   COUNT(DISTINCT T1.`driverId`)) AS completion_percentage\n  FROM drivers AS T1\n  INNER JOIN results AS T2 ON T1.`driverId` = T2.`driverId`\n  INNER JOIN races AS T3 ON T2.`raceId` = T3.`raceId`\n  WHERE T1.`nationality` = 'Japanese'\n  AND T3.`year` BETWEEN 2007 AND 2009",
      "execution_time": 24.551963,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0030024051666259766,
      "pred_time": 0.004003286361694336
    },
    {
      "db_id": "superhero",
      "question": "Calculate the percentage of superheroes with blue eyes.",
      "evidence": "percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE color = 'Blue'), COUNT(superhero_name)), 100.0); blue eyes refers to color = 'Blue' and color.id =  eye_colour_id = 7;",
      "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id",
      "pred_sql": "SELECT (COUNT(CASE WHEN T2.`colour` = 'Blue' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\n  FROM superhero AS T1\n  LEFT JOIN colour AS T2\n  ON T1.`eye_colour_id` = T2.`id`",
      "execution_time": 10.958102,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "superhero",
      "question": "Rank heroes published by Marvel Comics by their height in descending order.",
      "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
      "gold_sql": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
      "pred_sql": "SELECT T1.`superhero_name`, T1.`height_cm`\n  FROM superhero AS T1\n  INNER JOIN publisher AS T2\n  ON T1.`publisher_id` = T2.`id`\n  WHERE T2.`publisher_name` = 'Marvel Comics'\n  ORDER BY T1.`height_cm` DESC",
      "execution_time": 17.504985,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010018348693847656,
      "pred_time": 0.0
    },
    {
      "db_id": "california_schools",
      "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
      "evidence": "Communication number refers to phone number.",
      "gold_sql": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'",
      "pred_sql": "SELECT \n    satscores.`sname` AS school_name,\n    AVG(satscores.`AvgScrWrite`) AS average_writing_score,\n    schools.`Phone` AS communication_number\nFROM \n    schools\nINNER JOIN \n    satscores ON schools.`CDSCode` = satscores.`cds`\nWHERE \n    (schools.`OpenDate` > '1991-12-31' OR schools.`ClosedDate` < '2000-01-01')\n    AND satscores.`sname` IS NOT NULL\n    AND satscores.`AvgScrWrite` IS NOT NULL\n    AND (schools.`OpenDate` IS NOT NULL OR schools.`ClosedDate` IS NOT NULL)\nGROUP BY \n    satscores.`sname`, schools.`Phone`",
      "execution_time": 42.230632,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.019016265869140625,
      "pred_time": 0.008514404296875
    },
    {
      "db_id": "financial",
      "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
      "evidence": "operation = 'VYBER' refers to withdrawal in cash",
      "gold_sql": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
      "pred_sql": "SELECT T1.`trans_id`, T1.`date`, T1.`amount`\n  FROM trans AS T1\n  INNER JOIN disp AS T2\n  ON T1.`account_id` = T2.`account_id`\n  WHERE T2.`client_id` = 3356\n  AND T1.`operation` = 'VYBER'",
      "execution_time": 15.144719,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.17115497589111328,
      "pred_time": 0.0795743465423584
    },
    {
      "db_id": "formula_1",
      "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
      "evidence": "Paul di Resta refers to the full name of the driver; Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'; race number refers to raceId; percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))",
      "gold_sql": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
      "pred_sql": "SELECT ((T1.`fastestLapSpeed` - T2.`fastestLapSpeed`) * 100 / T1.`fastestLapSpeed`) AS percentage_faster\n  FROM (\n    SELECT `fastestLapSpeed`\n    FROM results\n    INNER JOIN drivers\n    ON results.`driverId` = drivers.`driverId`\n    WHERE drivers.`forename` = 'Paul'\n    AND drivers.`surname` = 'di Resta'\n    AND results.`raceId` = 853\n  ) AS T1,\n  (\n    SELECT `fastestLapSpeed`\n    FROM results\n    INNER JOIN drivers\n    ON results.`driverId` = drivers.`driverId`\n    WHERE drivers.`forename` = 'Paul'\n    AND drivers.`surname` = 'di Resta'\n    AND results.`raceId` = 854\n  ) AS T2",
      "execution_time": 25.55261,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.004002571105957031,
      "pred_time": 0.0010013580322265625
    },
    {
      "db_id": "codebase_community",
      "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
      "evidence": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
      "gold_sql": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
      "pred_sql": "SELECT \n  (COUNT(DISTINCT CASE WHEN t.`TagName` = 'r' THEN p.`Id` END) * 100.0 / \n  NULLIF(COUNT(DISTINCT p.`Id`), 0)) AS percentage\nFROM posts AS p\nLEFT JOIN tags AS t ON p.`Tags` LIKE '%<' || t.`TagName` || '>%'\nWHERE p.`OwnerDisplayName` = 'Community'",
      "execution_time": 106.727213,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.2642388343811035,
      "pred_time": 0.08225035667419434
    },
    {
      "db_id": "formula_1",
      "question": "Which country is the oldest driver from?",
      "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
      "gold_sql": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
      "pred_sql": "SELECT `nationality`\n  FROM drivers\n  WHERE `dob` IS NOT NULL\n  ORDER BY `dob` ASC\n  LIMIT 1",
      "execution_time": 9.616005,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.001001119613647461,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
      "evidence": "born in 1971 refers to year(dob) = 1971; has the fastest lap time refers to fastestLapTime has values",
      "gold_sql": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL",
      "pred_sql": "SELECT DISTINCT T1.`driverId`, T1.`code`\n  FROM drivers AS T1\n  INNER JOIN results AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE strftime('%Y', T1.`dob`) = '1971'\n  AND T2.`fastestLapTime` IS NOT NULL\n  AND (T2.`raceId`, T2.`fastestLapTime`) IN (\n    SELECT `raceId`, MIN(`fastestLapTime`) AS fastest_time\n    FROM results\n    WHERE `fastestLapTime` IS NOT NULL\n    GROUP BY `raceId`\n  )",
      "execution_time": 14.749478,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.004004240036010742,
      "pred_time": 0.004003286361694336
    },
    {
      "db_id": "financial",
      "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
      "evidence": "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11",
      "gold_sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
      "pred_sql": "SELECT \n  (COUNT(CASE WHEN T1.`gender` = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_female\n  FROM client AS T1\n  INNER JOIN account AS T2\n  ON T1.`district_id` = T2.`district_id`\n  INNER JOIN district AS T3\n  ON T1.`district_id` = T3.`district_id`\n  WHERE T3.`A11` > 10000",
      "execution_time": 14.247348,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010013580322265625,
      "pred_time": 0.022019624710083008
    },
    {
      "db_id": "superhero",
      "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
      "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
      "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
      "pred_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN colour AS T2\n  ON T1.`eye_colour_id` = T2.`id`\n  INNER JOIN colour AS T3\n  ON T1.`hair_colour_id` = T3.`id`\n  WHERE T2.`colour` = 'Blue'\n  AND T3.`colour` = 'Blond'",
      "execution_time": 9.420311,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0010006427764892578,
      "pred_time": 0.0
    },
    {
      "db_id": "debit_card_specializing",
      "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
      "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; '2012/8/26' can be represented by '2012-08-26'; during 8:00-9:00 can be represented as Time BETWEEN '08:00:00' AND '09:00:00'",
      "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
      "pred_sql": "SELECT COUNT(T1.`TransactionID`)\n  FROM transactions_1k AS T1\n  INNER JOIN gasstations AS T2\n  ON T1.`GasStationID` = T2.`GasStationID`\n  WHERE T1.`Date` = '2012-08-26'\n  AND T1.`Time` BETWEEN '08:00:00' AND '09:00:00'\n  AND T2.`Country` = 'CZE'",
      "execution_time": 7.669965,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "codebase_community",
      "question": "Which user have only one post history per post and having at least 1000 views?",
      "evidence": "having at least 1000 view refers to Views > = 1000; user refers to UserId",
      "gold_sql": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
      "pred_sql": "SELECT DISTINCT T1.`Id`, T1.`DisplayName`\n  FROM users AS T1\n  INNER JOIN (\n      SELECT `UserId`\n      FROM postHistory\n      GROUP BY `UserId`, `PostId`\n      HAVING COUNT(*) = 1\n  ) AS T2 ON T1.`Id` = T2.`UserId`\n  WHERE T1.`Views` >= 1000",
      "execution_time": 21.004667,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.36983704566955566,
      "pred_time": 0.2892637252807617
    },
    {
      "db_id": "superhero",
      "question": "What is Copycat's race?",
      "evidence": "Copycat is the superhero_name;",
      "gold_sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
      "pred_sql": "SELECT T2.`race`\n  FROM superhero AS T1\n  INNER JOIN race AS T2\n  ON T1.`race_id` = T2.`id`\n  WHERE T1.`superhero_name` = 'Copycat'",
      "execution_time": 24.494136,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "What is the average age of the male patient with high cholesterol?",
      "evidence": "average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID)); male patient refers to sex = 'M'; high cholesterol refers to `T-CHO` > = 250;",
      "gold_sql": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
      "pred_sql": "SELECT AVG(CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', T1.`Birthday`) AS INTEGER)) AS average_age\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`SEX` = 'M'\n  AND T2.`T-CHO` >= 250\n  AND T1.`Birthday` IS NOT NULL",
      "execution_time": 11.124602,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010020732879638672,
      "pred_time": 0.0010008811950683594
    },
    {
      "db_id": "toxicology",
      "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
      "evidence": "type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around",
      "gold_sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
      "pred_sql": "SELECT T1.`bond_type`\n  FROM bond AS T1\n  INNER JOIN connected AS T2\n  ON T1.`bond_id` = T2.`bond_id`\n  WHERE (T2.`atom_id` = 'TR004_8' AND T2.`atom_id2` = 'TR004_20')\n     OR (T2.`atom_id` = 'TR004_20' AND T2.`atom_id2` = 'TR004_8')",
      "execution_time": 8.139768,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "Please state the reference name of the oldest German driver.",
      "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
      "gold_sql": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
      "pred_sql": "SELECT `driverRef`\n  FROM drivers\n  WHERE `nationality` = 'German'\n  AND `dob` = (\n    SELECT MIN(`dob`)\n    FROM drivers\n    WHERE `nationality` = 'German'\n    AND `dob` IS NOT NULL\n  )",
      "execution_time": 9.669597,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010008811950683594,
      "pred_time": 0.0
    },
    {
      "db_id": "toxicology",
      "question": "What is the percentage of element chlorine in carcinogenic molecules?",
      "evidence": "chlorine refers to element = 'cl'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(element = 'pb'); COUNT(molecule_id)) as percentage where label = '+'",
      "gold_sql": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
      "pred_sql": "SELECT \n  (COUNT(CASE WHEN T1.`element` = 'cl' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\n  FROM atom AS T1\n  INNER JOIN molecule AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T2.`label` = '+'",
      "execution_time": 7.562915,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.002002716064453125,
      "pred_time": 0.002001523971557617
    },
    {
      "db_id": "codebase_community",
      "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
      "evidence": "\"Understanding what Dassault iSight is doing?\" is the Title of post; user refers to DisplayName;",
      "gold_sql": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
      "pred_sql": "SELECT `DisplayName`, `Reputation`\n  FROM users\n  WHERE `Id` = (\n    SELECT `OwnerUserId`\n    FROM posts\n    WHERE `Title` = 'Understanding what Dassault iSight is doing?'\n  )",
      "execution_time": 18.02175,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.08307433128356934,
      "pred_time": 0.023020505905151367
    },
    {
      "db_id": "toxicology",
      "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
      "evidence": "label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'; list top three molecules refers to return molecule_id and order by molecule_id;",
      "gold_sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
      "pred_sql": "SELECT DISTINCT T1.`molecule_id`\n  FROM molecule AS T1\n  INNER JOIN bond AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T1.`label` = '-'\n  AND T2.`bond_type` = '-'\n  ORDER BY T1.`molecule_id` ASC\n  LIMIT 3",
      "execution_time": 8.865254,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0020012855529785156,
      "pred_time": 0.001001119613647461
    },
    {
      "db_id": "student_club",
      "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
      "evidence": "'Environmental Engineering' is the major_name;",
      "gold_sql": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
      "pred_sql": "SELECT T1.`last_name`, T2.`department`, T2.`college`\n  FROM member AS T1\n  INNER JOIN major AS T2\n  ON T1.`link_to_major` = T2.`major_id`\n  WHERE T2.`major_name` = 'Environmental Engineering'",
      "execution_time": 10.53203,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
      "evidence": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010",
      "gold_sql": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
      "pred_sql": "SELECT T3.`name`, T3.`nationality`, SUM(T1.`points`) AS total_points\n  FROM constructorResults AS T1\n  INNER JOIN races AS T2\n  ON T1.`raceId` = T2.`raceId`\n  INNER JOIN constructors AS T3\n  ON T1.`constructorId` = T3.`constructorId`\n  WHERE T2.`name` = 'Monaco Grand Prix'\n  AND T2.`year` BETWEEN 1980 AND 2010\n  GROUP BY T1.`constructorId`\n  ORDER BY total_points DESC\n  LIMIT 1",
      "execution_time": 28.219836,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010006427764892578,
      "pred_time": 0.0010004043579101562
    },
    {
      "db_id": "codebase_community",
      "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
      "evidence": "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post;",
      "gold_sql": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
      "pred_sql": "SELECT `Text`\n  FROM comments\n  WHERE `UserId` IN (\n    SELECT DISTINCT `UserId`\n    FROM postHistory\n    WHERE `PostId` = (\n      SELECT `Id`\n      FROM posts\n      WHERE `Title` = 'Why square the difference instead of taking the absolute value in standard deviation?'\n    )\n  )\n  AND `Text` IS NOT NULL",
      "execution_time": 19.570082,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.3172876834869385,
      "pred_time": 0.20318365097045898
    },
    {
      "db_id": "codebase_community",
      "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
      "evidence": "percentage = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2011 and Reputation > 1000), COUNT(Id) ) * 100;",
      "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
      "pred_sql": "SELECT (\n  (SELECT COUNT(DISTINCT ph1.PostId)\n   FROM postHistory AS ph1\n   INNER JOIN posts AS p ON ph1.PostId = p.Id\n   INNER JOIN users AS u ON p.OwnerUserId = u.Id\n   WHERE strftime('%Y', ph1.CreationDate) = '2011'\n   AND u.Reputation > 1000)\n  * 100.0 /\n  (SELECT COUNT(DISTINCT ph2.PostId)\n   FROM postHistory AS ph2\n   WHERE strftime('%Y', ph2.CreationDate) = '2011')\n) AS percentage",
      "execution_time": 38.194676,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.18616986274719238,
      "pred_time": 0.478452205657959
    },
    {
      "db_id": "european_football_2",
      "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
      "evidence": "average overall rating refers to avg(overall_rating); Marko Arnautovic refers to player_name = 'Marko Arnautovic'; from 2007/2/22 to 2016/4/21 refers to the first 10 characters of date BETWEEN '2007-02-22' and '2016-04-21'",
      "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
      "pred_sql": "SELECT AVG(`overall_rating`)\n  FROM Player_Attributes\n  WHERE `player_api_id` = (\n    SELECT `player_api_id`\n    FROM Player\n    WHERE `player_name` = 'Marko Arnautovic'\n  )\n  AND date(`date`) BETWEEN '2007-02-22' AND '2016-04-21'",
      "execution_time": 50.014424,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.09608793258666992,
      "pred_time": 0.04904484748840332
    },
    {
      "db_id": "formula_1",
      "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
      "evidence": "in September 2005 refers to MONTH(date) = 9 and YEAR(date) = 2005",
      "gold_sql": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'",
      "pred_sql": "SELECT T1.`name` AS race_name, T2.`name` AS circuit_name, T2.`location`\n  FROM races AS T1\n  INNER JOIN circuits AS T2\n  ON T1.`circuitId` = T2.`circuitId`\n  WHERE strftime('%m', T1.`date`) = '09' AND strftime('%Y', T1.`date`) = '2005'",
      "execution_time": 12.865685,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "card_games",
      "question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?",
      "evidence": "Eighth Edition is the name of card set which refers to name = 'Eighth Edition'; Simplified Chinese refers to language = 'Chinese Simplified'; translation of the name refers to translation",
      "gold_sql": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'",
      "pred_sql": "SELECT `translation`\n  FROM set_translations\n  WHERE `setCode` = (\n    SELECT `code`\n    FROM sets\n    WHERE `name` = 'Eighth Edition'\n  )\n  AND `language` = 'Chinese Simplified'",
      "execution_time": 18.415726,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0009999275207519531
    },
    {
      "db_id": "student_club",
      "question": "Which event has the lowest cost?",
      "evidence": "event refers to event_name; lowest cost means MIN(cost)",
      "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
      "pred_sql": "SELECT T1.`event_name`\n  FROM event AS T1\n  INNER JOIN budget AS T2\n  ON T1.`event_id` = T2.`link_to_event`\n  INNER JOIN expense AS T3\n  ON T2.`budget_id` = T3.`link_to_budget`\n  WHERE T3.`cost` = (\n    SELECT MIN(`cost`)\n    FROM expense\n  )",
      "execution_time": 14.181882,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010013580322265625,
      "pred_time": 0.0
    },
    {
      "db_id": "card_games",
      "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
      "evidence": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))",
      "gold_sql": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
      "pred_sql": "SELECT c.`name`\n  FROM cards AS c\n  INNER JOIN legalities AS l\n  ON c.`uuid` = l.`uuid`\n  WHERE l.`status` = 'Banned'\n  AND l.`format` = (\n    SELECT `format`\n    FROM legalities\n    WHERE `status` = 'Banned'\n    GROUP BY `format`\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n  )",
      "execution_time": 17.750122,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 75.83535027503967,
      "pred_time": 0.07106566429138184
    },
    {
      "db_id": "formula_1",
      "question": "Please list the lap records for the circuits in Italy.",
      "evidence": "lap record means the fastest time recorded which refers to time",
      "gold_sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
      "pred_sql": "SELECT T3.`name` AS circuit_name, MIN(T2.`time`) AS lap_record\n  FROM races AS T1\n  INNER JOIN circuits AS T3\n  ON T1.`circuitId` = T3.`circuitId`\n  INNER JOIN lapTimes AS T2\n  ON T1.`raceId` = T2.`raceId`\n  WHERE T3.`country` = 'Italy'\n  GROUP BY T3.`name`",
      "execution_time": 24.155132,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 1.2760002613067627,
      "pred_time": 0.04604172706604004
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
      "evidence": "patient's diagnosis refers to Diagnosis; lower red blood cell refers to RBC < 3.5; age = SUBTRACT(year(current_timestamp), year(Birthday)); ",
      "gold_sql": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
      "pred_sql": "SELECT T2.`ID`, \n       T2.`Diagnosis`,\n       (strftime('%Y', 'now') - strftime('%Y', T2.`Birthday`)) AS age\n  FROM Patient AS T2\n  INNER JOIN (\n      SELECT DISTINCT T1.`ID`\n      FROM Laboratory AS T1\n      WHERE T1.`RBC` < 3.5\n      AND T1.`RBC` IS NOT NULL\n  ) AS T3\n  ON T2.`ID` = T3.`ID`\n  WHERE T2.`Birthday` IS NOT NULL",
      "execution_time": 126.342766,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.004003286361694336,
      "pred_time": 0.003002166748046875
    },
    {
      "db_id": "codebase_community",
      "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
      "evidence": "Text = 'fine, you win :)';",
      "gold_sql": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
      "pred_sql": "SELECT `Reputation`, `UpVotes`\n  FROM users\n  WHERE `Id` = (\n    SELECT `UserId`\n    FROM comments\n    WHERE `Text` = 'fine, you win :)'\n  )",
      "execution_time": 18.323564,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.03903555870056152,
      "pred_time": 0.0
    },
    {
      "db_id": "california_schools",
      "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
      "evidence": "Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
      "gold_sql": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
      "pred_sql": "SELECT T1.`School Name`, T2.`Street`, T2.`City`, T2.`State`, T2.`Zip`\n  FROM frpm AS T1\n  INNER JOIN schools AS T2\n  ON T1.`CDSCode` = T2.`CDSCode`\n  WHERE ABS(T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > 30\n  AND T2.`Street` IS NOT NULL\n  AND T2.`City` IS NOT NULL\n  AND T2.`State` IS NOT NULL\n  AND T2.`Zip` IS NOT NULL",
      "execution_time": 20.176052,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.012009620666503906,
      "pred_time": 0.014012575149536133
    },
    {
      "db_id": "european_football_2",
      "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
      "evidence": "average number of long shot = DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id));",
      "gold_sql": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
      "pred_sql": "SELECT AVG(`long_shots`)\n  FROM Player_Attributes\n  WHERE `player_api_id` = (\n    SELECT `player_api_id`\n    FROM Player\n    WHERE `player_name` = 'Ahmed Samir Farag'\n  )",
      "execution_time": 50.987245,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0870811939239502,
      "pred_time": 0.049044132232666016
    },
    {
      "db_id": "card_games",
      "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
      "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; designed by Adam refers to artist = 'Adam Rex'",
      "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
      "pred_sql": "SELECT COUNT(*)\n  FROM cards\n  WHERE `setCode` = (\n    SELECT T1.`code`\n    FROM sets AS T1\n    INNER JOIN set_translations AS T2\n    ON T1.`code` = T2.`setCode`\n    WHERE T2.`translation` = 'Hauptset Zehnte Edition'\n  )\n  AND `artist` = 'Adam Rex'",
      "execution_time": 45.383265,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.041036128997802734,
      "pred_time": 0.04887652397155762
    },
    {
      "db_id": "financial",
      "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
      "evidence": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A.",
      "gold_sql": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
      "pred_sql": "SELECT \n  T2.`account_id`,\n  (SELECT (MAX(T3.`A11`) - MIN(T3.`A11`)) \n   FROM client AS T1\n   INNER JOIN district AS T3\n   ON T1.`district_id` = T3.`district_id`\n   WHERE T1.`gender` = 'F') AS salary_gap\nFROM client AS T1\nINNER JOIN disp AS T2\nON T1.`client_id` = T2.`client_id`\nINNER JOIN district AS T3\nON T1.`district_id` = T3.`district_id`\nWHERE T1.`gender` = 'F'\nAND T3.`A11` = (\n  SELECT MIN(T5.`A11`)\n  FROM client AS T4\n  INNER JOIN district AS T5\n  ON T4.`district_id` = T5.`district_id`\n  WHERE T4.`gender` = 'F'\n)\nORDER BY T1.`birth_date` ASC\nLIMIT 1",
      "execution_time": 41.92316,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010018348693847656,
      "pred_time": 0.0020017623901367188
    },
    {
      "db_id": "student_club",
      "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
      "evidence": "'Business' is a major name; wear medium size t-shirt refers to t_shirt_size = 'Medium'",
      "gold_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
      "pred_sql": "SELECT COUNT(*)\n  FROM member AS T1\n  INNER JOIN major AS T2\n  ON T1.`link_to_major` = T2.`major_id`\n  WHERE T2.`major_name` = 'Business'\n  AND T1.`t_shirt_size` = 'Medium'",
      "execution_time": 15.109845,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "european_football_2",
      "question": "State the name of the most strongest player.",
      "evidence": "strongest players refers to player has MAX(overall_rating)",
      "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
      "pred_sql": "SELECT T2.`player_name`\n  FROM Player_Attributes AS T1\n  INNER JOIN Player AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T1.`overall_rating` = (\n    SELECT MAX(`overall_rating`)\n    FROM Player_Attributes\n  )",
      "execution_time": 41.281354,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.09708738327026367,
      "pred_time": 0.09708714485168457
    },
    {
      "db_id": "superhero",
      "question": "Identify superheroes who can control wind and list their names in alphabetical order.",
      "evidence": "superheroes refers to superhero_name; can control wind refers to power_name = 'Wind Control';",
      "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name",
      "pred_sql": "SELECT T3.`superhero_name`\n  FROM hero_power AS T1\n  INNER JOIN superpower AS T2\n  ON T1.`power_id` = T2.`id`\n  INNER JOIN superhero AS T3\n  ON T1.`hero_id` = T3.`id`\n  WHERE T2.`power_name` = 'Wind Control'\n  ORDER BY T3.`superhero_name` ASC",
      "execution_time": 17.387022,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0009982585906982422,
      "pred_time": 0.0
    },
    {
      "db_id": "toxicology",
      "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
      "evidence": "TR010 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); ",
      "gold_sql": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
      "pred_sql": "SELECT \n  (SELECT T1.`bond_type`\n   FROM bond AS T1\n   WHERE T1.`molecule_id` = 'TR010'\n   GROUP BY T1.`bond_type`\n   ORDER BY COUNT(*) DESC\n   LIMIT 1) AS majority_bond_type,\n  (SELECT `label` = '+'\n   FROM molecule\n   WHERE `molecule_id` = 'TR010') AS is_carcinogenic",
      "execution_time": 15.224796,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010008811950683594,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "Please give the name of the race held on the circuits in Germany.",
      "evidence": "Germany is a name of country;",
      "gold_sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
      "pred_sql": "SELECT T1.`name`\n  FROM races AS T1\n  INNER JOIN circuits AS T2\n  ON T1.`circuitId` = T2.`circuitId`\n  WHERE T2.`country` = 'Germany'",
      "execution_time": 17.363239,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "card_games",
      "question": "What are the borderless cards available without powerful foils?",
      "evidence": "borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null",
      "gold_sql": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
      "pred_sql": "SELECT T1.`id`\n  FROM cards AS T1\n  WHERE T1.`borderColor` = 'borderless'\n  AND T1.`cardKingdomId` IS NOT NULL\n  AND T1.`cardKingdomFoilId` IS NOT NULL",
      "execution_time": 31.48245,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.04103899002075195,
      "pred_time": 0.04003620147705078
    },
    {
      "db_id": "european_football_2",
      "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
      "evidence": "players age at present = SUBTRACT((DATETIME(), birthday)); sprint speed of no less than 97 refers to sprint_speed > = 97; between 2013 to 2015 refers to YEAR(date) > = '2013' AND YEAR(date) < = '2015'; ",
      "gold_sql": "SELECT DISTINCT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.`date`) >= '2013' AND STRFTIME('%Y',t1.`date`) <= '2015' AND t1.sprint_speed >= 97",
      "pred_sql": "SELECT T3.`player_name`, \n       (strftime('%Y', 'now') - strftime('%Y', T3.`birthday`)) - \n       (strftime('%m-%d', 'now') < strftime('%m-%d', T3.`birthday`)) AS age\nFROM Player AS T3\nINNER JOIN (\n    SELECT DISTINCT T1.`player_api_id`\n    FROM Player_Attributes AS T1\n    INNER JOIN Match AS T2\n    ON T1.`player_api_id` IN (\n        T2.`home_player_1`, T2.`home_player_2`, T2.`home_player_3`, T2.`home_player_4`, T2.`home_player_5`,\n        T2.`home_player_6`, T2.`home_player_7`, T2.`home_player_8`, T2.`home_player_9`, T2.`home_player_10`, T2.`home_player_11`,\n        T2.`away_player_1`, T2.`away_player_2`, T2.`away_player_3`, T2.`away_player_4`, T2.`away_player_5`,\n        T2.`away_player_6`, T2.`away_player_7`, T2.`away_player_8`, T2.`away_player_9`, T2.`away_player_10`, T2.`away_player_11`\n    )\n    WHERE T1.`sprint_speed` >= 97\n    AND strftime('%Y', T2.`date`) BETWEEN '2013' AND '2015'\n) AS eligible_players\nON T3.`player_api_id` = eligible_players.`player_api_id`",
      "execution_time": 59.330334,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.11260795593261719,
      "pred_time": 2.095979928970337
    },
    {
      "db_id": "superhero",
      "question": "Calculate the average height for all superhero.",
      "evidence": "average = DIVIDE(SUM(height_cm), COUNT(all heros));",
      "gold_sql": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero",
      "pred_sql": "SELECT AVG(`height_cm`) \n  FROM superhero\n  WHERE `height_cm` IS NOT NULL",
      "execution_time": 15.548117,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "codebase_community",
      "question": "How many users are awarded with more than 5 badges?",
      "evidence": "more than 5 badges refers to Count (Name) > 5; user refers to UserId",
      "gold_sql": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
      "pred_sql": "SELECT COUNT(DISTINCT `UserId`) AS user_count\n  FROM badges\n  GROUP BY `UserId`\n  HAVING COUNT(`Name`) > 5",
      "execution_time": 24.422095,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.03202986717224121,
      "pred_time": 0.03688979148864746
    },
    {
      "db_id": "formula_1",
      "question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?",
      "evidence": "Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; final rank refers to positionOrder; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';",
      "gold_sql": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008",
      "pred_sql": "SELECT T1.`positionOrder`\n  FROM results AS T1\n  INNER JOIN drivers AS T2 ON T1.`driverId` = T2.`driverId`\n  INNER JOIN races AS T3 ON T1.`raceId` = T3.`raceId`\n  WHERE T2.`forename` = 'Lewis' AND T2.`surname` = 'Hamilton'\n  AND T3.`name` = 'Chinese Grand Prix' AND T3.`year` = 2008",
      "execution_time": 50.780077,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0030024051666259766,
      "pred_time": 0.003002643585205078
    },
    {
      "db_id": "superhero",
      "question": "Provide the heights of the heroes whose eye colours are amber.",
      "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
      "gold_sql": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
      "pred_sql": "SELECT T1.`height_cm`\n  FROM superhero AS T1\n  INNER JOIN colour AS T2\n  ON T1.`eye_colour_id` = T2.`id`\n  WHERE T2.`colour` = 'Amber'",
      "execution_time": 32.676892,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.001001119613647461
    },
    {
      "db_id": "european_football_2",
      "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
      "evidence": "The larger the birthday value, the younger the person is, and vice versa;",
      "gold_sql": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
      "pred_sql": "SELECT \n  (SELECT `birthday` FROM Player WHERE `player_name` = 'Aaron Lennon') AS aaron_birthday,\n  (SELECT `birthday` FROM Player WHERE `player_name` = 'Abdelaziz Barrada') AS abdelaziz_birthday,\n  CASE \n    WHEN (SELECT `birthday` FROM Player WHERE `player_name` = 'Aaron Lennon') < \n         (SELECT `birthday` FROM Player WHERE `player_name` = 'Abdelaziz Barrada') THEN 'Aaron Lennon is older'\n    ELSE 'Abdelaziz Barrada is older'\n  END AS comparison_result",
      "execution_time": 54.50326,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.002001523971557617,
      "pred_time": 0.0
    },
    {
      "db_id": "california_schools",
      "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
      "evidence": "Postal street and mailing street are synonyms.",
      "gold_sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
      "pred_sql": "SELECT T2.`Street`, T1.`sname`\nFROM satscores AS T1\nINNER JOIN schools AS T2 ON T1.`cds` = T2.`CDSCode`\nWHERE T1.`AvgScrMath` IS NOT NULL\n  AND T2.`Street` IS NOT NULL\n  AND T1.`sname` IS NOT NULL\nORDER BY T1.`AvgScrMath` DESC\nLIMIT 1 OFFSET 6",
      "execution_time": 95.502344,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.001001596450805664,
      "pred_time": 0.003002643585205078
    }
  ]
}