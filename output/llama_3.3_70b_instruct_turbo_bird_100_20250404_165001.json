{
  "metadata": {
    "timestamp": "2025-04-04T17:17:17.601204",
    "num_samples": 100,
    "execution_accuracy": 0.54,
    "avg_gold_time": 0.05235041756378977,
    "avg_pred_time": 0.15948374170652577,
    "model": "meta-llama/Llama-3.3-70B-Instruct-Turbo",
    "dataset": "BIRD",
    "metrics": {
      "exact_match": 0.12
    }
  },
  "results": [
    {
      "db_id": "student_club",
      "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
      "evidence": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
      "gold_sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
      "pred_sql": "SELECT T3.`first_name`, T3.`last_name`\n  FROM budget AS T1\n  INNER JOIN event AS T2\n  ON T1.`link_to_event` = T2.`event_id`\n  INNER JOIN expense AS T4\n  ON T1.`budget_id` = T4.`link_to_budget`\n  INNER JOIN member AS T3\n  ON T4.`link_to_member` = T3.`member_id`\n  WHERE T2.`event_name` = 'Yearly Kickoff'\n  AND T4.`approved` = 'true'",
      "execution_time": 13.111172,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "toxicology",
      "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
      "evidence": "atoms from 21 to 25 refers to SUBSTR(atom_id, 7, 2) between '21' and '25'; label = '+' mean molecules are carcinogenic",
      "gold_sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'",
      "pred_sql": "SELECT T2.molecule_id, T2.label\nFROM (\n  SELECT DISTINCT T1.molecule_id\n  FROM atom AS T1\n  WHERE T1.atom_id IN (\n    SELECT atom_id\n    FROM atom\n    WHERE SUBSTR(atom_id, 7, 2) BETWEEN '21' AND '25'\n  )\n) AS T1\nINNER JOIN molecule AS T2\nON T1.molecule_id = T2.molecule_id\nWHERE T2.label = '+';",
      "execution_time": 7.254782,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0020020008087158203,
      "pred_time": 0.0010008811950683594
    },
    {
      "db_id": "card_games",
      "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
      "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
      "gold_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
      "pred_sql": "SELECT T1.name\n  FROM cards AS T1\n  INNER JOIN foreign_data AS T2\n  ON T1.uuid = T2.uuid\n  WHERE T1.originalType = 'Artifact'\n  AND T1.colors = 'B'\n  AND T2.language IS NOT NULL",
      "execution_time": 13.920881,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.2552323341369629,
      "pred_time": 0.2432239055633545
    },
    {
      "db_id": "toxicology",
      "question": "Which type of label is the most numerous in atoms with hydrogen?",
      "evidence": "with hydrogen refers to element = 'h'; label most numerous in atoms refers to MAX(COUNT(label)); ",
      "gold_sql": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t",
      "pred_sql": "SELECT `label`\nFROM (\n  SELECT T2.`label`, COUNT(T2.`label`) as count\n  FROM atom AS T1\n  INNER JOIN molecule AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T1.`element` = 'h'\n  GROUP BY T2.`label`\n) AS subquery\nWHERE count = (\n  SELECT MAX(count)\n  FROM (\n    SELECT T2.`label`, COUNT(T2.`label`) as count\n    FROM atom AS T1\n    INNER JOIN molecule AS T2\n    ON T1.`molecule_id` = T2.`molecule_id`\n    WHERE T1.`element` = 'h'\n    GROUP BY T2.`label`\n  ) AS subquery\n)",
      "execution_time": 6.030073,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0020012855529785156,
      "pred_time": 0.0020036697387695312
    },
    {
      "db_id": "formula_1",
      "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
      "evidence": "in September 2005 refers to MONTH(date) = 9 and YEAR(date) = 2005",
      "gold_sql": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'",
      "pred_sql": "SELECT T1.`name` AS race_name, T2.`name` AS circuit_name, T2.`location` AS circuit_location\nFROM races AS T1\nINNER JOIN circuits AS T2\nON T1.`circuitId` = T2.`circuitId`\nWHERE STRFTIME('%Y', T1.`date`) = '2005' AND STRFTIME('%m', T1.`date`) = '09'",
      "execution_time": 10.518317,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "student_club",
      "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
      "evidence": "The first 4 strings of the event_date values in the event table can represent year; The difference of the total amount spent = SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)",
      "gold_sql": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
      "pred_sql": "SELECT \n  (SELECT SUM(T2.spent)\n   FROM event AS T1\n   INNER JOIN budget AS T2\n   ON T1.event_id = T2.link_to_event\n   WHERE STRFTIME('%Y', T1.event_date) = '2019') -\n  (SELECT SUM(T2.spent)\n   FROM event AS T1\n   INNER JOIN budget AS T2\n   ON T1.event_id = T2.link_to_event\n   WHERE STRFTIME('%Y', T1.event_date) = '2020') AS difference",
      "execution_time": 10.181804,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010001659393310547,
      "pred_time": 0.0
    },
    {
      "db_id": "superhero",
      "question": "What is the total number of superheroes without full name?",
      "evidence": "superheroes without full name refers to full_name IS NULL",
      "gold_sql": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
      "pred_sql": "SELECT COUNT(*)\n  FROM superhero\n  WHERE full_name IS NULL",
      "execution_time": 10.202319,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "card_games",
      "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
      "evidence": "in French refers to language = 'French'; black border color refers to borderColor = 'black'",
      "gold_sql": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
      "pred_sql": "SELECT T1.name\n  FROM foreign_data AS T1\n  INNER JOIN cards AS T2\n  ON T1.uuid = T2.uuid\n  WHERE T1.language = 'French'\n  AND T2.type LIKE '%Creature%'\n  AND T2.layout = 'normal'\n  AND T2.borderColor = 'black'\n  LIMIT 1",
      "execution_time": 14.776609,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.13011932373046875,
      "pred_time": 0.0
    },
    {
      "db_id": "card_games",
      "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?",
      "evidence": "Italian translation refers to language = 'Italian'; have a translation means translation is not null; base set number of under 100 refers to baseSetSize < 10",
      "gold_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 100 AND T2.language = 'Italian'",
      "pred_sql": "SELECT COUNT(*)\n  FROM sets\n  WHERE `code` IN (\n    SELECT `setCode`\n      FROM set_translations\n      WHERE `language` = 'Italian'\n      AND `translation` IS NOT NULL\n  )\n  AND `baseSetSize` < 10",
      "execution_time": 15.132855,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010008811950683594,
      "pred_time": 0.0
    },
    {
      "db_id": "card_games",
      "question": "What is the language of the card with the multiverse number 149934?",
      "evidence": "multiverse number 149934 refers to multiverseid = 149934;",
      "gold_sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
      "pred_sql": "SELECT `language`\n  FROM foreign_data\n  WHERE `multiverseid` = 149934",
      "execution_time": 14.539618,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.05805253982543945,
      "pred_time": 0.0570523738861084
    },
    {
      "db_id": "student_club",
      "question": "How many cities are there in Orange County, Virginia?",
      "evidence": "Orange County is the county name, Virginia is the state name",
      "gold_sql": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
      "pred_sql": "SELECT COUNT(DISTINCT `city`)\n  FROM zip_code\n  WHERE `county` = 'Orange County' AND `state` = 'Virginia'",
      "execution_time": 8.860029,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.004003286361694336,
      "pred_time": 0.0030031204223632812
    },
    {
      "db_id": "codebase_community",
      "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
      "evidence": "user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))",
      "gold_sql": "SELECT CAST(COUNT(DISTINCT T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
      "pred_sql": "SELECT \n  CASE \n    WHEN (SELECT COUNT(Id) FROM votes WHERE UserId = 24) = 0 THEN NULL\n    ELSE (SELECT COUNT(Id) FROM posts WHERE OwnerUserId = 24) / \n         (SELECT COUNT(Id) FROM votes WHERE UserId = 24)\n  END AS times",
      "execution_time": 17.695253,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.08807921409606934,
      "pred_time": 0.08707952499389648
    },
    {
      "db_id": "european_football_2",
      "question": "List the long name of teams with above-average build-up play passing in 2012.",
      "evidence": "long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = buildUpPlayPassing > DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL); in 2012 refers to strftime('%Y', date) = '2012'; ",
      "gold_sql": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.`date`) = '2012')",
      "pred_sql": "SELECT T1.team_long_name\nFROM Team AS T1\nINNER JOIN Team_Attributes AS T2\nON T1.team_api_id = T2.team_api_id\nWHERE strftime('%Y', T2.date) = '2012' AND T2.buildUpPlayPassing > (\n  SELECT AVG(buildUpPlayPassing)\n  FROM Team_Attributes\n  WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL\n);",
      "execution_time": 46.563637,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.002002239227294922,
      "pred_time": 0.0010006427764892578
    },
    {
      "db_id": "california_schools",
      "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
      "evidence": "Elementary School District refers to DOC = 52; Monthly average number of schools that opened in 1980 = count(schools that opened in 1980) / 12",
      "gold_sql": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
      "pred_sql": "SELECT AVG(count)\nFROM (\n  SELECT STRFTIME('%m', OpenDate) AS month, COUNT(*) AS count\n  FROM schools\n  WHERE County = 'Alameda'\n  AND StatusType = 'Active'\n  AND DOC = '52'\n  AND OpenDate LIKE '1980-%'\n  GROUP BY STRFTIME('%m', OpenDate)\n) AS monthly_counts",
      "execution_time": 9.678343,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.008006572723388672,
      "pred_time": 0.00600433349609375
    },
    {
      "db_id": "card_games",
      "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
      "evidence": "set of cards with \"Ancestor''s Chosen\" in it refers to name = 'Ancestor''s Chosen'; Korean version refers to language = 'Korean'",
      "gold_sql": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
      "pred_sql": "SELECT CASE\n    WHEN EXISTS (\n        SELECT 1\n        FROM cards AS T1\n        INNER JOIN foreign_data AS T2\n        ON T1.`uuid` = T2.`uuid`\n        WHERE T1.`name` = 'Ancestor''s Chosen'\n        AND T2.`language` = 'Korean'\n    ) THEN 'Yes'\n    ELSE 'No'\nEND AS Korean_Version_Exists",
      "execution_time": 15.177151,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.047043800354003906,
      "pred_time": 0.10009121894836426
    },
    {
      "db_id": "codebase_community",
      "question": "Which post by slashnick has the most answers count? State the post ID.",
      "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
      "gold_sql": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
      "pred_sql": "-- Script type: SQLite\nSELECT T1.`Id`\n  FROM posts AS T1\n  INNER JOIN users AS T2\n  ON T1.`OwnerUserId` = T2.`Id`\n  WHERE T2.`DisplayName` = 'slashnick'\n  AND T1.`AnswerCount` = (\n    SELECT MAX(T1.`AnswerCount`)\n    FROM posts AS T1\n    INNER JOIN users AS T2\n    ON T1.`OwnerUserId` = T2.`Id`\n    WHERE T2.`DisplayName` = 'slashnick'\n  )",
      "execution_time": 24.456071,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.2672426700592041,
      "pred_time": 0.21919989585876465
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
      "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
      "gold_sql": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
      "pred_sql": "-- SQL type: SQLite\n-- To get the date of the medical laboratory work and the age of the patient when they initially arrived\nSELECT L.Date, \n       strftime('%Y', P.`First Date`) - strftime('%Y', P.Birthday) AS Age\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.Diagnosis = 'SJS'\nORDER BY P.Birthday ASC\nLIMIT 1",
      "execution_time": 13.697409,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "card_games",
      "question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?",
      "evidence": "\"Serra Angel\" refers to name = 'Serra Angel'; \"Shrine Keeper\" refers to name = 'Shrine Keeper'; card costs more converted mana when the value of convertedManaCost is greater",
      "gold_sql": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
      "pred_sql": "SELECT \n  CASE \n    WHEN (SELECT `convertedManaCost` FROM cards WHERE `name` = 'Serra Angel') IS NULL \n    THEN 'Serra Angel not found or has no converted mana cost'\n    WHEN (SELECT `convertedManaCost` FROM cards WHERE `name` = 'Shrine Keeper') IS NULL \n    THEN 'Shrine Keeper not found or has no converted mana cost'\n    WHEN (SELECT `convertedManaCost` FROM cards WHERE `name` = 'Serra Angel') > \n         (SELECT `convertedManaCost` FROM cards WHERE `name` = 'Shrine Keeper') \n    THEN 'Serra Angel'\n    WHEN (SELECT `convertedManaCost` FROM cards WHERE `name` = 'Serra Angel') < \n         (SELECT `convertedManaCost` FROM cards WHERE `name` = 'Shrine Keeper') \n    THEN 'Shrine Keeper'\n    ELSE 'Both cards have the same converted mana cost'\n  END AS result",
      "execution_time": 18.494881,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0470428466796875,
      "pred_time": 0.009008646011352539
    },
    {
      "db_id": "formula_1",
      "question": "What's the location coordinates of Silverstone Circuit?",
      "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
      "gold_sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
      "pred_sql": "SELECT `lat`, `lng`\nFROM circuits\nWHERE `name` = 'Silverstone Circuit'",
      "execution_time": 9.311095,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
      "evidence": "patient's diagnosis refers to Diagnosis; lower red blood cell refers to RBC < 3.5; age = SUBTRACT(year(current_timestamp), year(Birthday)); ",
      "gold_sql": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
      "pred_sql": "SELECT T1.`ID`, T1.`Diagnosis`, \n       (strftime('%J', 'now') - strftime('%J', T1.`Birthday`)) / 365 AS Age\nFROM Patient AS T1\nINNER JOIN Laboratory AS T2\nON T1.`ID` = T2.`ID`\nWHERE T2.`RBC` < 3.5",
      "execution_time": 11.231779,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0030019283294677734,
      "pred_time": 0.0030028820037841797
    },
    {
      "db_id": "toxicology",
      "question": "What is the percentage of carbon in double-bond molecules?",
      "evidence": "carbon refers to element = 'c'; double-bond molecules refers to bond_type = '='; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))",
      "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
      "pred_sql": "SELECT \n  (CAST(\n    (SELECT COUNT(T1.atom_id)\n     FROM atom AS T1\n     WHERE T1.molecule_id IN (\n       SELECT DISTINCT molecule_id\n       FROM bond\n       WHERE bond_type = '='\n     )\n     AND T1.element = 'c') AS REAL\n  ) / \n  (SELECT COUNT(T1.atom_id)\n   FROM atom AS T1\n   WHERE T1.molecule_id IN (\n     SELECT DISTINCT molecule_id\n     FROM bond\n     WHERE bond_type = '='\n   ))\n  ) * 100 AS carbon_percentage",
      "execution_time": 6.877904,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.020016908645629883,
      "pred_time": 0.004004478454589844
    },
    {
      "db_id": "card_games",
      "question": "What are the cards belong to duel deck a? List the ID.",
      "evidence": "duel deck a refers to duelDeck = a;",
      "gold_sql": "SELECT id FROM cards WHERE duelDeck = 'a'",
      "pred_sql": "SELECT `id`\n  FROM cards\n  WHERE `duelDeck` = 'a'",
      "execution_time": 13.962206,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.04303932189941406,
      "pred_time": 0.04203915596008301
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
      "evidence": "LDH beyond normal range refers to LDH > '500';",
      "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
      "pred_sql": "SELECT T1.`ID`, T1.`SEX`, T1.`Birthday`\nFROM Patient AS T1\nINNER JOIN Laboratory AS T2\nON T1.`ID` = T2.`ID`\nWHERE T2.`LDH` > 500",
      "execution_time": 8.341956,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.003001689910888672,
      "pred_time": 0.0010020732879638672
    },
    {
      "db_id": "superhero",
      "question": "State all of 3-D Man's attributes along with their values.",
      "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
      "gold_sql": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
      "pred_sql": "SELECT T2.`attribute_name`, T1.`attribute_value`\n  FROM hero_attribute AS T1\n  INNER JOIN attribute AS T2\n  ON T1.`attribute_id` = T2.`id`\n  WHERE T1.`hero_id` = (\n    SELECT `id`\n    FROM superhero\n    WHERE `superhero_name` = '3-D Man'\n  )",
      "execution_time": 9.593632,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
      "evidence": "reference name refers to driverRef; Canadian Grand Prix refers to races.name = 'Canadian Grand Prix';",
      "gold_sql": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007",
      "pred_sql": "SELECT T1.`driverRef`\n  FROM drivers AS T1\n  INNER JOIN results AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE T2.`raceId` = (\n    SELECT T3.`raceId`\n      FROM races AS T3\n      WHERE T3.`name` = 'Canadian Grand Prix'\n      AND T3.`year` = 2007\n  )\n  AND T2.`position` = 1",
      "execution_time": 13.885753,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.002001523971557617,
      "pred_time": 0.0010013580322265625
    },
    {
      "db_id": "financial",
      "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
      "evidence": "Operation = 'VYBER KARTOU' refers to credit card withdrawal",
      "gold_sql": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')",
      "pred_sql": "SELECT DISTINCT T4.`client_id`\nFROM trans AS T1\nINNER JOIN account AS T2\nON T1.`account_id` = T2.`account_id`\nINNER JOIN disp AS T3\nON T2.`account_id` = T3.`account_id`\nINNER JOIN client AS T4\nON T3.`client_id` = T4.`client_id`\nWHERE T1.`operation` = 'VYBER KARTOU'\nAND STRFTIME('%Y', T1.`date`) = '1998'\nAND T1.`amount` < (\n  SELECT AVG(`amount`)\n  FROM trans\n  WHERE `operation` = 'VYBER KARTOU'\n  AND STRFTIME('%Y', `date`) = '1998'\n);",
      "execution_time": 79.921097,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.5264801979064941,
      "pred_time": 8.535798788070679
    },
    {
      "db_id": "card_games",
      "question": "What is the border color of card \"Ancestor's Chosen\"?",
      "evidence": "name of card  = 'Ancestor''s Chosen' ;",
      "gold_sql": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
      "pred_sql": "SELECT `borderColor`\n  FROM cards\n  WHERE `name` = 'Ancestor''s Chosen'",
      "execution_time": 16.986752,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0470428466796875,
      "pred_time": 0.05505013465881348
    },
    {
      "db_id": "formula_1",
      "question": "How many circuits are there in Adelaide, Australia?",
      "evidence": "Australia is the country; Melbourne is the location of circuit;",
      "gold_sql": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
      "pred_sql": "SELECT COUNT(`circuitId`)\nFROM circuits\nWHERE `location` = 'Adelaide' AND `country` = 'Australia'",
      "execution_time": 13.395232,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0010001659393310547
    },
    {
      "db_id": "formula_1",
      "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
      "evidence": "the time of the champion shows in the format of \"minutes: seconds.millionsecond\" in which Max(time); constructor reference name refers to constructorRef; website refers to url",
      "gold_sql": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
      "pred_sql": "SELECT T1.`constructorRef`, T1.`url`\n  FROM constructors AS T1\n  INNER JOIN results AS T2\n  ON T1.`constructorId` = T2.`constructorId`\n  INNER JOIN races AS T3\n  ON T2.`raceId` = T3.`raceId`\n  WHERE T3.`name` = 'Singapore Grand Prix' AND T3.`year` = 2009 AND T2.`position` = '1'",
      "execution_time": 12.926498,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0020017623901367188,
      "pred_time": 0.001001119613647461
    },
    {
      "db_id": "toxicology",
      "question": "Is the molecule with the most double bonds carcinogenic?",
      "evidence": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic",
      "gold_sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id",
      "pred_sql": "SELECT T2.`label`\nFROM (\n  SELECT T1.`molecule_id`, T1.`double_bond_count`\n  FROM (\n    SELECT T1.`molecule_id`, COUNT(T1.`bond_id`) AS double_bond_count\n    FROM bond AS T1\n    WHERE T1.`bond_type` = '='\n    GROUP BY T1.`molecule_id`\n  ) AS T1\n  ORDER BY T1.`double_bond_count` DESC\n  LIMIT 1\n) AS T1\nINNER JOIN molecule AS T2\nON T1.`molecule_id` = T2.`molecule_id`",
      "execution_time": 6.729896,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010018348693847656,
      "pred_time": 0.001001119613647461
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
      "evidence": "'SLE' diagnosed patient means Diagnosis = 'SLE'; inpatient refers to Admission = '+'; outpatient refers to Admission = '-'; calculation =  DIVIDE(COUNT(ID) where Diagnosis = 'SLE' and Admission = '+', COUNT(ID) where Diagnosis = 'SLE' and Admission = '-')",
      "gold_sql": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'",
      "pred_sql": "SELECT \n  SUM(CASE WHEN `Admission` = '+' THEN 1 ELSE 0 END) / \n  SUM(CASE WHEN `Admission` = '-' THEN 1 ELSE 0 END) AS ratio\nFROM Patient\nWHERE `Diagnosis` = 'SLE'",
      "execution_time": 10.851543,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "student_club",
      "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
      "evidence": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
      "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
      "pred_sql": "SELECT e.event_id, e.event_name, b.spent, b.amount, b.spent / b.amount AS spend_to_budget_ratio\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.status = 'Closed'\nORDER BY b.spent / b.amount DESC\nLIMIT 1;",
      "execution_time": 9.0517,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "european_football_2",
      "question": "Please provide the full name of the away team that scored the most goals.",
      "evidence": "full name refers to team_long_name; away team refers to away_team_api_id; scored the most goals refers to MAX(away_team_goal)",
      "gold_sql": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1",
      "pred_sql": "SELECT T2.team_long_name\nFROM (\n  SELECT away_team_api_id, away_team_goal,\n  ROW_NUMBER() OVER (ORDER BY away_team_goal DESC) as row_num\n  FROM Match\n) AS T1\nINNER JOIN Team AS T2\nON T1.away_team_api_id = T2.team_api_id\nWHERE T1.row_num = 1",
      "execution_time": 36.340766,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.052047014236450195,
      "pred_time": 0.059053659439086914
    },
    {
      "db_id": "toxicology",
      "question": "What is the most common bond type?",
      "evidence": "most common bond type refers MAX(COUNT(bond_type))",
      "gold_sql": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
      "pred_sql": "SELECT `bond_type`\n  FROM (\n    SELECT `bond_type`, COUNT(`bond_type`) AS count\n      FROM bond\n      GROUP BY `bond_type`\n  ) AS T\n  WHERE T.count = (\n    SELECT MAX(count)\n      FROM (\n        SELECT `bond_type`, COUNT(`bond_type`) AS count\n          FROM bond\n          GROUP BY `bond_type`\n      ) AS T2\n  )",
      "execution_time": 6.328855,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.002002239227294922,
      "pred_time": 0.0030031204223632812
    },
    {
      "db_id": "california_schools",
      "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
      "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
      "gold_sql": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
      "pred_sql": "SELECT T2.`School`, T2.`DOCType`\nFROM frpm AS T1\nINNER JOIN schools AS T2\nON T1.`CDSCode` = T2.`CDSCode`\nWHERE T2.`FundingType` = 'Locally funded'\nAND T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)` > (\n  SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`)\n  FROM frpm AS T3\n  INNER JOIN schools AS T4\n  ON T3.`CDSCode` = T4.`CDSCode`\n  WHERE T4.`FundingType` = 'Locally funded'\n)",
      "execution_time": 11.19488,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.015013933181762695,
      "pred_time": 0.014012336730957031
    },
    {
      "db_id": "card_games",
      "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
      "evidence": "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;",
      "gold_sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
      "pred_sql": "SELECT CASE\n    WHEN T2.`isForeignOnly` = 1 THEN 'Yes'\n    ELSE 'No'\nEND AS answer\nFROM cards AS T1\nINNER JOIN sets AS T2\nON T1.`setCode` = T2.`code`\nWHERE T1.`name` = 'Adarkar Valkyrie'",
      "execution_time": 17.845331,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0470433235168457,
      "pred_time": 0.04704165458679199
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
      "evidence": "ALT glutamic pylvic transaminase beyond the normal range refers to GPT > 60; The larger the birthday value, the younger the person is, and vice versa; ",
      "gold_sql": "SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC",
      "pred_sql": "SELECT T2.`Diagnosis`\nFROM Laboratory AS T1\nINNER JOIN Patient AS T2\nON T1.`ID` = T2.`ID`\nWHERE T1.`GPT` > 60\nAND T2.`Birthday` IS NOT NULL\nORDER BY T2.`Birthday` ASC",
      "execution_time": 12.15086,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.003002166748046875,
      "pred_time": 0.0010018348693847656
    },
    {
      "db_id": "toxicology",
      "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
      "evidence": "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'; Should consider the distinct atoms when counting;",
      "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
      "pred_sql": "SELECT 100 - (\n  SELECT CAST(COUNT(DISTINCT T1.molecule_id) AS REAL) * 100\n  / (SELECT COUNT(molecule_id) FROM molecule WHERE label = '+')\n  FROM molecule AS T1\n  INNER JOIN atom AS T2\n  ON T1.molecule_id = T2.molecule_id\n  WHERE T1.label = '+'\n  AND T2.element = 'f'\n) AS percentage",
      "execution_time": 8.960632,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.002002239227294922,
      "pred_time": 0.001001596450805664
    },
    {
      "db_id": "codebase_community",
      "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
      "evidence": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';",
      "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
      "pred_sql": "SELECT COUNT(DISTINCT T1.Id)\n  FROM users AS T1\n  INNER JOIN posts AS T2\n  ON T1.Id = T2.OwnerUserId\n  WHERE T1.Location = 'United Kingdom'\n  AND T2.FavoriteCount >= 4",
      "execution_time": 18.945887,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.084075927734375,
      "pred_time": 0.0840761661529541
    },
    {
      "db_id": "formula_1",
      "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
      "evidence": "Paul di Resta refers to the full name of the driver; Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'; race number refers to raceId; percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))",
      "gold_sql": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
      "pred_sql": "SELECT \n  ((T1.fastestLapSpeed - T2.fastestLapSpeed) / T1.fastestLapSpeed) * 100\nFROM \n  (SELECT T1.fastestLapSpeed\n   FROM results AS T1\n   INNER JOIN drivers AS T2\n   ON T1.driverId = T2.driverId\n   WHERE T1.raceId = 853 AND T2.forename = 'Paul' AND T2.surname = 'di Resta') AS T1,\n  (SELECT T1.fastestLapSpeed\n   FROM results AS T1\n   INNER JOIN drivers AS T2\n   ON T1.driverId = T2.driverId\n   WHERE T1.raceId = 854 AND T2.forename = 'Paul' AND T2.surname = 'di Resta') AS T2;",
      "execution_time": 11.907821,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.004004240036010742,
      "pred_time": 0.0020020008087158203
    },
    {
      "db_id": "european_football_2",
      "question": "Please name one player whose overall strength is the greatest.",
      "evidence": "overall strength is the greatest refers to MAX(overall_rating)",
      "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)",
      "pred_sql": "SELECT T1.`player_name`\nFROM Player AS T1\nINNER JOIN Player_Attributes AS T2\nON T1.`player_api_id` = T2.`player_api_id`\nWHERE T2.`overall_rating` = (\n  SELECT MAX(`overall_rating`)\n  FROM Player_Attributes\n)",
      "execution_time": 45.363762,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.09708881378173828,
      "pred_time": 0.09708881378173828
    },
    {
      "db_id": "superhero",
      "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
      "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'; a height of over 200cm refers to height_cm > 200",
      "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
      "pred_sql": "SELECT COUNT(*)\nFROM superhero\nWHERE id IN (\n  SELECT hero_id\n  FROM hero_power\n  WHERE power_id = (\n    SELECT id\n    FROM superpower\n    WHERE power_name = 'Super Strength'\n  )\n)\nAND height_cm > 200;",
      "execution_time": 11.924704,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "debit_card_specializing",
      "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
      "evidence": "June 2013 refers to '201306'; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month;",
      "gold_sql": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
      "pred_sql": "SELECT DISTINCT T1.`Country`\nFROM gasstations AS T1\nINNER JOIN transactions_1k AS T2\nON T1.`GasStationID` = T2.`GasStationID`\nINNER JOIN yearmonth AS T3\nON T2.`CustomerID` = T3.`CustomerID`\nWHERE T3.`Date` LIKE '201306%'",
      "execution_time": 7.642549,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.36834716796875,
      "pred_time": 0.03303098678588867
    },
    {
      "db_id": "debit_card_specializing",
      "question": "In February 2012, what percentage of customers consumed more than 528.3?",
      "evidence": "February 2012 refers to '201202' in yearmonth.date; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
      "gold_sql": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'",
      "pred_sql": "SELECT \n    (SELECT COUNT(CustomerID)\n     FROM yearmonth\n     WHERE Date = '201202' AND Consumption > 528.3) * 100.0 /\n    (SELECT COUNT(DISTINCT CustomerID)\n     FROM yearmonth\n     WHERE Date = '201202');",
      "execution_time": 6.594803,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.013011932373046875,
      "pred_time": 0.014011621475219727
    },
    {
      "db_id": "student_club",
      "question": "Which department was the President of the club in?",
      "evidence": "'President' is a position of Student Club",
      "gold_sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
      "pred_sql": "SELECT T2.department\nFROM member AS T1\nINNER JOIN major AS T2\nON T1.link_to_major = T2.major_id\nWHERE T1.position = 'President'",
      "execution_time": 10.662702,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "debit_card_specializing",
      "question": "Which year recorded the most consumption of gas paid in CZK?",
      "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year.",
      "gold_sql": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
      "pred_sql": "SELECT Year, SUM(Consumption) AS TotalConsumption\nFROM (\n  SELECT SUBSTR(T1.Date, 1, 4) AS Year, T1.Consumption\n  FROM yearmonth AS T1\n  INNER JOIN customers AS T2\n  ON T1.CustomerID = T2.CustomerID\n  WHERE T2.Currency = 'CZK'\n) AS T\nGROUP BY Year\nORDER BY TotalConsumption DESC\nLIMIT 1",
      "execution_time": 7.526026,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.14713406562805176,
      "pred_time": 0.1461334228515625
    },
    {
      "db_id": "toxicology",
      "question": "What is the average number of bonds the atoms with the element iodine have?",
      "evidence": "atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'",
      "gold_sql": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
      "pred_sql": "SELECT AVG(bond_count) AS average_bonds\nFROM (\n  SELECT T1.`atom_id`, COUNT(T3.`bond_id`) AS bond_count\n  FROM atom AS T1\n  INNER JOIN connected AS T2\n  ON T1.`atom_id` = T2.`atom_id`\n  INNER JOIN bond AS T3\n  ON T2.`bond_id` = T3.`bond_id`\n  WHERE T1.`element` = 'i'\n  GROUP BY T1.`atom_id`\n) AS subquery",
      "execution_time": 7.636874,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0010013580322265625
    },
    {
      "db_id": "formula_1",
      "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
      "evidence": "rank the highest refers to min(rank); Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
      "gold_sql": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
      "pred_sql": "SELECT T3.`name`\nFROM (\n  SELECT T1.`raceId`, T1.`position` AS rank\n  FROM results AS T1\n  INNER JOIN drivers AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE T2.`forename` = 'Lewis' AND T2.`surname` = 'Hamilton'\n) AS T1\nINNER JOIN races AS T3\nON T1.`raceId` = T3.`raceId`\nWHERE T1.`rank` = (\n  SELECT MIN(T1.`position`)\n  FROM results AS T1\n  INNER JOIN drivers AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE T2.`forename` = 'Lewis' AND T2.`surname` = 'Hamilton'\n)",
      "execution_time": 11.933802,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0020017623901367188,
      "pred_time": 0.012010574340820312
    },
    {
      "db_id": "card_games",
      "question": "What percentage of cards with format commander and legal status do not have a content warning?",
      "evidence": "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';",
      "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
      "pred_sql": "SELECT \n  (CAST(\n    SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) \n    AS REAL) \n  / \n    COUNT(T1.id)\n  ) * 100\n  AS percentage\nFROM cards AS T1\nINNER JOIN legalities AS T2\nON T1.uuid = T2.uuid\nWHERE T2.format = 'commander'\nAND T2.status = 'Legal'",
      "execution_time": 16.274003,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.2181994915008545,
      "pred_time": 0.21419429779052734
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
      "evidence": "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400; ",
      "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'",
      "pred_sql": "SELECT DISTINCT T1.`ID`, T1.`SEX`, T1.`Birthday`\nFROM Patient AS T1\nINNER JOIN Laboratory AS T2\nON T1.`ID` = T2.`ID`\nWHERE STRFTIME('%Y', T2.`Date`) = '1984'\nAND (1984 - STRFTIME('%Y', T1.`Birthday`)) < 50\nAND T2.`PLT` BETWEEN 100 AND 400",
      "execution_time": 10.442544,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.005004167556762695,
      "pred_time": 0.0030019283294677734
    },
    {
      "db_id": "debit_card_specializing",
      "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
      "evidence": "",
      "gold_sql": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
      "pred_sql": "SELECT DISTINCT T2.Time\n  FROM gasstations AS T1\n  INNER JOIN transactions_1k AS T2\n  ON T1.GasStationID = T2.GasStationID\n  WHERE T1.ChainID = 11",
      "execution_time": 15.062749,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "superhero",
      "question": "How many green-skinned villains are there in the superhero universe?",
      "evidence": "green-skinned refers to colour.colour = 'Green' WHERE skin_colour_id = colour.id; villains refers to alignment = 'Bad';",
      "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'",
      "pred_sql": "SELECT COUNT(T1.`id`)\n  FROM superhero AS T1\n  INNER JOIN alignment AS T2\n  ON T1.`alignment_id` = T2.`id`\n  INNER JOIN colour AS T3\n  ON T1.`skin_colour_id` = T3.`id`\n  WHERE T2.`alignment` = 'Bad'\n  AND T3.`colour` = 'Green'",
      "execution_time": 9.609768,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "For the driver who set the fastest lap speed, what is his nationality?",
      "evidence": "the fastest lap speed refers to (MAX) fastestLapSpeed;",
      "gold_sql": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
      "pred_sql": "SELECT T1.`nationality`\nFROM drivers AS T1\nINNER JOIN results AS T2\nON T1.`driverId` = T2.`driverId`\nWHERE T2.`fastestLapSpeed` = (\n  SELECT MAX(`fastestLapSpeed`)\n  FROM results\n  WHERE `fastestLapSpeed` IS NOT NULL\n)\nAND T2.`fastestLapSpeed` IS NOT NULL",
      "execution_time": 11.59706,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.004004478454589844,
      "pred_time": 0.0020012855529785156
    },
    {
      "db_id": "student_club",
      "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
      "evidence": "full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'",
      "gold_sql": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
      "pred_sql": "SELECT T2.`first_name`, T2.`last_name`, T1.`cost`\n  FROM `expense` AS T1\n  INNER JOIN `member` AS T2\n  ON T1.`link_to_member` = T2.`member_id`\n  WHERE T1.`expense_description` = 'Water, Veggie tray, supplies'",
      "execution_time": 10.146081,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0010020732879638672,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "State the driver with the most points scored. Find his full name with that points.",
      "evidence": "the most points scored refers to max(points); Full name of the driver refers to drivers.forename and drivers.surname;",
      "gold_sql": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1",
      "pred_sql": "SELECT T1.forename, T1.surname, T2.points\nFROM drivers AS T1\nINNER JOIN driverStandings AS T2\nON T1.driverId = T2.driverId\nWHERE T2.points = (\n  SELECT MAX(points)\n  FROM driverStandings\n);",
      "execution_time": 10.68381,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.005003452301025391,
      "pred_time": 0.0030028820037841797
    },
    {
      "db_id": "superhero",
      "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
      "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
      "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
      "pred_sql": "SELECT T2.`colour`\n  FROM superhero AS T1\n  INNER JOIN colour AS T2\n  ON T1.`eye_colour_id` = T2.`id`\n  WHERE T1.`full_name` = 'Karen Beecher-Duncan'",
      "execution_time": 7.943839,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
      "evidence": "full name refers to forename+surname; Youngest racer = MAX(dob)",
      "gold_sql": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
      "pred_sql": "SELECT T3.name, T1.forename, T1.surname, T1.nationality\nFROM drivers AS T1\nINNER JOIN results AS T2\nON T1.driverId = T2.driverId\nINNER JOIN races AS T3\nON T2.raceId = T3.raceId\nWHERE T1.driverId = (\n  SELECT driverId\n  FROM drivers\n  WHERE dob IS NOT NULL\n  ORDER BY dob DESC\n  LIMIT 1\n)\nORDER BY T3.date ASC\nLIMIT 1",
      "execution_time": 11.983241,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.007004737854003906,
      "pred_time": 0.002002716064453125
    },
    {
      "db_id": "card_games",
      "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
      "evidence": "cards have missing or degraded properties and value refers to hasContentWarning = 1; 'Stephen Daniele' is artist; Find all cards refers to return card id",
      "gold_sql": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'",
      "pred_sql": "SELECT T1.id, T2.text, T1.hasContentWarning\n  FROM cards AS T1\n  INNER JOIN rulings AS T2\n  ON T1.uuid = T2.uuid\n  WHERE T1.artist = 'Stephen Daniele'",
      "execution_time": 15.90873,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.1311190128326416,
      "pred_time": 0.12911701202392578
    },
    {
      "db_id": "superhero",
      "question": "List the heroes' names whose eyes and hair colours are both black.",
      "evidence": "heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';",
      "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'",
      "pred_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN colour AS T2\n  ON T1.`eye_colour_id` = T2.`id`\n  INNER JOIN colour AS T3\n  ON T1.`hair_colour_id` = T3.`id`\n  WHERE T2.`colour` = 'Black'\n  AND T3.`colour` = 'Black'",
      "execution_time": 9.046443,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.001001596450805664
    },
    {
      "db_id": "codebase_community",
      "question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
      "evidence": "tag named sample refers to TagName = 'sample';",
      "gold_sql": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
      "pred_sql": "SELECT ExcerptPostId, WikiPostId\nFROM tags\nWHERE TagName = 'sample'",
      "execution_time": 18.767884,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0009999275207519531
    },
    {
      "db_id": "formula_1",
      "question": "What is the average time in seconds of champion for each year, before year 1975?",
      "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;",
      "gold_sql": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
      "pred_sql": "-- SQL script type: SQLite\nSELECT \n  T1.`year`, \n  AVG(\n    CAST(SUBSTR(T2.`time`, 1, INSTR(T2.`time`, ':') - 1) AS REAL) * 3600 + \n    CAST(SUBSTR(T2.`time`, INSTR(T2.`time`, ':') + 1, INSTR(SUBSTR(T2.`time`, INSTR(T2.`time`, ':') + 1), ':') - 1) AS REAL) * 60 + \n    CAST(SUBSTR(T2.`time`, INSTR(T2.`time`, ':', INSTR(T2.`time`, ':') + 1) + 1, LENGTH(T2.`time`) - INSTR(T2.`time`, ':', INSTR(T2.`time`, ':') + 1) - 1) AS REAL) + \n    CAST(SUBSTR(T2.`time`, INSTR(T2.`time`, '.') + 1) AS REAL) / 1000) AS average_time\nFROM \n  seasons AS T1\n  INNER JOIN races AS T3\n  ON T1.`year` = T3.`year`\n  INNER JOIN results AS T2\n  ON T3.`raceId` = T2.`raceId`\nWHERE \n  T1.`year` < 1975\n  AND T2.`position` = 1\n  AND T2.`time` IS NOT NULL\n  AND T2.`time` NOT LIKE '%+%'\nGROUP BY \n  T1.`year`",
      "execution_time": 29.231215,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0020017623901367188,
      "pred_time": 0
    },
    {
      "db_id": "codebase_community",
      "question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
      "evidence": "calculation = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010 and AnswerCount < = 2), 12)",
      "gold_sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'",
      "pred_sql": "SELECT CAST(COUNT(pl.Id) AS REAL) / 12\nFROM postLinks pl\nJOIN posts p ON pl.PostId = p.Id\nWHERE STRFTIME('%Y', pl.CreationDate) = '2010' AND p.AnswerCount <= 2;",
      "execution_time": 28.292802,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.004004240036010742,
      "pred_time": 0.0030031204223632812
    },
    {
      "db_id": "formula_1",
      "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
      "evidence": "European Grand Prix races refers to races.name = 'European Grand Prix';percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100",
      "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'",
      "pred_sql": "SELECT \n  (SELECT COUNT(*) \n   FROM races \n   INNER JOIN circuits \n   ON races.circuitId = circuits.circuitId \n   WHERE races.name = 'European Grand Prix' AND circuits.country = 'Germany') \n  * 100.0 / \n  (SELECT COUNT(*) \n   FROM races \n   WHERE name = 'European Grand Prix');",
      "execution_time": 11.527347,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "california_schools",
      "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
      "evidence": "Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54.",
      "gold_sql": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
      "pred_sql": "-- SQL script type: SQLite\nSELECT \n  CASE \n    WHEN merged_elementary = 0 THEN NULL \n    ELSE merged_unified / merged_elementary \n  END AS ratio\nFROM \n  (\n    SELECT \n      SUM(CASE WHEN T1.`DOC` = '54' AND T1.`StatusType` = 'Merged' THEN 1 ELSE 0 END) AS merged_unified,\n      SUM(CASE WHEN T1.`DOC` = '52' AND T1.`StatusType` = 'Merged' THEN 1 ELSE 0 END) AS merged_elementary\n    FROM schools AS T1\n    INNER JOIN frpm AS T2\n    ON T1.`CDSCode` = T2.`CDSCode`\n    WHERE T2.`County Name` = 'Orange'\n    AND T1.`CDSCode` IS NOT NULL\n    AND T1.`DOC` IS NOT NULL\n  ) AS subquery",
      "execution_time": 30.029259,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0060040950775146484,
      "pred_time": 0.0030019283294677734
    },
    {
      "db_id": "european_football_2",
      "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
      "evidence": "speed in which attacks are put together refers to buildUpPlaySpeed;highest build up play speed refers to MAX(buildUpPlaySpeed)",
      "gold_sql": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4",
      "pred_sql": "SELECT `team_api_id`, `buildUpPlaySpeed`\nFROM Team_Attributes\nORDER BY `buildUpPlaySpeed` DESC\nLIMIT 4;",
      "execution_time": 35.69936,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010008811950683594,
      "pred_time": 0.0010006427764892578
    },
    {
      "db_id": "formula_1",
      "question": "List out the code for drivers who have nationality in American.",
      "evidence": "nationality = 'American'",
      "gold_sql": "SELECT code FROM drivers WHERE Nationality = 'American'",
      "pred_sql": "SELECT `code`\nFROM drivers\nWHERE `nationality` = 'American' AND `code` IS NOT NULL",
      "execution_time": 9.033771,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010006427764892578,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
      "evidence": "average lap time = AVG(milliseconds); 'Lewis Hamilton' refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; 'Malaysian Grand Prix' refers to races.name = 'Malaysian Grand Prix'",
      "gold_sql": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
      "pred_sql": "SELECT AVG(T1.milliseconds)\nFROM lapTimes AS T1\nINNER JOIN drivers AS T2\nON T1.driverId = T2.driverId\nINNER JOIN races AS T3\nON T1.raceId = T3.raceId\nWHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'\nAND T3.name = 'Malaysian Grand Prix' AND T3.year = 2009;",
      "execution_time": 11.917905,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.032029151916503906,
      "pred_time": 0.031027793884277344
    },
    {
      "db_id": "toxicology",
      "question": "How many bonds which involved atom 12 does molecule TR009 have?",
      "evidence": "TR009 is the molecule id;  involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'",
      "gold_sql": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' OR T2.atom_id2 = T1.molecule_id || '_2'",
      "pred_sql": "SELECT COUNT(DISTINCT c.bond_id)\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE (c.atom_id = 'TR009_12' OR c.atom_id2 = 'TR009_12')\nAND b.molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR009');",
      "execution_time": 8.39471,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0060045719146728516,
      "pred_time": 0.002002716064453125
    },
    {
      "db_id": "student_club",
      "question": "What was Brent Thomason's major?",
      "evidence": "Brent Thomason is the full name; full name refers to first_name, last_name; major refers to major_name",
      "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
      "pred_sql": "SELECT T2.`major_name`\n  FROM member AS T1\n  INNER JOIN major AS T2\n  ON T1.`link_to_major` = T2.`major_id`\n  WHERE T1.`first_name` = 'Brent' AND T1.`last_name` = 'Thomason'",
      "execution_time": 8.114655,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0010013580322265625
    },
    {
      "db_id": "card_games",
      "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
      "evidence": "sets in the block \"Ice Age\" refers to block = 'Ice Age'; Italian translation refers to language = 'Italian' and translation is not null",
      "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL",
      "pred_sql": "SELECT COUNT(DISTINCT T1.`code`)\n  FROM sets AS T1\n  INNER JOIN set_translations AS T2\n  ON T1.`code` = T2.`setCode`\n  WHERE T1.`block` = 'Ice Age'\n  AND T2.`language` = 'Italian'\n  AND T2.`translation` IS NOT NULL",
      "execution_time": 16.986922,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010006427764892578,
      "pred_time": 0.0
    },
    {
      "db_id": "european_football_2",
      "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
      "evidence": "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);",
      "gold_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
      "pred_sql": "SELECT \n  ((SELECT T2.overall_rating\n    FROM Player AS T1\n    INNER JOIN Player_Attributes AS T2\n    ON T1.player_api_id = T2.player_api_id\n    WHERE T1.player_name = 'Ariel Borysiuk') - \n   (SELECT T2.overall_rating\n    FROM Player AS T1\n    INNER JOIN Player_Attributes AS T2\n    ON T1.player_api_id = T2.player_api_id\n    WHERE T1.player_name = 'Paulin Puel')) / \n  (SELECT T2.overall_rating\n   FROM Player AS T1\n   INNER JOIN Player_Attributes AS T2\n   ON T1.player_api_id = T2.player_api_id\n   WHERE T1.player_name = 'Paulin Puel') * 100",
      "execution_time": 49.005071,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0940861701965332,
      "pred_time": 0.136124849319458
    },
    {
      "db_id": "superhero",
      "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
      "evidence": "missing weight data refers to weight_kg = 0 OR T1.weight_kg = NULL; difference = SUBTRACT(SUM(colour.id = 7), SUM(colour.id = 1)); blue eyes refers to eye_colour_id WHERE colour.id = 7; no eye color refers to eye_colour_id WHERE colour.id = 1;",
      "gold_sql": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL",
      "pred_sql": "SELECT \n  SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - \n  SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) AS difference\nFROM superhero AS T1\nINNER JOIN colour AS T2\nON T1.eye_colour_id = T2.id\nWHERE (T1.weight_kg = 0 OR T1.weight_kg IS NULL)",
      "execution_time": 9.785971,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010013580322265625,
      "pred_time": 0.0
    },
    {
      "db_id": "european_football_2",
      "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
      "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League'; in April, 2009 refers to SUBSTR(`date`, 1, 7);",
      "gold_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 7) = '2009-04'",
      "pred_sql": "SELECT COUNT(id)\n  FROM Match\n  WHERE league_id = (\n    SELECT id\n    FROM League\n    WHERE name = 'Belgium Jupiler League'\n  )\n  AND SUBSTR(`date`, 1, 7) = '2009-04'",
      "execution_time": 34.841884,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.04403996467590332,
      "pred_time": 0.04103684425354004
    },
    {
      "db_id": "student_club",
      "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
      "evidence": "'Business' is a major name; wear medium size t-shirt refers to t_shirt_size = 'Medium'",
      "gold_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
      "pred_sql": "SELECT COUNT(T1.member_id)\nFROM member AS T1\nINNER JOIN major AS T2\nON T1.link_to_major = T2.major_id\nWHERE T2.major_name = 'Business'\nAND T1.t_shirt_size = 'Medium';",
      "execution_time": 18.548992,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
      "evidence": "age = SUBTRACT(year(current_timestamp), year(Birthday)); patient with two or more laboratory examinations refers to COUNT(ID) > 2; hematoclit level exceeded the normal range refers to HCT > = 52;",
      "gold_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )",
      "pred_sql": "SELECT P.`ID`, (SUBSTR(CURRENT_TIMESTAMP, 1, 4) - SUBSTR(P.`Birthday`, 1, 4)) AS `age`\nFROM Patient P\nINNER JOIN (\n  SELECT L1.`ID`, COUNT(L1.`ID`) AS `abnormal_exam_count`\n  FROM Laboratory L1\n  INNER JOIN (\n    SELECT `ID`, COUNT(`ID`) AS `exam_count`\n    FROM Laboratory\n    GROUP BY `ID`\n    HAVING COUNT(`ID`) >= 2\n  ) L2\n  ON L1.`ID` = L2.`ID`\n  WHERE L1.`HCT` >= 52\n  GROUP BY L1.`ID`\n  HAVING COUNT(L1.`ID`) >= 2\n) L3\nON P.`ID` = L3.`ID`",
      "execution_time": 11.479227,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.004004240036010742,
      "pred_time": 0.004002809524536133
    },
    {
      "db_id": "formula_1",
      "question": "How many Japanese constructors have 0 points in 2 races?",
      "evidence": "2 races refers to COUNT(raceID) = 2; Japanese refers to constructors.nationality = 'Japanese';",
      "gold_sql": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
      "pred_sql": "SELECT COUNT(T1.`constructorId`)\n  FROM (\n    SELECT T1.`constructorId`, COUNT(T1.`raceId`) AS `race_count`\n      FROM constructorResults AS T1\n      INNER JOIN constructors AS T2\n      ON T1.`constructorId` = T2.`constructorId`\n      WHERE T2.`nationality` = 'Japanese'\n      AND T1.`points` = 0\n      GROUP BY T1.`constructorId`\n  ) AS T1\n  WHERE T1.`race_count` = 2",
      "execution_time": 11.928097,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.001001119613647461,
      "pred_time": 0.0010008811950683594
    },
    {
      "db_id": "formula_1",
      "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
      "evidence": "DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage; in 1983/7/16 refers to when date = '1983-07-16'",
      "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'",
      "pred_sql": "SELECT \n  (CAST(COUNT(CASE WHEN time IS NOT NULL THEN driverId ELSE NULL END) AS REAL) / \n   COUNT(driverId)) * 100 AS completion_rate\nFROM results\nWHERE raceId = (\n  SELECT raceId\n  FROM races\n  WHERE date = '1983-07-16'\n)",
      "execution_time": 12.964825,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0030035972595214844,
      "pred_time": 0.001001119613647461
    },
    {
      "db_id": "european_football_2",
      "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
      "evidence": "players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 100)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to YEAR(birthday) BETWEEN '1987' AND '1992';",
      "gold_sql": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
      "pred_sql": "SELECT \n  (CAST(\n    (SELECT COUNT(T1.player_fifa_api_id)\n     FROM Player AS T1\n     INNER JOIN Player_Attributes AS T2\n     ON T1.player_fifa_api_id = T2.player_api_id\n     WHERE STRFTIME('%Y', T1.birthday) BETWEEN '1987' AND '1992'\n     AND T2.preferred_foot = 'left') AS REAL)\n  / \n  (SELECT COUNT(player_fifa_api_id)\n   FROM Player\n   WHERE STRFTIME('%Y', birthday) BETWEEN '1987' AND '1992')\n  * 100) AS percentage",
      "execution_time": 36.974238,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.09708881378173828,
      "pred_time": 0.06105613708496094
    },
    {
      "db_id": "formula_1",
      "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
      "evidence": "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null",
      "gold_sql": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
      "pred_sql": "-- SQL type: SQLite\nSELECT \n  ((STRFTIME('%s', T1.`time`) - STRFTIME('%s', T2.`time`)) / STRFTIME('%s', T1.`time`)) * 100\nFROM \n  results AS T1\n  JOIN results AS T2\n  JOIN races AS T3\nON \n  T1.`raceId` = T3.`raceId`\n  AND T2.`raceId` = T3.`raceId`\nWHERE \n  T3.`year` = 2008 \n  AND T3.`name` LIKE '%Australian Grand Prix%'\n  AND T1.`position` IN (SELECT MAX(`position`) FROM results WHERE `raceId` = T3.`raceId`)\n  AND T2.`position` = 1\n  AND T1.`time` IS NOT NULL\n  AND T2.`time` IS NOT NULL",
      "execution_time": 29.505286,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.004003286361694336,
      "pred_time": 0.0010023117065429688
    },
    {
      "db_id": "toxicology",
      "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
      "evidence": "have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n'",
      "gold_sql": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'",
      "pred_sql": "SELECT T2.`bond_id`\nFROM atom AS T1\nINNER JOIN connected AS T2\nON T1.`atom_id` = T2.`atom_id`\nINNER JOIN (\n  SELECT T2.`bond_id`\n  FROM atom AS T1\n  INNER JOIN connected AS T2\n  ON T1.`atom_id` = T2.`atom_id`\n  WHERE T1.`element` = 'n'\n) AS T3\nON T2.`bond_id` = T3.`bond_id`\nWHERE T1.`element` = 'p'",
      "execution_time": 8.341931,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.003001689910888672,
      "pred_time": 0.005003452301025391
    },
    {
      "db_id": "card_games",
      "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
      "evidence": "Italian refers to language = 'Italian'; flavor text refers to flavorText; \"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'",
      "gold_sql": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
      "pred_sql": "SELECT T2.`flavorText`\nFROM cards AS T1\nINNER JOIN foreign_data AS T2\nON T1.`uuid` = T2.`uuid`\nWHERE T1.`name` = 'Ancestor''s Chosen'\nAND T2.`language` = 'Italian'",
      "execution_time": 16.089403,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.1631476879119873,
      "pred_time": 0.16414976119995117
    },
    {
      "db_id": "formula_1",
      "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
      "evidence": "the fastest lap speed among all refers to max(fastestLapSpeed); Spanish Grand Prix refers to races.name = 'Spanish Grand Prix';",
      "gold_sql": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
      "pred_sql": "SELECT MAX(T1.`fastestLapSpeed`)\nFROM results AS T1\nINNER JOIN races AS T2\nON T1.`raceId` = T2.`raceId`\nWHERE T2.`name` = 'Spanish Grand Prix' AND T2.`year` = 2009",
      "execution_time": 11.674533,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.002002239227294922,
      "pred_time": 0.002001523971557617
    },
    {
      "db_id": "financial",
      "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
      "evidence": "A11 refers to average salary; Female mapps to gender = 'F'",
      "gold_sql": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
      "pred_sql": "SELECT COUNT(*)\nFROM (\n  SELECT T2.`district_id`\n  FROM client AS T1\n  INNER JOIN district AS T2\n  ON T1.`district_id` = T2.`district_id`\n  WHERE T1.`gender` = 'F'\n  GROUP BY T2.`district_id`\n  HAVING AVG(T2.`A11`) > 6000 AND AVG(T2.`A11`) < 10000\n) AS subquery",
      "execution_time": 16.275086,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010001659393310547,
      "pred_time": 0.001001119613647461
    },
    {
      "db_id": "superhero",
      "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
      "evidence": "super hero names refers to superhero_name;male superheros refers to gender = 'Male';Calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)",
      "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
      "pred_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN gender AS T2\n  ON T1.`gender_id` = T2.`id`\n  WHERE T2.`gender` = 'Male'\n  AND T1.`weight_kg` > (\n    SELECT AVG(`weight_kg`) * 0.79 \n    FROM superhero\n  )",
      "execution_time": 12.206931,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010006427764892578,
      "pred_time": 0.0
    },
    {
      "db_id": "superhero",
      "question": "List down at least five superpowers of male superheroes.",
      "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;",
      "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
      "pred_sql": "SELECT DISTINCT T3.power_name\nFROM superhero AS T1\nINNER JOIN hero_power AS T2\nON T1.id = T2.hero_id\nINNER JOIN superpower AS T3\nON T2.power_id = T3.id\nWHERE T1.gender_id = (SELECT id FROM gender WHERE gender = 'Male')",
      "execution_time": 13.067926,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0010004043579101562
    },
    {
      "db_id": "superhero",
      "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
      "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
      "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
      "pred_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  WHERE T1.`eye_colour_id` IS NOT NULL\n  AND T1.`hair_colour_id` IS NOT NULL\n  AND T1.`eye_colour_id` = (\n    SELECT `id`\n    FROM colour\n    WHERE `colour` = 'Blue'\n  )\n  AND T1.`hair_colour_id` = (\n    SELECT `id`\n    FROM colour\n    WHERE `colour` = 'Blond'\n  )",
      "execution_time": 12.478277,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "card_games",
      "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
      "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
      "gold_sql": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
      "pred_sql": "SELECT T3.name\nFROM cards AS T1\nINNER JOIN sets AS T2\nON T1.setCode = T2.code\nINNER JOIN foreign_data AS T3\nON T1.uuid = T3.uuid\nWHERE T2.name = 'Coldsnap'\nAND T1.convertedManaCost = (\n  SELECT MAX(T4.convertedManaCost)\n  FROM cards AS T4\n  INNER JOIN sets AS T5\n  ON T4.setCode = T5.code\n  WHERE T5.name = 'Coldsnap'\n)\nAND T3.language = 'Italian'",
      "execution_time": 17.023453,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.19017386436462402,
      "pred_time": 0.2352139949798584
    },
    {
      "db_id": "debit_card_specializing",
      "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
      "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'",
      "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
      "pred_sql": "SELECT COUNT(*)\n  FROM transactions_1k AS T1\n  INNER JOIN gasstations AS T2\n  ON T1.`GasStationID` = T2.`GasStationID`\n  WHERE T1.`Date` > '2012-01-01'\n  AND T2.`Country` = 'CZE'",
      "execution_time": 6.757412,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010023117065429688,
      "pred_time": 0.0010006427764892578
    },
    {
      "db_id": "student_club",
      "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
      "evidence": "'Physics Teaching' is the major_name;",
      "gold_sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'",
      "pred_sql": "SELECT COUNT(T1.member_id)\nFROM member AS T1\nINNER JOIN major AS T2\nON T1.link_to_major = T2.major_id\nWHERE T2.major_name = 'Physics Teaching'",
      "execution_time": 9.469484,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "toxicology",
      "question": "What elements are in a double type bond?",
      "evidence": "double type bond refers to bond_type = '=';",
      "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
      "pred_sql": "SELECT DISTINCT T3.`element`\n  FROM connected AS T1\n  INNER JOIN bond AS T2\n  ON T1.`bond_id` = T2.`bond_id`\n  INNER JOIN atom AS T3\n  ON T1.`atom_id` = T3.`atom_id` OR T1.`atom_id2` = T3.`atom_id`\n  WHERE T2.`bond_type` = '='",
      "execution_time": 5.81275,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.020018339157104492,
      "pred_time": 0.00800776481628418
    },
    {
      "db_id": "card_games",
      "question": "What proportion of cards do not have a text box with a normal layout?",
      "evidence": "do not have a text box refers to isTextless = 1; proportion refers to DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100",
      "gold_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards",
      "pred_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)\n  FROM cards\n  WHERE layout = 'normal'",
      "execution_time": 18.268985,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0470426082611084,
      "pred_time": 0.04604220390319824
    },
    {
      "db_id": "card_games",
      "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
      "evidence": "Chinese Simplified' is the language; percentage = Divide(Sum(id where language = 'Chinese Simplified'), Count(id)) *100",
      "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
      "pred_sql": "SELECT \n  (CAST(\n    COALESCE(\n      (SELECT COUNT(T1.id) \n       FROM cards AS T1\n       INNER JOIN foreign_data AS T2\n       ON T1.uuid = T2.uuid\n       WHERE T2.language = 'Chinese Simplified'), 0) \n   AS REAL) \n  / \n  (SELECT COUNT(id) FROM cards)) * 100\n  AS percentage",
      "execution_time": 17.541191,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.18917131423950195,
      "pred_time": 0.14212894439697266
    },
    {
      "db_id": "financial",
      "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
      "evidence": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995",
      "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
      "pred_sql": "SELECT COUNT(T1.`client_id`) AS num_male_clients\nFROM client AS T1\nWHERE T1.`district_id` IN (\n  SELECT `district_id`\n  FROM district\n  WHERE `A15` = (\n    SELECT DISTINCT `A15`\n    FROM district\n    ORDER BY `A15` DESC\n    LIMIT 1 OFFSET 1\n  )\n)\nAND T1.`gender` = 'M'",
      "execution_time": 12.088331,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "european_football_2",
      "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
      "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
      "gold_sql": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
      "pred_sql": "SELECT T2.`buildUpPlaySpeedClass`\nFROM Team AS T1\nINNER JOIN Team_Attributes AS T2\nON T1.`team_api_id` = T2.`team_api_id`\nWHERE T1.`team_long_name` = 'KSV Cercle Brugge'",
      "execution_time": 41.857672,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.001001119613647461,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
      "evidence": "abnormal C-reactive protein refers to CRP ='+'; don't have data recorded refers to Description IS NULL;",
      "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL",
      "pred_sql": "SELECT COUNT(T1.`ID`)\nFROM Patient AS T1\nINNER JOIN Laboratory AS T2\nON T1.`ID` = T2.`ID`\nWHERE T2.`CRP` = '+'\nAND T1.`Description` IS NULL",
      "execution_time": 10.328003,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.003002643585205078,
      "pred_time": 0.0010020732879638672
    },
    {
      "db_id": "formula_1",
      "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
      "evidence": "race number refers to raceId; had the Q3 time as 0:0M:SS refers to q3 LIKE 'M:SS%'",
      "gold_sql": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
      "pred_sql": "-- SQL type: SQLite\nSELECT T1.`code`\nFROM drivers AS T1\nINNER JOIN qualifying AS T2\nON T1.`driverId` = T2.`driverId`\nINNER JOIN races AS T3\nON T2.`raceId` = T3.`raceId`\nWHERE T3.`raceId` = 45\nAND T2.`q3` LIKE '0:01:33.%'\nAND T1.`code` IS NOT NULL;",
      "execution_time": 24.023049,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010008811950683594,
      "pred_time": 0.0010008811950683594
    },
    {
      "db_id": "formula_1",
      "question": "What is the coordinates location of the circuits for Australian grand prix?",
      "evidence": "coordinate position/location refers to lat, lng; circuits for Australian grand prix refers to races.name = 'Australian Grand Prix'",
      "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'",
      "pred_sql": "SELECT `lat`, `lng`\nFROM circuits\nWHERE `circuitId` IN (\n  SELECT `circuitId`\n  FROM races\n  WHERE `name` = 'Australian Grand Prix'\n);",
      "execution_time": 11.580721,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.001001119613647461,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
      "evidence": "race number refers to raceId; Bruno Senna refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
      "gold_sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
      "pred_sql": "SELECT T1.`q1`\n  FROM qualifying AS T1\n  WHERE T1.`driverId` = (\n    SELECT `driverId`\n      FROM drivers\n      WHERE `forename` = 'Bruno' AND `surname` = 'Senna'\n  ) AND T1.`raceId` = 354",
      "execution_time": 11.247174,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010018348693847656,
      "pred_time": 0.0010001659393310547
    },
    {
      "db_id": "card_games",
      "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
      "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
      "gold_sql": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
      "pred_sql": "SELECT 'Frame Style' AS type, `frameVersion` AS value\n  FROM cards\n  WHERE `artist` = 'Allen Williams'\nUNION\nSELECT 'Card Name' AS type, `name` AS value\n  FROM cards\n  WHERE `artist` = 'Allen Williams'\nUNION\nSELECT 'Banned Card' AS type, T1.`name` AS value\n  FROM cards AS T1\n  INNER JOIN legalities AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T1.`artist` = 'Allen Williams'\n  AND T2.`status` = 'Banned'",
      "execution_time": 14.981091,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.28325772285461426,
      "pred_time": 0.12811756134033203
    },
    {
      "db_id": "financial",
      "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
      "evidence": "k_symbol refers to the purpose of payments",
      "gold_sql": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
      "pred_sql": "-- Script type: SQLite\nSELECT \n  T1.k_symbol, \n  COUNT(T1.trans_id) AS frequency\nFROM \n  trans T1\nWHERE \n  T1.account_id = 3 AND T1.type IN ('VYDAJ', 'VYBER') AND T1.k_symbol IS NOT NULL\nGROUP BY \n  T1.k_symbol",
      "execution_time": 48.21544,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.001001596450805664,
      "pred_time": 0.0570523738861084
    }
  ]
}