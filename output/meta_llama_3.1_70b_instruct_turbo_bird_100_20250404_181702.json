{
  "metadata": {
    "timestamp": "2025-04-04T18:55:44.828007",
    "num_samples": 100,
    "execution_accuracy": 0.6,
    "avg_gold_time": 0.04742719882573837,
    "avg_pred_time": 0.03369734128316244,
    "model": "meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",
    "dataset": "BIRD",
    "metrics": {
      "exact_match": 0.17
    }
  },
  "results": [
    {
      "db_id": "student_club",
      "question": "What does the person with the phone number \"809-555-3360\" major in?",
      "evidence": "major in refers to major_name",
      "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'",
      "pred_sql": "SELECT T2.`major_name`\n  FROM member AS T1\n  INNER JOIN major AS T2\n  ON T1.`link_to_major` = T2.`major_id`\n  WHERE T1.`phone` = '809-555-3360'",
      "execution_time": 8.421015,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "european_football_2",
      "question": "List the long name of teams with above-average build-up play passing in 2012.",
      "evidence": "long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = buildUpPlayPassing > DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL); in 2012 refers to strftime('%Y', date) = '2012'; ",
      "gold_sql": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.`date`) = '2012')",
      "pred_sql": "-- List the long name of teams with above-average build-up play passing in 2012.\n-- Script type: SQLite\n\nSELECT T2.`team_long_name`\n  FROM Team_Attributes AS T1\n  INNER JOIN Team AS T2\n  ON T1.`team_api_id` = T2.`team_api_id`\n  WHERE strftime('%Y', T1.`date`) = '2012'\n  AND T1.`buildUpPlayPassing` > (\n    SELECT AVG(T3.`buildUpPlayPassing`)\n    FROM Team_Attributes AS T3\n    WHERE strftime('%Y', T3.`date`) = '2012'\n    AND T3.`buildUpPlayPassing` IS NOT NULL\n  )",
      "execution_time": 42.316027,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0020017623901367188,
      "pred_time": 0.001001596450805664
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
      "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; The larger the birthday value, the younger the person is, and vice versa; normal hemoglobin level refers to 10 < HGB < 17;",
      "gold_sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1",
      "pred_sql": "SELECT T1.`ID`, T1.`SEX`\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`Diagnosis` = 'SLE'\n  AND T2.`HGB` > 10 AND T2.`HGB` < 17\n  ORDER BY T1.`Birthday` ASC\n  LIMIT 1",
      "execution_time": 29.281124,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.001001119613647461,
      "pred_time": 0.0
    },
    {
      "db_id": "card_games",
      "question": "List all the mythic rarity print cards banned in gladiator format.",
      "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
      "gold_sql": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
      "pred_sql": "SELECT T1.`name`\n  FROM cards AS T1\n  INNER JOIN legalities AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T2.`format` = 'gladiator'\n  AND T2.`status` = 'Banned'\n  AND T1.`rarity` = 'mythic'",
      "execution_time": 33.191376,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.038034677505493164,
      "pred_time": 0.03603315353393555
    },
    {
      "db_id": "debit_card_specializing",
      "question": "How much did customer 6 consume in total between August and November 2013?",
      "evidence": "Between August And November 2013 refers to Between 201308 And 201311; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
      "gold_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
      "pred_sql": "SELECT SUM(T1.`Consumption`)\n  FROM yearmonth AS T1\n  WHERE T1.`CustomerID` = 6\n  AND SUBSTR(T1.`Date`, 1, 6) IN ('201308', '201309', '201310', '201311')",
      "execution_time": 10.496382,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.32624125480651855,
      "pred_time": 0.018016338348388672
    },
    {
      "db_id": "card_games",
      "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
      "evidence": "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;",
      "gold_sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
      "pred_sql": "SELECT CASE \n  WHEN T2.`isForeignOnly` = 1 THEN 'Yes'\n  ELSE 'No'\nEND AS result\n  FROM cards AS T1\n  INNER JOIN sets AS T2\n  ON T1.`setCode` = T2.`code`\n  WHERE T1.`name` = 'Adarkar Valkyrie'",
      "execution_time": 31.750184,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.046042680740356445,
      "pred_time": 0.04604148864746094
    },
    {
      "db_id": "california_schools",
      "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
      "evidence": "K-12 refers to students in grades 1 through 12; Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
      "gold_sql": "SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2",
      "pred_sql": "SELECT CAST(T1.`Free Meal Count (K-12)` AS REAL) / T1.`Enrollment (K-12)`\n  FROM frpm AS T1\n  INNER JOIN (\n    SELECT T3.`CDSCode`\n      FROM frpm AS T3\n      INNER JOIN satscores AS T4\n      ON T3.`CDSCode` = T4.`cds`\n      ORDER BY T4.`enroll12` DESC\n      LIMIT 2 OFFSET 9\n  ) AS T2\n  ON T1.`CDSCode` = T2.`CDSCode`",
      "execution_time": 14.390294,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0030024051666259766,
      "pred_time": 0.0010008811950683594
    },
    {
      "db_id": "california_schools",
      "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
      "evidence": "Fresno Unified is a name of district;",
      "gold_sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
      "pred_sql": "SELECT T2.`Phone`\n  FROM satscores AS T1\n  INNER JOIN schools AS T2\n  ON T1.`cds` = T2.`CDSCode`\n  WHERE T1.`dname` = 'Fresno Unified'\n  AND T2.`Phone` IS NOT NULL\n  ORDER BY T1.`AvgScrRead` ASC\n  LIMIT 1",
      "execution_time": 25.049633,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.007006406784057617,
      "pred_time": 0.001001119613647461
    },
    {
      "db_id": "california_schools",
      "question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?",
      "evidence": "Exclusively virtual refers to Virtual = 'F'",
      "gold_sql": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath > 400",
      "pred_sql": "SELECT COUNT(T1.`cds`)\n  FROM satscores AS T1\n  INNER JOIN schools AS T2\n  ON T1.`cds` = T2.`CDSCode`\n  WHERE T1.`AvgScrMath` > 400\n  AND T2.`Virtual` = 'F'",
      "execution_time": 20.732076,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.008007049560546875,
      "pred_time": 0.007006168365478516
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
      "evidence": "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400; ",
      "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'",
      "pred_sql": "SELECT T1.`ID`, T1.`SEX`, T1.`Birthday`\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE STRFTIME('%Y', T2.`Date`) = '1984'\n  AND STRFTIME('%Y', T1.`Birthday`) IS NOT NULL\n  AND STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.`Birthday`) < 50\n  AND T2.`PLT` BETWEEN 100 AND 400",
      "execution_time": 25.366215,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0050046443939208984,
      "pred_time": 0.004003286361694336
    },
    {
      "db_id": "debit_card_specializing",
      "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
      "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year; Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012",
      "gold_sql": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'",
      "pred_sql": "SELECT \n  (SELECT SUM(T2.`Consumption`)\n   FROM customers AS T1\n   INNER JOIN yearmonth AS T2\n   ON T1.`CustomerID` = T2.`CustomerID`\n   WHERE T1.`Currency` = 'CZK'\n   AND SUBSTR(T2.`Date`, 1, 4) = '2012') \n  - \n  (SELECT SUM(T2.`Consumption`)\n   FROM customers AS T1\n   INNER JOIN yearmonth AS T2\n   ON T1.`CustomerID` = T2.`CustomerID`\n   WHERE T1.`Currency` = 'EUR'\n   AND SUBSTR(T2.`Date`, 1, 4) = '2012')",
      "execution_time": 5.982976,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0470423698425293,
      "pred_time": 0.0790719985961914
    },
    {
      "db_id": "formula_1",
      "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
      "evidence": "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton'); since 2010 refers to year >= 2010",
      "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
      "pred_sql": "SELECT CAST(\n  (\n    SELECT COUNT(T2.`raceId`)\n    FROM drivers AS T1\n    INNER JOIN results AS T2\n    ON T1.`driverId` = T2.`driverId`\n    WHERE T1.`surname` = 'Hamilton'\n    AND T2.`grid` > 1\n    AND T2.`raceId` IN (\n      SELECT `raceId`\n      FROM races\n      WHERE `year` >= 2010\n    )\n  ) AS REAL\n) / (\n  SELECT COUNT(T2.`raceId`)\n  FROM drivers AS T1\n  INNER JOIN results AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE T1.`surname` = 'Hamilton'\n  AND T2.`raceId` IN (\n    SELECT `raceId`\n    FROM races\n    WHERE `year` >= 2010\n  )\n) * 100",
      "execution_time": 10.681491,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0030028820037841797,
      "pred_time": 0.0050048828125
    },
    {
      "db_id": "codebase_community",
      "question": "Name the user that commented 'thank you user93!'",
      "evidence": "\"thank you user93\" is the Text of comment; user refers to DisplayName",
      "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'",
      "pred_sql": "SELECT T2.`DisplayName`\n  FROM comments AS T1\n  INNER JOIN users AS T2\n  ON T1.`UserId` = T2.`Id`\n  WHERE T1.`Text` = 'thank you user93!'",
      "execution_time": 16.518713,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.03903555870056152,
      "pred_time": 0.03803396224975586
    },
    {
      "db_id": "toxicology",
      "question": "Which element is the least numerous in non-carcinogenic molecules?",
      "evidence": "label = '-' means molecules are non-carcinogenic; least numerous refers to MIN(COUNT(element));",
      "gold_sql": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t",
      "pred_sql": "SELECT T1.`element`\n  FROM atom AS T1\n  INNER JOIN molecule AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T2.`label` = '-'\n  GROUP BY T1.`element`\n  HAVING COUNT(T1.`element`) = (\n    SELECT MIN(`count`)\n    FROM (\n      SELECT T1.`element`, COUNT(T1.`element`) AS `count`\n      FROM atom AS T1\n      INNER JOIN molecule AS T2\n      ON T1.`molecule_id` = T2.`molecule_id`\n      WHERE T2.`label` = '-'\n      GROUP BY T1.`element`\n    ) AS T\n  )",
      "execution_time": 12.697307,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.003002643585205078,
      "pred_time": 0.005004405975341797
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
      "evidence": "thrombosis level 2 refers to Thrombosis = 2; ANA pattern of only S refers to ANA = 'S'; average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`); calculation = MULTIPLY(AVG + AVG, 0.2)",
      "gold_sql": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
      "pred_sql": "SELECT COUNT(T1.`ID`)\nFROM Examination AS T1\nWHERE T1.`Thrombosis` = 2 \nAND T1.`ANA Pattern` = 'S'\nAND T1.`aCL IgM` > (\n  SELECT AVG(`aCL IgM`) * 1.2 \n  FROM Examination\n)",
      "execution_time": 10.146921,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.001001119613647461
    },
    {
      "db_id": "codebase_community",
      "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
      "evidence": "percentage = DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10))*100, (COUNT(UserId where Score BETWEEN 5 and 10));",
      "gold_sql": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10",
      "pred_sql": "SELECT CAST(\n  (SELECT COUNT(T1.`UserId`)\n    FROM comments AS T1\n    INNER JOIN users AS T2\n    ON T1.`UserId` = T2.`Id`\n    WHERE T1.`Score` BETWEEN 5 AND 10\n    AND T2.`UpVotes` = 0) AS REAL) * 100 / \n  (SELECT COUNT(T1.`UserId`)\n    FROM comments AS T1\n    WHERE T1.`Score` BETWEEN 5 AND 10)",
      "execution_time": 17.746712,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.038034677505493164,
      "pred_time": 0.07206559181213379
    },
    {
      "db_id": "european_football_2",
      "question": "What is the difference between players 6 and 23's jumping scores?",
      "evidence": "difference between players 6 and 23's jumping scores refers to SUBTRACT(jumping AND id = 6,jumping AND id = 23)",
      "gold_sql": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
      "pred_sql": "SELECT (SELECT jumping FROM Player_Attributes WHERE id = 6) - \n       (SELECT jumping FROM Player_Attributes WHERE id = 23)",
      "execution_time": 47.480447,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.05004525184631348,
      "pred_time": 0.0
    },
    {
      "db_id": "student_club",
      "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
      "evidence": "'Business' is a major name; wear medium size t-shirt refers to t_shirt_size = 'Medium'",
      "gold_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
      "pred_sql": "SELECT COUNT(T1.`member_id`)\n  FROM member AS T1\n  INNER JOIN major AS T2\n  ON T1.`link_to_major` = T2.`major_id`\n  WHERE T2.`major_name` = 'Business'\n  AND T1.`t_shirt_size` = 'Medium'",
      "execution_time": 16.11469,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0010008811950683594
    },
    {
      "db_id": "formula_1",
      "question": "How many Japanese constructors have 0 points in 2 races?",
      "evidence": "2 races refers to COUNT(raceID) = 2; Japanese refers to constructors.nationality = 'Japanese';",
      "gold_sql": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
      "pred_sql": "SELECT COUNT(T1.`constructorId`)\n  FROM constructors AS T1\n  INNER JOIN (\n    SELECT T2.`constructorId`\n      FROM constructorResults AS T2\n      WHERE T2.`points` = 0\n      GROUP BY T2.`constructorId`\n      HAVING COUNT(T2.`raceId`) = 2\n  ) AS T3\n  ON T1.`constructorId` = T3.`constructorId`\n  WHERE T1.`nationality` = 'Japanese'",
      "execution_time": 15.44819,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.001001596450805664,
      "pred_time": 0.002001047134399414
    },
    {
      "db_id": "student_club",
      "question": "State what kind of expenses that Sacha Harrison incurred?",
      "evidence": "kind of expenses refers to expense_description; Sacha Harrison is the full name; full name refers to first_name, last_name;",
      "gold_sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
      "pred_sql": "SELECT T2.`expense_description`\n  FROM member AS T1\n  INNER JOIN expense AS T2\n  ON T1.`member_id` = T2.`link_to_member`\n  WHERE T1.`first_name` = 'Sacha' AND T1.`last_name` = 'Harrison'",
      "execution_time": 16.595645,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "superhero",
      "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
      "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
      "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
      "pred_sql": "SELECT COUNT(T1.`hero_id`)\n  FROM hero_power AS T1\n  INNER JOIN superhero AS T2\n  ON T1.`hero_id` = T2.`id`\n  INNER JOIN colour AS T3\n  ON T2.`eye_colour_id` = T3.`id`\n  INNER JOIN superpower AS T4\n  ON T1.`power_id` = T4.`id`\n  WHERE T3.`colour` = 'Blue'\n  AND T4.`power_name` = 'Agility'",
      "execution_time": 12.997106,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010004043579101562,
      "pred_time": 0.0020017623901367188
    },
    {
      "db_id": "formula_1",
      "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
      "evidence": "race number refers to raceId; constructor which got the highest point refers to MAX(constructorResults.points); introduction website of the constructor refers to url;",
      "gold_sql": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1",
      "pred_sql": "SELECT T2.`url`\n  FROM constructorResults AS T1\n  INNER JOIN constructors AS T2\n  ON T1.`constructorId` = T2.`constructorId`\n  WHERE T1.`raceId` = 9\n  ORDER BY T1.`points` DESC\n  LIMIT 1",
      "execution_time": 13.973019,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0010013580322265625,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
      "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
      "gold_sql": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
      "pred_sql": "SELECT \n  T2.`Date` AS laboratory_date,\n  CASE \n    WHEN strftime('%m%d', T1.`First Date`) >= strftime('%m%d', T1.`Birthday`) \n    THEN strftime('%Y', T1.`First Date`) - strftime('%Y', T1.`Birthday`) \n    ELSE strftime('%Y', T1.`First Date`) - strftime('%Y', T1.`Birthday`) - 1 \n  END AS age\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`Diagnosis` = 'SJS'\n  ORDER BY T1.`Birthday` ASC\n  LIMIT 1",
      "execution_time": 15.359303,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.001001119613647461,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
      "evidence": "normal Ig G level refers to IGG > 900 and IGG < 2000; have symptoms refers to Symptoms IS NOT NULL;",
      "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL",
      "pred_sql": "SELECT COUNT(T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  INNER JOIN Examination AS T3\n  ON T1.`ID` = T3.`ID`\n  WHERE T2.`IGG` > 900 AND T2.`IGG` < 2000 AND T3.`Symptoms` IS NOT NULL",
      "execution_time": 12.950785,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
      "evidence": "severe degree of thrombosis refers to thrombosis = 2; disease refers to diagnosis;",
      "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
      "pred_sql": "SELECT T1.`ID`, T1.`SEX`, T1.`Diagnosis`\n  FROM Patient AS T1\n  INNER JOIN Examination AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`Thrombosis` = 2",
      "execution_time": 13.185253,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0010008811950683594
    },
    {
      "db_id": "formula_1",
      "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
      "evidence": "full name refers to forename+surname; Youngest racer = MAX(dob)",
      "gold_sql": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
      "pred_sql": "-- Script type: SELECT\nSELECT T1.forename, T1.surname, T1.nationality, T3.name\n  FROM drivers AS T1\n  INNER JOIN results AS T2\n  ON T1.`driverId` = T2.`driverId`\n  INNER JOIN races AS T3\n  ON T2.`raceId` = T3.`raceId`\n  WHERE T1.`driverId` = (\n    SELECT `driverId`\n    FROM drivers\n    WHERE `dob` = (\n      SELECT MAX(`dob`)\n      FROM drivers\n      WHERE `dob` IS NOT NULL\n    )\n  )\n  ORDER BY T3.`date` ASC\n  LIMIT 1",
      "execution_time": 33.191434,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.007006645202636719,
      "pred_time": 0.0020003318786621094
    },
    {
      "db_id": "european_football_2",
      "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
      "evidence": "speed in which attacks are put together refers to buildUpPlaySpeed;highest build up play speed refers to MAX(buildUpPlaySpeed)",
      "gold_sql": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4",
      "pred_sql": "SELECT T1.`team_long_name`, T2.`buildUpPlaySpeed`\n  FROM Team AS T1\n  INNER JOIN Team_Attributes AS T2\n  ON T1.`team_api_id` = T2.`team_api_id`\n  ORDER BY T2.`buildUpPlaySpeed` DESC\n  LIMIT 4",
      "execution_time": 41.238826,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010020732879638672,
      "pred_time": 0.0
    },
    {
      "db_id": "superhero",
      "question": "Which hero was the fastest?",
      "evidence": "which hero refers to superhero_name; fastest refers to MAX(attribute_value) WHERE attribute_name = 'Speed';",
      "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
      "pred_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN hero_attribute AS T2\n  ON T1.`id` = T2.`hero_id`\n  INNER JOIN attribute AS T3\n  ON T2.`attribute_id` = T3.`id`\n  WHERE T3.`attribute_name` = 'Speed'\n  ORDER BY T2.`attribute_value` DESC\n  LIMIT 1",
      "execution_time": 10.225855,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0010008811950683594,
      "pred_time": 0.0009999275207519531
    },
    {
      "db_id": "card_games",
      "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
      "evidence": "converted mana cost of 7 refers to convertedManaCost = 7; card set Coldsnap refers to name = 'Coldsnap'; percentage = DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost))*100",
      "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
      "pred_sql": "SELECT CAST(\n  (SELECT COUNT(T1.`id`)\n    FROM cards AS T1\n    INNER JOIN sets AS T2\n    ON T1.`id` = T2.`id`\n    WHERE T2.`name` = 'Coldsnap'\n    AND T1.`convertedManaCost` = 7) AS REAL) / \n  (SELECT COUNT(T1.`id`)\n    FROM cards AS T1\n    INNER JOIN sets AS T2\n    ON T1.`id` = T2.`id`\n    WHERE T2.`name` = 'Coldsnap') * 100",
      "execution_time": 16.275168,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.058053016662597656,
      "pred_time": 0.0420377254486084
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
      "evidence": "urea nitrogen (UN) just within the borderline of passing refers to UN = 29; ",
      "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29",
      "pred_sql": "SELECT T1.`ID`, T1.`SEX`, T1.`Birthday`\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`UN` = 29",
      "execution_time": 11.586928,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.003002643585205078,
      "pred_time": 0.0010004043579101562
    },
    {
      "db_id": "superhero",
      "question": "How many gold-eyed superheroes did Marvel Comics publish?",
      "evidence": "gold-eyed refers to colour = 'Gold' where eye_colour_id = colour.id; superheroes that Marvel Comics published refers to publisher_name = 'Marvel Comics'",
      "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'",
      "pred_sql": "SELECT COUNT(T1.`id`)\n  FROM superhero AS T1\n  INNER JOIN publisher AS T2\n  ON T1.`publisher_id` = T2.`id`\n  INNER JOIN colour AS T3\n  ON T1.`eye_colour_id` = T3.`id`\n  WHERE T2.`publisher_name` = 'Marvel Comics'\n  AND T3.`colour` = 'Gold'",
      "execution_time": 8.009518,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "student_club",
      "question": "What is the total amount of money spent for food?",
      "evidence": "total amount of money spent refers to SUM(spent); spent for food refers to category = 'Food'",
      "gold_sql": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
      "pred_sql": "SELECT SUM(T1.`spent`)\n  FROM budget AS T1\n  WHERE T1.`category` = 'Food'",
      "execution_time": 11.880077,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010018348693847656,
      "pred_time": 0.0
    },
    {
      "db_id": "card_games",
      "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
      "evidence": "Italian refers to language = 'Italian'; flavor text refers to flavorText; \"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'",
      "gold_sql": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
      "pred_sql": "SELECT T2.`flavorText`\n  FROM cards AS T1\n  INNER JOIN foreign_data AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T1.`name` = 'Ancestor''s Chosen'\n  AND T2.`language` = 'Italian'",
      "execution_time": 15.805595,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.16715335845947266,
      "pred_time": 0.1731584072113037
    },
    {
      "db_id": "european_football_2",
      "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
      "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
      "gold_sql": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
      "pred_sql": "SELECT T2.`date`\n  FROM Player AS T1\n  INNER JOIN Player_Attributes AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T1.`player_name` = 'Kevin Constant'\n  AND T2.`crossing` = (\n    SELECT MAX(T4.`crossing`)\n    FROM Player AS T3\n    INNER JOIN Player_Attributes AS T4\n    ON T3.`player_api_id` = T4.`player_api_id`\n    WHERE T3.`player_name` = 'Kevin Constant'\n  )\n  ORDER BY T2.`date` ASC\n  LIMIT 1",
      "execution_time": 35.198686,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.08707928657531738,
      "pred_time": 0.1931757926940918
    },
    {
      "db_id": "superhero",
      "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
      "evidence": "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to colour = 'No Colour'",
      "gold_sql": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
      "pred_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN colour AS T2\n  ON T1.`eye_colour_id` = T2.`id`\n  WHERE T2.`colour` = 'No Colour'\n  AND T1.`height_cm` BETWEEN 170 AND 190",
      "execution_time": 9.04532,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0010006427764892578
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
      "evidence": "How old the patient refers to SUBTRACT(year(`Examination Date`), year(Birthday)); the highest hemoglobin count refers to MAX(HGB)",
      "gold_sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
      "pred_sql": "SELECT STRFTIME('%Y', T3.`Examination Date`) - STRFTIME('%Y', T1.`Birthday`) AS age, T3.`Diagnosis`\n  FROM Patient AS T1\n  INNER JOIN Examination AS T3\n  ON T1.`ID` = T3.`ID`\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  ORDER BY T2.`HGB` DESC\n  LIMIT 1",
      "execution_time": 23.454455,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0030035972595214844,
      "pred_time": 0.001001119613647461
    },
    {
      "db_id": "codebase_community",
      "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
      "evidence": "user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))",
      "gold_sql": "SELECT CAST(COUNT(DISTINCT T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
      "pred_sql": "SELECT CAST(\n  (SELECT COUNT(T1.`Id`) FROM posts AS T1 WHERE T1.`OwnerUserId` = 24) AS REAL\n) / \n  (SELECT COUNT(T2.`Id`) FROM votes AS T2 WHERE T2.`UserId` = 24)",
      "execution_time": 24.702854,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.08707904815673828,
      "pred_time": 0.08707928657531738
    },
    {
      "db_id": "toxicology",
      "question": "What are the elements of the toxicology and label of molecule TR060?",
      "evidence": "TR060 is the molecule id; ",
      "gold_sql": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
      "pred_sql": "SELECT T2.`label`, T1.`element`\n  FROM atom AS T1\n  INNER JOIN molecule AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T2.`molecule_id` = 'TR060'",
      "execution_time": 10.223421,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010013580322265625,
      "pred_time": 0.0010008811950683594
    },
    {
      "db_id": "card_games",
      "question": "What is the language of the card with the multiverse number 149934?",
      "evidence": "multiverse number 149934 refers to multiverseid = 149934;",
      "gold_sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
      "pred_sql": "SELECT `language`\n  FROM foreign_data\n  WHERE `multiverseid` = 149934",
      "execution_time": 14.018139,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.05905461311340332,
      "pred_time": 0.058052778244018555
    },
    {
      "db_id": "card_games",
      "question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.",
      "evidence": "pre-modern format refers to format = 'premodern' ;do not have multiple faces refers to side IS NULL",
      "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
      "pred_sql": "SELECT COUNT(T1.`id`)\n  FROM cards AS T1\n  INNER JOIN rulings AS T2\n  ON T1.`uuid` = T2.`uuid`\n  INNER JOIN legalities AS T3\n  ON T1.`uuid` = T3.`uuid`\n  WHERE T3.`format` = 'premodern'\n  AND T2.`text` = 'This is a triggered mana ability.'\n  AND T1.`side` IS NULL",
      "execution_time": 19.032999,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.1361234188079834,
      "pred_time": 0.07606959342956543
    },
    {
      "db_id": "superhero",
      "question": "What is the percentage of blue female superheroes among all female superheroes?",
      "evidence": "percentage = MULTIPLY(DIVIDE(SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female')), 100); blue refers to the color = 'Blue' WHERE skin_colour_id = colour.id; female refers to gender = 'Female';",
      "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'",
      "pred_sql": "SELECT CAST(SUM(CASE WHEN T3.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id)\nFROM superhero AS T1\nINNER JOIN gender AS T2\nON T1.gender_id = T2.id\nINNER JOIN colour AS T3\nON T1.skin_colour_id = T3.id\nWHERE T2.gender = 'Female'",
      "execution_time": 21.919942,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "superhero",
      "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
      "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
      "gold_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
      "pred_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN hero_power AS T2\n  ON T1.`id` = T2.`hero_id`\n  INNER JOIN superpower AS T3\n  ON T2.`power_id` = T3.`id`\n  INNER JOIN publisher AS T4\n  ON T1.`publisher_id` = T4.`id`\n  WHERE T4.`publisher_name` = 'Marvel Comics'\n  AND T3.`power_name` = 'Super Strength'",
      "execution_time": 12.254465,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.09008264541625977,
      "pred_time": 0.0010008811950683594
    },
    {
      "db_id": "codebase_community",
      "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
      "evidence": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)",
      "gold_sql": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
      "pred_sql": "SELECT `DisplayName`\n  FROM users\n  WHERE `DisplayName` IN ('Harlan', 'Jarrod Dixon')\n  AND `Reputation` = (\n    SELECT MAX(`Reputation`)\n    FROM users\n    WHERE `DisplayName` IN ('Harlan', 'Jarrod Dixon')\n  )",
      "execution_time": 33.057695,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.013012409210205078,
      "pred_time": 0.013011693954467773
    },
    {
      "db_id": "formula_1",
      "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
      "evidence": "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname",
      "gold_sql": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
      "pred_sql": "-- Query type: SELECT\nSELECT T1.`forename`, T1.`surname`\n  FROM drivers AS T1\n  INNER JOIN qualifying AS T2\n  ON T1.`driverId` = T2.`driverId`\n  INNER JOIN races AS T3\n  ON T2.`raceId` = T3.`raceId`\n  INNER JOIN circuits AS T4\n  ON T3.`circuitId` = T4.`circuitId`\n  WHERE T4.`name` = 'Marina Bay Street Circuit'\n  AND T3.`year` = 2008\n  AND T3.`round` = 3\n  AND T2.`q3` = (SELECT MIN(T5.`q3`) \n                  FROM qualifying AS T5\n                  WHERE T5.`raceId` = T3.`raceId`)",
      "execution_time": 70.834552,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010013580322265625,
      "pred_time": 0.006005525588989258
    },
    {
      "db_id": "european_football_2",
      "question": "Calculate the average overall rating of Pietro Marino.",
      "evidence": "Pietro Marino refers to player_name = 'Pietro Marino'; average overall rating AVG(T1.overall_rating)",
      "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'",
      "pred_sql": "SELECT AVG(T2.`overall_rating`)\n  FROM Player AS T1\n  INNER JOIN Player_Attributes AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T1.`player_name` = 'Pietro Marino'",
      "execution_time": 39.320759,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.08607816696166992,
      "pred_time": 0.08507680892944336
    },
    {
      "db_id": "debit_card_specializing",
      "question": "Which of the three segments\u0432\u0402\u201dSME, LAM and KAM\u0432\u0402\u201dhas the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
      "evidence": "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; The first 4 strings of the Date values in the yearmonth table can represent year",
      "gold_sql": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
      "pred_sql": "-- Query type: SQLite\nSELECT type, Segment, percentage_increase\n  FROM (\n    SELECT 'biggest' AS type, T1.`Segment`, T1.`percentage_increase`, 1 AS sort_order\n      FROM (\n        SELECT T1.`Segment`, \n               (T1.`consumption_2013` - T1.`consumption_2012`) / T1.`consumption_2013` * 100 AS percentage_increase\n          FROM (\n            SELECT T1.`Segment`, \n                   SUM(CASE WHEN SUBSTR(T2.`Date`, 1, 4) = '2012' THEN T2.`Consumption` ELSE 0 END) AS consumption_2012,\n                   SUM(CASE WHEN SUBSTR(T2.`Date`, 1, 4) = '2013' THEN T2.`Consumption` ELSE 0 END) AS consumption_2013\n              FROM customers AS T1\n              INNER JOIN yearmonth AS T2\n              ON T1.`CustomerID` = T2.`CustomerID`\n              WHERE T1.`Currency` = 'EUR'\n              GROUP BY T1.`Segment`\n          ) AS T1\n      ) AS T1\n\n    UNION ALL\n\n    SELECT 'lowest' AS type, T1.`Segment`, T1.`percentage_increase`, 2 AS sort_order\n      FROM (\n        SELECT T1.`Segment`, \n               (T1.`consumption_2013` - T1.`consumption_2012`) / T1.`consumption_2013` * 100 AS percentage_increase\n          FROM (\n            SELECT T1.`Segment`, \n                   SUM(CASE WHEN SUBSTR(T2.`Date`, 1, 4) = '2012' THEN T2.`Consumption` ELSE 0 END) AS consumption_2012,\n                   SUM(CASE WHEN SUBSTR(T2.`Date`, 1, 4) = '2013' THEN T2.`Consumption` ELSE 0 END) AS consumption_2013\n              FROM customers AS T1\n              INNER JOIN yearmonth AS T2\n              ON T1.`CustomerID` = T2.`CustomerID`\n              WHERE T1.`Currency` = 'EUR'\n              GROUP BY T1.`Segment`\n          ) AS T1\n      ) AS T1\n  ) AS T1\n  ORDER BY T1.sort_order",
      "execution_time": 45.259772,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.11510491371154785,
      "pred_time": 0.07206535339355469
    },
    {
      "db_id": "debit_card_specializing",
      "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
      "evidence": "June 2013 refers to '201306'; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month;",
      "gold_sql": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
      "pred_sql": "SELECT T3.`Country`\n  FROM yearmonth AS T1\n  INNER JOIN transactions_1k AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  INNER JOIN gasstations AS T3\n  ON T2.`GasStationID` = T3.`GasStationID`\n  WHERE SUBSTR(T1.`Date`, 1, 6) = '201306'",
      "execution_time": 11.53799,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0020020008087158203,
      "pred_time": 0.03903555870056152
    },
    {
      "db_id": "european_football_2",
      "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
      "evidence": "77 points overall rating refers to overall_rating = 77; on 2016/6/23 refers to date LIKE '2016-06-23%'; The larger the birthday value, the younger the person is, and vice versa;",
      "gold_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1",
      "pred_sql": "SELECT T2.`player_name`\n  FROM Player_Attributes AS T1\n  INNER JOIN Player AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T1.`overall_rating` = 77\n  AND T1.`date` LIKE '2016-06-23%'\n  ORDER BY T2.`birthday` ASC\n  LIMIT 1",
      "execution_time": 36.961065,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.05605173110961914,
      "pred_time": 0.0470433235168457
    },
    {
      "db_id": "superhero",
      "question": "What are the names of the superheroes with the power of death touch?",
      "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
      "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
      "pred_sql": "SELECT T2.`superhero_name`\n  FROM hero_power AS T1\n  INNER JOIN superhero AS T2\n  ON T1.`hero_id` = T2.`id`\n  INNER JOIN superpower AS T3\n  ON T1.`power_id` = T3.`id`\n  WHERE T3.`power_name` = 'Death Touch'",
      "execution_time": 14.897466,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010018348693847656,
      "pred_time": 0.0010018348693847656
    },
    {
      "db_id": "european_football_2",
      "question": "Who has the highest average finishing rate between the highest and shortest football player?",
      "evidence": "finishing rate refers to finishing; highest average finishing rate = MAX(AVG(finishing)); highest football player refers to MAX(height); shortest football player refers to MIN(height);",
      "gold_sql": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",
      "pred_sql": "SELECT T1.`player_api_id`\n  FROM Player AS T1\n  INNER JOIN Player_Attributes AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T1.`height` IN (\n    SELECT `height`\n      FROM Player\n      ORDER BY `height` DESC\n      LIMIT 1\n  )\n  OR T1.`height` IN (\n    SELECT `height`\n      FROM Player\n      ORDER BY `height` ASC\n      LIMIT 1\n  )\n  GROUP BY T1.`player_api_id`\n  ORDER BY AVG(T2.`finishing`) DESC\n  LIMIT 1",
      "execution_time": 40.738181,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.1711559295654297,
      "pred_time": 0.0940859317779541
    },
    {
      "db_id": "codebase_community",
      "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
      "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
      "gold_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
      "pred_sql": "SELECT T2.`DisplayName`\n  FROM posts AS T1\n  INNER JOIN users AS T2\n  ON T1.`LastEditorUserId` = T2.`Id`\n  WHERE T1.`Title` = 'Examples for teaching: Correlation does not mean causation'",
      "execution_time": 20.60687,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.08307480812072754,
      "pred_time": 0.08207464218139648
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
      "evidence": "normal range of creatinine phosphokinase refers to CPK < 250; positive measure of degree of coagulation refers to KCT = '+' or RVVT = '+' or LAC = '+' ;",
      "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
      "pred_sql": "SELECT COUNT(T1.`ID`)\n  FROM Examination AS T1\n  INNER JOIN (\n    SELECT `ID`\n    FROM Laboratory\n    GROUP BY `ID`\n    HAVING MAX(`CPK`) < 250\n  ) AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`KCT` = '+' OR T1.`RVVT` = '+' OR T1.`LAC` = '+'",
      "execution_time": 33.47281,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0030031204223632812
    },
    {
      "db_id": "european_football_2",
      "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
      "evidence": "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100",
      "gold_sql": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70  AND t1.height < 180 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ",
      "pred_sql": "-- Script type: SQLite\nSELECT CAST(\n  (SELECT COUNT(T1.id)\n    FROM Player AS T1\n    INNER JOIN Player_Attributes AS T2\n    ON T1.`player_api_id` = T2.`player_api_id`\n    WHERE T1.`height` < 180\n    AND T2.`overall_rating` > 70) AS REAL) / \n  (SELECT COUNT(T1.id) FROM Player AS T1) * 100",
      "execution_time": 60.54907,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.089080810546875,
      "pred_time": 0.06706118583679199
    },
    {
      "db_id": "debit_card_specializing",
      "question": "In 2012, who had the least consumption in LAM?",
      "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year.",
      "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
      "pred_sql": "SELECT T1.`CustomerID`\n  FROM customers AS T1\n  INNER JOIN yearmonth AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  WHERE T1.`Segment` = 'LAM'\n  AND SUBSTR(T2.`Date`, 1, 4) = '2012'\n  ORDER BY T2.`Consumption` ASC\n  LIMIT 1",
      "execution_time": 8.073219,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.043038129806518555,
      "pred_time": 0.039035797119140625
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
      "evidence": "creatinine level is abnormal refers to CRE >= 1.5; aren't 70 yet refers to SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 70; ",
      "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70",
      "pred_sql": "SELECT COUNT(T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`CRE` >= 1.5\n  AND STRFTIME('%J', 'now') - STRFTIME('%J', T1.`Birthday`) < 70 * 365.25",
      "execution_time": 17.562258,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.002002239227294922,
      "pred_time": 0.002001523971557617
    },
    {
      "db_id": "european_football_2",
      "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
      "evidence": "teams with more than 50 but less than 60 build-up play speed refers to buildUpPlaySpeed >50 AND buildUpPlaySpeed <60; ",
      "gold_sql": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
      "pred_sql": "SELECT T2.`team_long_name`, T2.`team_short_name`\n  FROM Team_Attributes AS T1\n  INNER JOIN Team AS T2\n  ON T1.`team_api_id` = T2.`team_api_id`\n  WHERE T1.`buildUpPlaySpeed` > 50 AND T1.`buildUpPlaySpeed` < 60",
      "execution_time": 36.341403,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010006427764892578,
      "pred_time": 0.001001119613647461
    },
    {
      "db_id": "codebase_community",
      "question": "Write the contents of comments with a score of 17.",
      "evidence": "score of 17 refers to Score = 17; contents of comments refers to Text",
      "gold_sql": "SELECT Text FROM comments WHERE Score = 17",
      "pred_sql": "SELECT `Text`\n  FROM comments\n  WHERE `Score` = 17",
      "execution_time": 14.228085,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.03503251075744629,
      "pred_time": 0.036032915115356445
    },
    {
      "db_id": "superhero",
      "question": "How many green-skinned villains are there in the superhero universe?",
      "evidence": "green-skinned refers to colour.colour = 'Green' WHERE skin_colour_id = colour.id; villains refers to alignment = 'Bad';",
      "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'",
      "pred_sql": "SELECT COUNT(T1.`id`)\n  FROM superhero AS T1\n  WHERE T1.`skin_colour_id` = (\n    SELECT `id`\n    FROM colour\n    WHERE `colour` = 'Green'\n  )\n  AND T1.`alignment_id` = (\n    SELECT `id`\n    FROM alignment\n    WHERE `alignment` = 'Bad'\n  )",
      "execution_time": 29.21532,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "student_club",
      "question": "State the date Connor Hilton paid his/her dues.",
      "evidence": "Connor Hilton is the full name; full name refers to first_name, last_name; date the dues was paid refers to date_received where source = 'Dues';",
      "gold_sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
      "pred_sql": "SELECT T2.`date_received`\n  FROM member AS T1\n  INNER JOIN income AS T2\n  ON T1.`member_id` = T2.`link_to_member`\n  WHERE T1.`first_name` = 'Connor' AND T1.`last_name` = 'Hilton' AND T2.`source` = 'Dues'",
      "execution_time": 17.964167,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
      "evidence": "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country",
      "gold_sql": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
      "pred_sql": "SELECT COUNT(`code`)\n  FROM (\n    SELECT `code`, `nationality`\n    FROM drivers\n    ORDER BY STRFTIME('%Y', `dob`) DESC\n    LIMIT 3\n  ) AS T\n  WHERE `nationality` = 'Dutch'",
      "execution_time": 8.872081,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010018348693847656,
      "pred_time": 0.0
    },
    {
      "db_id": "european_football_2",
      "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
      "evidence": "from 2010 to 2015 refers to strftime('%Y', date) >= '2010' AND <= '2015'; average overall rating = SUM(t2.overall_rating)/ COUNT(t2.id); higher than 170 refers to Player.height > 170;",
      "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'",
      "pred_sql": "SELECT AVG(T2.`overall_rating`)\n  FROM Player AS T1\n  INNER JOIN Player_Attributes AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T1.`height` > 170\n  AND strftime('%Y', T2.`date`) >= '2010'\n  AND strftime('%Y', T2.`date`) <= '2015'",
      "execution_time": 49.737742,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.15614080429077148,
      "pred_time": 0.15314054489135742
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "Was the patient with the number 57266's uric acid within a normal range?",
      "evidence": "uric acid within a normal range refers to UA > 8.0 and SEX = 'M'OR UA > 6.5 and SEX = 'F'",
      "gold_sql": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
      "pred_sql": "SELECT CASE\n  WHEN T1.`SEX` = 'M' AND T2.`UA` > 8.0 THEN 'Yes'\n  WHEN T1.`SEX` = 'F' AND T2.`UA` > 6.5 THEN 'Yes'\n  ELSE 'No'\nEND AS 'Within Normal Range'\nFROM Patient AS T1\nINNER JOIN Laboratory AS T2\nON T1.`ID` = T2.`ID`\nWHERE T1.`ID` = 57266",
      "execution_time": 11.387994,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0010008811950683594
    },
    {
      "db_id": "card_games",
      "question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?",
      "evidence": "Italian is a language which refers to language = 'Italian'; with \"Ancestor's Chosen\" in the card set refers to name = 'Ancestor''s Chosen'",
      "gold_sql": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'",
      "pred_sql": "SELECT T2.`translation`\n  FROM cards AS T1\n  INNER JOIN set_translations AS T2\n  ON T1.`setCode` = T2.`setCode`\n  WHERE T1.`name` = 'Ancestor''s Chosen'\n  AND T2.`language` = 'Italian'",
      "execution_time": 16.42294,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.048043251037597656,
      "pred_time": 0.046042442321777344
    },
    {
      "db_id": "toxicology",
      "question": "What is the percentage of element chlorine in carcinogenic molecules?",
      "evidence": "chlorine refers to element = 'cl'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(element = 'pb'); COUNT(molecule_id)) as percentage where label = '+'",
      "gold_sql": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
      "pred_sql": "SELECT CAST(\n  (SELECT COUNT(T1.`atom_id`)\n   FROM atom AS T1\n   INNER JOIN molecule AS T2\n   ON T1.`molecule_id` = T2.`molecule_id`\n   WHERE T2.`label` = '+'\n   AND T1.`element` = 'cl') AS REAL) / \n  (SELECT COUNT(T3.`atom_id`)\n   FROM atom AS T3\n   INNER JOIN molecule AS T4\n   ON T3.`molecule_id` = T4.`molecule_id`\n   WHERE T4.`label` = '+') * 100",
      "execution_time": 8.955129,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.001001119613647461,
      "pred_time": 0.0020017623901367188
    },
    {
      "db_id": "superhero",
      "question": "Describe the names of neutral alignment superheroes.",
      "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
      "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
      "pred_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN alignment AS T2\n  ON T1.`alignment_id` = T2.`id`\n  WHERE T2.`alignment` = 'Neutral'",
      "execution_time": 8.020514,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "debit_card_specializing",
      "question": "What was the gas consumption peak month for SME customers in 2013?",
      "evidence": "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
      "gold_sql": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
      "pred_sql": "SELECT SUBSTR(T1.`Date`, 5, 2)\n  FROM yearmonth AS T1\n  INNER JOIN customers AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  WHERE T2.`Segment` = 'SME'\n  AND SUBSTR(T1.`Date`, 1, 4) = '2013'\n  ORDER BY T1.`Consumption` DESC\n  LIMIT 1",
      "execution_time": 5.935558,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0990896224975586,
      "pred_time": 0.05004596710205078
    },
    {
      "db_id": "student_club",
      "question": "Mention the total expense used on 8/20/2019.",
      "evidence": "total expense refers SUM(cost) where expense_date = '2019-08-20'",
      "gold_sql": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
      "pred_sql": "SELECT SUM(`cost`)\n  FROM expense\n  WHERE `expense_date` = '2019-08-20'",
      "execution_time": 15.932423,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0010006427764892578
    },
    {
      "db_id": "toxicology",
      "question": "What is the average number of bonds the atoms with the element iodine have?",
      "evidence": "atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'",
      "gold_sql": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
      "pred_sql": "SELECT AVG(`cnt`)\n  FROM (\n    SELECT T2.`atom_id`, COUNT(T2.`bond_id`) AS `cnt`\n    FROM atom AS T1\n    INNER JOIN connected AS T2\n    ON T1.`atom_id` = T2.`atom_id`\n    WHERE T1.`element` = 'i'\n    GROUP BY T2.`atom_id`\n  ) AS T",
      "execution_time": 9.481597,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010020732879638672,
      "pred_time": 0.005003213882446289
    },
    {
      "db_id": "financial",
      "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
      "evidence": "Status = 'C' stands for running contract, ok so far; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100.",
      "gold_sql": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
      "pred_sql": "SELECT CAST(\n  (SELECT SUM(`amount`)\n    FROM loan\n    WHERE `amount` < 100000\n    AND `status` = 'C') AS REAL) / \n  (SELECT SUM(`amount`)\n    FROM loan\n    WHERE `amount` < 100000) * 100",
      "execution_time": 13.805225,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "formula_1",
      "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
      "evidence": "Spanish Grand Prix is the name of race refers to name = 'Spanish Grand Prix'; average fastest lap speed refers to avg(fastestLapSpeed);",
      "gold_sql": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
      "pred_sql": "SELECT AVG(T1.`fastestLapSpeed`)\n  FROM results AS T1\n  WHERE T1.`raceId` = (\n    SELECT T2.`raceId`\n    FROM races AS T2\n    WHERE T2.`year` = 2009\n    AND T2.`name` = 'Spanish Grand Prix'\n  )\n  AND T1.`fastestLapSpeed` IS NOT NULL",
      "execution_time": 31.295323,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0020024776458740234,
      "pred_time": 0.001001596450805664
    },
    {
      "db_id": "california_schools",
      "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
      "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
      "gold_sql": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
      "pred_sql": "SELECT `School`, `DOCType`\nFROM (\n  SELECT T3.`School`, T3.`DOCType`,\n  T1.`enroll12` - T2.`Enrollment (Ages 5-17)` AS diff,\n  AVG(T1.`enroll12` - T2.`Enrollment (Ages 5-17)`) OVER () AS avg_diff\n  FROM satscores AS T1\n  INNER JOIN frpm AS T2\n  ON T1.`cds` = T2.`CDSCode`\n  INNER JOIN schools AS T3\n  ON T1.`cds` = T3.`CDSCode`\n  WHERE T3.`FundingType` = 'Locally funded'\n) AS subquery\nWHERE diff > avg_diff",
      "execution_time": 24.471455,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.014013290405273438,
      "pred_time": 0.0070056915283203125
    },
    {
      "db_id": "codebase_community",
      "question": "How many comments were added to the post with the highest score?",
      "evidence": "the highest score refers to MAX(Score);",
      "gold_sql": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY T1.Score DESC LIMIT 1",
      "pred_sql": "SELECT COUNT(T1.`Id`)\n  FROM comments AS T1\n  WHERE T1.`PostId` = (\n    SELECT `Id`\n    FROM posts\n    ORDER BY `Score` DESC\n    LIMIT 1\n  )",
      "execution_time": 27.579003,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.2081892490386963,
      "pred_time": 0.11610627174377441
    },
    {
      "db_id": "toxicology",
      "question": "Find the triple-bonded molecules which are carcinogenic.",
      "evidence": "triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+'",
      "gold_sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
      "pred_sql": "SELECT T2.`label`\n  FROM bond AS T1\n  INNER JOIN molecule AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T1.`bond_type` = '#'\n  AND T2.`label` = '+'\n  LIMIT 1",
      "execution_time": 8.190175,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010008811950683594,
      "pred_time": 0.0
    },
    {
      "db_id": "financial",
      "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
      "evidence": "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'",
      "gold_sql": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
      "pred_sql": "SELECT \n  CASE \n    WHEN amount_1996 = 0 THEN NULL\n    ELSE ((amount_1997 - amount_1996) / amount_1996) * 100\n  END AS growth_rate\nFROM (\n  SELECT \n    SUM(CASE WHEN STRFTIME('%Y', T2.`date`) = '1996' THEN T2.`amount` ELSE 0 END) AS amount_1996,\n    SUM(CASE WHEN STRFTIME('%Y', T2.`date`) = '1997' THEN T2.`amount` ELSE 0 END) AS amount_1997\n  FROM client AS T1\n  INNER JOIN disp AS T3\n  ON T1.`client_id` = T3.`client_id`\n  INNER JOIN account AS T4\n  ON T3.`account_id` = T4.`account_id`\n  INNER JOIN loan AS T2\n  ON T4.`account_id` = T2.`account_id`\n  WHERE T1.`gender` = 'M'\n) AS T",
      "execution_time": 29.184875,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010020732879638672,
      "pred_time": 0.0010020732879638672
    },
    {
      "db_id": "debit_card_specializing",
      "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
      "evidence": "ratio of customers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK').",
      "gold_sql": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers",
      "pred_sql": "SELECT CASE \n  WHEN (SELECT COUNT(*) FROM customers WHERE Currency = 'CZK') > 0 THEN \n    CAST(\n      (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR') AS REAL\n    ) / \n    (SELECT COUNT(*) FROM customers WHERE Currency = 'CZK')\n  ELSE NULL\nEND",
      "execution_time": 17.670914,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.002002716064453125,
      "pred_time": 0.0030024051666259766
    },
    {
      "db_id": "european_football_2",
      "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
      "evidence": "average number of long shot = DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id));",
      "gold_sql": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
      "pred_sql": "SELECT CAST(SUM(T2.`long_shots`) AS REAL) / COUNT(T2.`player_fifa_api_id`)\n  FROM Player AS T1\n  INNER JOIN Player_Attributes AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T1.`player_name` = 'Ahmed Samir Farag'",
      "execution_time": 62.614655,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.09008216857910156,
      "pred_time": 0.08708000183105469
    },
    {
      "db_id": "student_club",
      "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
      "evidence": "name of events refers to event_name; attendance of over 20 students COUNT(event_id) > 20.",
      "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'",
      "pred_sql": "SELECT T1.`event_name`\n  FROM event AS T1\n  INNER JOIN (\n    SELECT `link_to_event`\n      FROM attendance\n      GROUP BY `link_to_event`\n      HAVING COUNT(`link_to_event`) > 20\n  ) AS T2\n  ON T1.`event_id` = T2.`link_to_event`\n  LEFT JOIN event AS T3\n  ON T1.`event_id` = T3.`event_id` AND T3.`type` = 'Fundraising'\n  WHERE T3.`event_id` IS NULL",
      "execution_time": 59.132146,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.001001119613647461,
      "pred_time": 0.0
    },
    {
      "db_id": "superhero",
      "question": "Who is the dumbest superhero?",
      "evidence": "the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'",
      "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
      "pred_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN hero_attribute AS T2\n  ON T1.`id` = T2.`hero_id`\n  INNER JOIN attribute AS T3\n  ON T2.`attribute_id` = T3.`id`\n  WHERE T3.`attribute_name` = 'Intelligence'\n  ORDER BY T2.`attribute_value` ASC\n  LIMIT 1",
      "execution_time": 25.598513,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "european_football_2",
      "question": "List down most tallest players' name.",
      "evidence": "tallest refers to rank based on the height in descending order; Most tallest players refers to rank = 1 ",
      "gold_sql": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1",
      "pred_sql": "SELECT player_name\n  FROM Player\n  ORDER BY height DESC\n  LIMIT 1",
      "execution_time": 48.081808,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.009007692337036133,
      "pred_time": 0.0010018348693847656
    },
    {
      "db_id": "superhero",
      "question": "Identify superheroes who can control wind and list their names in alphabetical order.",
      "evidence": "superheroes refers to superhero_name; can control wind refers to power_name = 'Wind Control';",
      "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name",
      "pred_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN hero_power AS T2\n  ON T1.`id` = T2.`hero_id`\n  INNER JOIN superpower AS T3\n  ON T2.`power_id` = T3.`id`\n  WHERE T3.`power_name` = 'Wind Control'\n  ORDER BY T1.`superhero_name` ASC",
      "execution_time": 11.617423,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0010008811950683594
    },
    {
      "db_id": "student_club",
      "question": "Indicate the top source of funds received in September 2019 based on their amount.",
      "evidence": "top source funds refers to MAX(source); September 2019 means date_received BETWEEN '2019-09-01' and '2019-09-30'",
      "gold_sql": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1",
      "pred_sql": "SELECT `source`\n  FROM (\n    SELECT `source`, SUM(`amount`) AS total_amount\n    FROM income\n    WHERE `date_received` BETWEEN '2019-09-01' AND '2019-09-30'\n    GROUP BY `source`\n  ) AS subquery\n  ORDER BY total_amount DESC\n  LIMIT 1",
      "execution_time": 15.178014,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "debit_card_specializing",
      "question": "Please list the product description of the products consumed in September, 2013.",
      "evidence": "September 2013 refers to 201309; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
      "gold_sql": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'",
      "pred_sql": "SELECT T3.`Description`\n  FROM yearmonth AS T1\n  INNER JOIN transactions_1k AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  INNER JOIN products AS T3\n  ON T2.`ProductID` = T3.`ProductID`\n  WHERE SUBSTR(T1.`Date`, 1, 6) = '201309'",
      "execution_time": 8.479153,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.001001596450805664,
      "pred_time": 0.03503155708312988
    },
    {
      "db_id": "formula_1",
      "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
      "evidence": "shortest lap time refers to MIN(time); the time format for the shortest lap time is 'MM:SS.mmm' or 'M:SS.mmm'; full name of the driver refers to forename, surname",
      "gold_sql": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
      "pred_sql": "SELECT T1.`forename`, T1.`surname` \nFROM drivers AS T1\nWHERE T1.`driverId` IN (\n  SELECT T2.`driverId` \n  FROM lapTimes AS T2\n  WHERE T2.`milliseconds` = (\n    SELECT MIN(T3.`milliseconds`) \n    FROM lapTimes AS T3\n  )\n  ORDER BY T2.`milliseconds` ASC \n  LIMIT 20\n)",
      "execution_time": 18.718281,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.30027294158935547,
      "pred_time": 0.044039249420166016
    },
    {
      "db_id": "formula_1",
      "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
      "evidence": "average lap time = AVG(milliseconds); 'Lewis Hamilton' refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; 'Malaysian Grand Prix' refers to races.name = 'Malaysian Grand Prix'",
      "gold_sql": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
      "pred_sql": "SELECT AVG(T3.`milliseconds`)\n  FROM drivers AS T1\n  INNER JOIN lapTimes AS T3\n  ON T1.`driverId` = T3.`driverId`\n  INNER JOIN races AS T2\n  ON T3.`raceId` = T2.`raceId`\n  WHERE T1.`forename` = 'Lewis' AND T1.`surname` = 'Hamilton'\n  AND T2.`year` = 2009 AND T2.`name` = 'Malaysian Grand Prix'",
      "execution_time": 27.07455,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.03202939033508301,
      "pred_time": 0.0320284366607666
    },
    {
      "db_id": "formula_1",
      "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
      "evidence": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010",
      "gold_sql": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
      "pred_sql": "SELECT T1.`points`, T2.`name`, T2.`nationality`\n  FROM constructorResults AS T1\n  INNER JOIN constructors AS T2\n  ON T1.`constructorId` = T2.`constructorId`\n  INNER JOIN races AS T3\n  ON T1.`raceId` = T3.`raceId`\n  WHERE T3.`name` = 'Monaco Grand Prix'\n  AND T3.`year` BETWEEN 1980 AND 2010\n  ORDER BY T1.`points` DESC\n  LIMIT 1",
      "execution_time": 33.303992,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010008811950683594,
      "pred_time": 0.0010008811950683594
    },
    {
      "db_id": "card_games",
      "question": "How many unknown power cards contain info about the triggered ability",
      "evidence": "unknown power cards refers to power is null or power = '*';contain info about the triggered ability refers to text contains 'triggered ability'",
      "gold_sql": "SELECT Count(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'",
      "pred_sql": "SELECT COUNT(T1.id)\n  FROM cards AS T1\n  WHERE (T1.power IS NULL OR T1.power = '*')\n  AND T1.text LIKE '%triggered ability%'",
      "execution_time": 43.387232,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.07206559181213379,
      "pred_time": 0.05605149269104004
    },
    {
      "db_id": "codebase_community",
      "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
      "evidence": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
      "gold_sql": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
      "pred_sql": "-- Script type: SQLite\nSELECT CAST(\n  SUM(CASE WHEN T1.`Id` IN (SELECT T2.`ExcerptPostId` FROM tags AS T2 WHERE T2.`TagName` = 'r') THEN 1 ELSE 0 END) AS REAL) / \n  COUNT(T1.`Id`) * 100 AS percentage\nFROM posts AS T1\nWHERE T1.`OwnerDisplayName` = 'Community' AND T1.`OwnerDisplayName` IS NOT NULL",
      "execution_time": 75.27461,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.2672433853149414,
      "pred_time": 0.08107304573059082
    },
    {
      "db_id": "card_games",
      "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
      "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; designed by Adam refers to artist = 'Adam Rex'",
      "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
      "pred_sql": "SELECT COUNT(T1.`id`)\n  FROM cards AS T1\n  INNER JOIN sets AS T2\n  ON T1.`setCode` = T2.`code`\n  INNER JOIN set_translations AS T3\n  ON T2.`code` = T3.`setCode`\n  WHERE T3.`translation` = 'Hauptset Zehnte Edition'\n  AND T1.`artist` = 'Adam Rex'",
      "execution_time": 14.228702,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.042037010192871094,
      "pred_time": 0.04103732109069824
    },
    {
      "db_id": "financial",
      "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
      "evidence": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'",
      "gold_sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
      "pred_sql": "SELECT T1.`A2`, ((T1.`A13` - T1.`A12`) / T1.`A12`) * 100 AS unemployment_rate_increment\n  FROM district AS T1\n  INNER JOIN account AS T2\n  ON T1.`district_id` = T2.`district_id`\n  INNER JOIN loan AS T3\n  ON T2.`account_id` = T3.`account_id`\n  WHERE T3.`status` = 'D'",
      "execution_time": 21.979434,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.0010013580322265625,
      "pred_time": 0.0
    },
    {
      "db_id": "debit_card_specializing",
      "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
      "evidence": "",
      "gold_sql": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
      "pred_sql": "SELECT DISTINCT T1.`Time`\n  FROM transactions_1k AS T1\n  INNER JOIN gasstations AS T2\n  ON T1.`GasStationID` = T2.`GasStationID`\n  WHERE T2.`ChainID` = 11",
      "execution_time": 16.543977,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0010008811950683594,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
      "evidence": "abnormal Ig M level refers to IGM <=40 OR IGM >= 400; most common disease refers to MAX(COUNT(Diagnosis));",
      "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1",
      "pred_sql": "SELECT `Diagnosis`\n  FROM (\n    SELECT T2.`Diagnosis`, COUNT(T2.`Diagnosis`) AS `count`\n    FROM Laboratory AS T1\n    INNER JOIN Patient AS T2\n    ON T1.`ID` = T2.`ID`\n    WHERE T1.`IGM` <= 40 OR T1.`IGM` >= 400\n    GROUP BY T2.`Diagnosis`\n  ) AS T\n  WHERE `count` = (\n    SELECT MAX(`count`)\n    FROM (\n      SELECT T2.`Diagnosis`, COUNT(T2.`Diagnosis`) AS `count`\n      FROM Laboratory AS T1\n      INNER JOIN Patient AS T2\n      ON T1.`ID` = T2.`ID`\n      WHERE T1.`IGM` <= 40 OR T1.`IGM` >= 400\n      GROUP BY T2.`Diagnosis`\n    ) AS T\n  )",
      "execution_time": 19.095647,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.003002643585205078,
      "pred_time": 0.0030028820037841797
    },
    {
      "db_id": "toxicology",
      "question": "Which type of label is the most numerous in atoms with hydrogen?",
      "evidence": "with hydrogen refers to element = 'h'; label most numerous in atoms refers to MAX(COUNT(label)); ",
      "gold_sql": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t",
      "pred_sql": "SELECT `label`\n  FROM (\n    SELECT T2.`label`, COUNT(T2.`label`) AS `count`\n    FROM atom AS T1\n    INNER JOIN molecule AS T2\n    ON T1.`molecule_id` = T2.`molecule_id`\n    WHERE T1.`element` = 'h'\n    GROUP BY T2.`label`\n  ) AS T\n  WHERE `count` = (\n    SELECT MAX(`count`)\n    FROM (\n      SELECT T2.`label`, COUNT(T2.`label`) AS `count`\n      FROM atom AS T1\n      INNER JOIN molecule AS T2\n      ON T1.`molecule_id` = T2.`molecule_id`\n      WHERE T1.`element` = 'h'\n      GROUP BY T2.`label`\n    ) AS T\n  )",
      "execution_time": 7.429434,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0009999275207519531,
      "pred_time": 0.0030028820037841797
    },
    {
      "db_id": "debit_card_specializing",
      "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
      "evidence": "",
      "gold_sql": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations",
      "pred_sql": "SELECT CAST(\n  (SELECT COUNT(*) \n   FROM gasstations \n   WHERE Country = 'SVK' AND Segment = 'Premium') AS REAL) / \n  (SELECT COUNT(*) \n   FROM gasstations \n   WHERE Country = 'SVK') * 100",
      "execution_time": 6.331466,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.001001119613647461
    },
    {
      "db_id": "toxicology",
      "question": "Is the molecule with the most double bonds carcinogenic?",
      "evidence": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic",
      "gold_sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id",
      "pred_sql": "SELECT CASE \n  WHEN T2.`label` = '+' THEN 'Yes'\n  ELSE 'No'\nEND AS carcinogenic\n  FROM bond AS T1\n  INNER JOIN molecule AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T1.`bond_type` = '='\n  GROUP BY T1.`molecule_id`\n  ORDER BY COUNT(T1.`molecule_id`) DESC\n  LIMIT 1",
      "execution_time": 5.921839,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.001001119613647461,
      "pred_time": 0.0
    },
    {
      "db_id": "student_club",
      "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
      "evidence": "list all members means to list all the full name; full name refers to first_name, last_name;",
      "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
      "pred_sql": "SELECT T1.`first_name`, T1.`last_name`\n  FROM member AS T1\n  INNER JOIN major AS T2\n  ON T1.`link_to_major` = T2.`major_id`\n  WHERE T2.`department` = 'School of Applied Sciences, Technology and Education'",
      "execution_time": 20.366021,
      "execution_match": true,
      "exact_match": true,
      "gold_time": 0.0,
      "pred_time": 0.0
    },
    {
      "db_id": "codebase_community",
      "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
      "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
      "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
      "pred_sql": "SELECT T2.`Id`, T2.`ViewCount`, T1.`DisplayName`\n  FROM users AS T1\n  INNER JOIN posts AS T2\n  ON T1.`Id` = T2.`OwnerUserId`\n  WHERE T1.`DisplayName` IN ('Harvey Motulsky', 'Noah Snyder')\n  ORDER BY T2.`ViewCount` DESC\n  LIMIT 1",
      "execution_time": 40.779133,
      "execution_match": false,
      "exact_match": false,
      "gold_time": 0.27324891090393066,
      "pred_time": 0.1631481647491455
    },
    {
      "db_id": "student_club",
      "question": "List the name of students that have attended more than 7 events.",
      "evidence": "name of students means the full name; full name refers to first_name, last_name; attended more than 7 events refers to COUNT(link_to_event) > 7",
      "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7",
      "pred_sql": "SELECT T1.`first_name`, T1.`last_name`\n  FROM member AS T1\n  INNER JOIN attendance AS T2\n  ON T1.`member_id` = T2.`link_to_member`\n  GROUP BY T1.`first_name`, T1.`last_name`\n  HAVING COUNT(T2.`link_to_event`) > 7",
      "execution_time": 20.904176,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0,
      "pred_time": 0.001001119613647461
    },
    {
      "db_id": "student_club",
      "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
      "evidence": "percentage = DIVIDE(SUM(cost where event_name = 'Yearly Kickoff'), SUM(cost)) * 100",
      "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
      "pred_sql": "SELECT \n  (CAST(SUM(CASE WHEN T1.`event_name` = 'Yearly Kickoff' THEN T2.`cost` ELSE 0 END) AS REAL) / \n   SUM(T2.`cost`)) * 100 AS percentage\n  FROM event AS T1\n  INNER JOIN budget AS T3\n  ON T1.`event_id` = T3.`link_to_event`\n  INNER JOIN expense AS T2\n  ON T3.`budget_id` = T2.`link_to_budget`",
      "execution_time": 16.861958,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.0010004043579101562,
      "pred_time": 0.0
    },
    {
      "db_id": "thrombosis_prediction",
      "question": "What is the average age of the male patient with high cholesterol?",
      "evidence": "average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID)); male patient refers to sex = 'M'; high cholesterol refers to `T-CHO` > = 250;",
      "gold_sql": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
      "pred_sql": "SELECT AVG(STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.`Birthday`)) AS average_age\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`SEX` = 'M'\n  AND T2.`T-CHO` >= 250",
      "execution_time": 30.037202,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.002002239227294922,
      "pred_time": 0.0010013580322265625
    },
    {
      "db_id": "european_football_2",
      "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
      "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League'; in April, 2009 refers to SUBSTR(`date`, 1, 7);",
      "gold_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 7) = '2009-04'",
      "pred_sql": "SELECT COUNT(`id`)\n  FROM Match\n  WHERE SUBSTR(`date`, 1, 7) = '2009-04'\n  AND `league_id` = (\n    SELECT `id`\n    FROM League\n    WHERE `name` = 'Belgium Jupiler League'\n  )",
      "execution_time": 49.480374,
      "execution_match": true,
      "exact_match": false,
      "gold_time": 0.04504108428955078,
      "pred_time": 0.04404020309448242
    }
  ]
}