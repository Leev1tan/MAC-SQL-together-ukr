{
  "overall_metrics": {
    "exact_match": 0.0,
    "execution_accuracy": 0.64,
    "valid_efficiency_score": 2984.9459806384416
  },
  "results": [
    {
      "db_id": "pets_1",
      "question": "Find the last name of the student who has a cat that is age 3.",
      "predicted_sql": "SELECT S.LName\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'cat' AND P.pet_age = 3;",
      "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Smith',)]",
        "gold_result": "[('Smith',)]"
      }
    },
    {
      "db_id": "car_1",
      "question": "What is the average edispl for all volvos?",
      "predicted_sql": "SELECT AVG(cds.Edispl) AS AverageEdispl\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nJOIN car_names cn ON ml.Model = cn.Model\nJOIN cars_data cds ON cn.MakeId = cds.Id\nWHERE cm.Maker = 'volvo';",
      "gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(133.5,)]",
        "gold_result": "[(133.5,)]"
      }
    },
    {
      "db_id": "world_1",
      "question": "how many countries are in Asia?",
      "predicted_sql": "SELECT COUNT(Code) \nFROM country \nWHERE Continent = 'Asia';",
      "gold_sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(51,)]",
        "gold_result": "[(51,)]"
      }
    },
    {
      "db_id": "car_1",
      "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
      "predicted_sql": "SELECT cn.Make, MAX(cd.Horsepower) AS MaxHorsepower\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cd.Cylinders = 3",
      "gold_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('mazda rx2 coupe', '97')]",
        "gold_result": "[('97', 'mazda rx2 coupe')]"
      }
    },
    {
      "db_id": "orchestra",
      "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
      "predicted_sql": "SELECT Record_Company\nFROM orchestra\nGROUP BY Record_Company\nORDER BY MAX(Year_of_Founded) DESC;",
      "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('Columbia Masterworks',), ('RCA',), ('Philips Classics Records',), ('Philips',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',)]",
        "gold_result": "[('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',)]"
      }
    },
    {
      "db_id": "flight_2",
      "question": "What are airlines that have some flight departing from airport 'AHD'?",
      "predicted_sql": "SELECT DISTINCT T1.Airline\nFROM airlines AS T1\nJOIN flights AS T2\nON T1.Airline = T2.Airline\nWHERE T2.SourceAirport = 'AHD';",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[]",
        "gold_result": "[]"
      }
    },
    {
      "db_id": "dog_kennels",
      "question": "What are each professional's first name and description of the treatment they have performed?",
      "predicted_sql": "SELECT DISTINCT \n    P.first_name, \n    TT.treatment_type_description\nFROM \n    Professionals P\nJOIN \n    Treatments T ON P.professional_id = T.professional_id\nJOIN \n    Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination')]",
        "gold_result": "[('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination')]"
      }
    },
    {
      "db_id": "car_1",
      "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
      "predicted_sql": "SELECT DISTINCT cn.Model\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nJOIN model_list ml ON cn.Model = ml.ModelId\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cd.Weight < 3500 AND cm.Maker != 'Ford'",
      "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[]",
        "gold_result": "[('plymouth',), ('amc',), ('citroen',), ('buick',), ('toyota',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',)]"
      }
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are all different template ids used for documents, and how many times were each of them used?",
      "predicted_sql": "SELECT \n    Template_ID, \n    COUNT(Template_ID) AS Usage_Count\nFROM \n    Documents\nGROUP BY \n    Template_ID;",
      "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1)]",
        "gold_result": "[(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1)]"
      }
    },
    {
      "db_id": "wta_1",
      "question": "What are the names of tournaments that have more than 10 matches?",
      "predicted_sql": "SELECT tourney_name\nFROM matches\nGROUP BY tourney_name\nHAVING COUNT(match_num) > 10;",
      "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Australian Open',), ('Cincinnati',), ('French Open',), ('Indian Wells',), ('Miami',), ('Singapore',), ('Us Open',), ('WTA Championships',), ('Wimbledon',)]",
        "gold_result": "[('Australian Open',), ('Cincinnati',), ('French Open',), ('Indian Wells',), ('Miami',), ('Singapore',), ('Us Open',), ('WTA Championships',), ('Wimbledon',)]"
      }
    },
    {
      "db_id": "singer",
      "question": "What is the sname of every sing that does not have any song?",
      "predicted_sql": "SELECT s.Name\nFROM singer s\nLEFT JOIN song sg ON s.Singer_ID = sg.Singer_ID\nWHERE sg.Singer_ID IS NULL;",
      "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Alice Walton',), ('Abigail Johnson',)]",
        "gold_result": "[('Alice Walton',), ('Abigail Johnson',)]"
      }
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Return the template type description of the template type with the code AD.",
      "predicted_sql": "SELECT Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD';",
      "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Advertisement',)]",
        "gold_result": "[('Advertisement',)]"
      }
    },
    {
      "db_id": "tvshow",
      "question": "find id of the tv channels that from the countries where have more than two tv channels.",
      "predicted_sql": "SELECT id\nFROM TV_Channel\nWHERE Country IN (\n  SELECT Country\n  FROM TV_Channel\n  GROUP BY Country\n  HAVING COUNT(id) > 2\n);",
      "gold_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('700',), ('701',), ('703',), ('704',), ('705',), ('708',), ('713',), ('714',), ('715',), ('717',)]",
        "gold_result": "[('700',)]"
      }
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
      "predicted_sql": "SELECT DISTINCT S.last_name\nFROM Students S\nWHERE S.student_id NOT IN (\n  SELECT SE.student_id\n  FROM Student_Enrolment SE\n)\nAND (\n  S.current_address_id IN (\n    SELECT A.address_id\n    FROM Addresses A\n    WHERE A.state_province_county = 'North Carolina'\n  )\n  OR S.permanent_address_id IN (\n    SELECT A.address_id\n    FROM Addresses A\n    WHERE A.state_province_county = 'North Carolina'\n  )\n)",
      "gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[]",
        "gold_result": "[('Gleichner',), ('Weimann',)]"
      }
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids of templates with template type code PP or PPT?",
      "predicted_sql": "SELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code IN ('PP', 'PPT');",
      "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(0,), (1,), (6,), (7,), (10,), (18,), (22,), (24,), (25,)]",
        "gold_result": "[(0,), (1,), (6,), (7,), (10,), (18,), (22,), (24,), (25,)]"
      }
    },
    {
      "db_id": "flight_2",
      "question": "Count the number of flights departing from 'APG'.",
      "predicted_sql": "SELECT COUNT(*) \nFROM flights \nWHERE SourceAirport = 'APG';",
      "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(0,)]",
        "gold_result": "[(0,)]"
      }
    },
    {
      "db_id": "world_1",
      "question": "Give the language that is spoken in the most countries.",
      "predicted_sql": "SELECT Language\nFROM countrylanguage\nGROUP BY Language\nORDER BY COUNT(DISTINCT CountryCode) DESC\nLIMIT 1;",
      "gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('English',)]",
        "gold_result": "[('English',)]"
      }
    },
    {
      "db_id": "world_1",
      "question": "What are the names of the nations with the 3 lowest populations?",
      "predicted_sql": "SELECT Name \nFROM country \nORDER BY Population ASC \nLIMIT 3;",
      "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Antarctica',), ('French Southern territories',), ('Bouvet Island',)]",
        "gold_result": "[('Antarctica',), ('French Southern territories',), ('Bouvet Island',)]"
      }
    },
    {
      "db_id": "wta_1",
      "question": "Find the first name and country code of the oldest player.",
      "predicted_sql": "SELECT first_name, country_code\nFROM players\nWHERE birth_date = (SELECT MIN(birth_date) FROM players WHERE birth_date IS NOT NULL);",
      "gold_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Thelma', 'AUS')]",
        "gold_result": "[('Thelma', 'AUS')]"
      }
    },
    {
      "db_id": "poker_player",
      "question": "Give average earnings of poker players who are taller than 200.",
      "predicted_sql": "SELECT AVG(pp.Earnings) AS AverageEarnings\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE p.Height > 200;",
      "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(309445.0,)]",
        "gold_result": "[(309445.0,)]"
      }
    },
    {
      "db_id": "world_1",
      "question": "Give the total surface area covered by countries in Asia or Europe.",
      "predicted_sql": "SELECT SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'Asia' OR Continent = 'Europe';",
      "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(54930138.9,)]",
        "gold_result": "[(54930138.9,)]"
      }
    },
    {
      "db_id": "wta_1",
      "question": "Find the highest rank of losers in all matches.",
      "predicted_sql": "SELECT MAX(loser_rank) AS highest_rank\nFROM matches\nWHERE loser_rank IS NOT NULL;",
      "gold_sql": "SELECT min(loser_rank) FROM matches",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[(112,)]",
        "gold_result": "[(1,)]"
      }
    },
    {
      "db_id": "world_1",
      "question": "Count the number of countries in Asia.",
      "predicted_sql": "SELECT COUNT(Code) \nFROM country \nWHERE Continent = 'Asia';",
      "gold_sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(51,)]",
        "gold_result": "[(51,)]"
      }
    },
    {
      "db_id": "wta_1",
      "question": "What are the first names of all players, and their average rankings?",
      "predicted_sql": "SELECT \n    p.first_name, \n    AVG(r.ranking) AS average_ranking\nFROM \n    players p\nJOIN \n    rankings r ON p.player_id = r.player_id\nGROUP BY \n    p.first_name\nORDER BY \n    average_ranking ASC;",
      "gold_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('Serena', 14.654294803817603), ('Venus', 32.984862819299906), ('Na', 82.13112391930835), ('Kimiko', 95.03465982028241), ('Jie', 114.05571428571429), ('Yayuk', 114.78806907378336), ('Iveta', 117.95684523809524), ('Tamarine', 121.82273948075202), ('Jill', 121.9579326923077), ('Agnieszka', 122.19587628865979)]",
        "gold_result": "[(1199.8235294117646, 'Aastha'), (1110.0434782608695, 'Abbi'), (808.4545454545455, 'Abbie'), (387.66706161137444, 'Abigail'), (1039.6744186046512, 'Abiodun'), (1228.75, 'Abir'), (790.1538461538462, 'Adeliya'), (1122.4423076923076, 'Adnya'), (619.6814159292036, 'Adriana'), (1213.1666666666667, 'Adrienn')]"
      }
    },
    {
      "db_id": "network_1",
      "question": "Find the average grade of all students who have some friends.",
      "predicted_sql": "SELECT AVG(H.grade) AS average_grade\nFROM Highschooler H\nWHERE H.ID IN (\n  SELECT F.student_id\n  FROM Friend F\n  UNION\n  SELECT F.friend_id\n  FROM Friend F\n)",
      "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[(10.5,)]",
        "gold_result": "[(10.428571428571429,)]"
      }
    },
    {
      "db_id": "flight_2",
      "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
      "predicted_sql": "SELECT F.FlightNo \nFROM flights F \nJOIN airports A ON F.DestAirport = A.AirportCode \nWHERE A.City = 'Aberdeen';",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[]",
        "gold_result": "[]"
      }
    },
    {
      "db_id": "orchestra",
      "question": "What is the name of the conductor who has worked the greatest number of years?",
      "predicted_sql": "SELECT Name\nFROM conductor\nWHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);",
      "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Robert Craft',)]",
        "gold_result": "[('Robert Craft',)]"
      }
    },
    {
      "db_id": "wta_1",
      "question": "What are the full names of all players, sorted by birth date?",
      "predicted_sql": "SELECT first_name || ' ' || last_name AS full_name, birth_date\nFROM players\nWHERE birth_date IS NOT NULL\nORDER BY birth_date ASC;",
      "gold_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[]",
        "gold_result": "[]"
      }
    },
    {
      "db_id": "network_1",
      "question": "Return the grade that has the greatest number of high schoolers.",
      "predicted_sql": "SELECT grade\nFROM Highschooler\nGROUP BY grade\nORDER BY COUNT(*) DESC\nLIMIT 1;",
      "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(12,)]",
        "gold_result": "[(12,)]"
      }
    },
    {
      "db_id": "dog_kennels",
      "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
      "predicted_sql": "SELECT DISTINCT P.first_name, P.last_name\nFROM Professionals P\nJOIN (\n  SELECT professional_id\n  FROM Treatments\n  WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)\n) T ON P.professional_id = T.professional_id;",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('Domenica', 'Jacobs'), ('Vernice', 'Tillman'), ('Karley', 'Hyatt'), ('Ruben', \"O'Reilly\"), ('Monte', 'Kshlerin')]",
        "gold_result": "[('Taryn', 'Braun'), ('Jayson', 'Ullrich'), ('Olaf', 'Watsica'), ('Vernice', 'Tillman'), ('Danny', 'Considine'), ('Ruben', \"O'Reilly\"), ('Velva', 'Hayes'), ('Karley', 'Hyatt'), ('Monte', 'Kshlerin'), ('Domenica', 'Jacobs')]"
      }
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
      "predicted_sql": "SELECT \n    D.Document_ID, \n    COUNT(P.Paragraph_ID) AS Number_of_Paragraphs\nFROM \n    Documents D\nLEFT JOIN \n    Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n    D.Document_ID\nORDER BY \n    D.Document_ID ASC;",
      "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[(0, 0), (1, 0), (3, 1), (76, 0), (80, 2), (82, 0), (2394, 3), (3830, 1), (33930, 1), (50123, 1)]",
        "gold_result": "[(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]"
      }
    },
    {
      "db_id": "orchestra",
      "question": "Return the names of conductors that do not have the nationality \"USA\".",
      "predicted_sql": "SELECT Name\nFROM conductor\nWHERE Nationality != 'USA';",
      "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]",
        "gold_result": "[('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]"
      }
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of flights.",
      "predicted_sql": "SELECT COUNT(*) \nFROM flights;",
      "gold_sql": "SELECT count(*) FROM FLIGHTS",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(1200,)]",
        "gold_result": "[(1200,)]"
      }
    },
    {
      "db_id": "car_1",
      "question": "What is the average weight and year for each year?",
      "predicted_sql": "SELECT \n  Year, \n  AVG(Weight) AS AverageWeight\nFROM \n  cars_data\nGROUP BY \n  Year\nORDER BY \n  Year ASC;",
      "gold_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[(1970, 3441.3142857142857), (1971, 2960.344827586207), (1972, 3237.714285714286), (1973, 3419.025), (1974, 2877.925925925926), (1975, 3176.8), (1976, 3078.735294117647), (1977, 2997.3571428571427), (1978, 2861.8055555555557), (1979, 3055.344827586207)]",
        "gold_result": "[(3441.3142857142857, 1970), (2960.344827586207, 1971), (3237.714285714286, 1972), (3419.025, 1973), (2877.925925925926, 1974), (3176.8, 1975), (3078.735294117647, 1976), (2997.3571428571427, 1977), (2861.8055555555557, 1978), (3055.344827586207, 1979)]"
      }
    },
    {
      "db_id": "pets_1",
      "question": "Find the average and maximum age for each type of pet.",
      "predicted_sql": "SELECT \n    PetType,\n    AVG(pet_age) AS AverageAge,\n    MAX(pet_age) AS MaximumAge\nFROM \n    Pets\nGROUP BY \n    PetType;",
      "gold_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('cat', 3.0, 3), ('dog', 1.5, 2)]",
        "gold_result": "[(3.0, 3, 'cat'), (1.5, 2, 'dog')]"
      }
    },
    {
      "db_id": "flight_2",
      "question": "How many airports do we have?",
      "predicted_sql": "SELECT COUNT(*) \n   FROM airports;",
      "gold_sql": "SELECT count(*) FROM AIRPORTS",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(100,)]",
        "gold_result": "[(100,)]"
      }
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What are the names and descriptions of all the sections?",
      "predicted_sql": "SELECT section_name, section_description\nFROM Sections;",
      "gold_sql": "SELECT section_name ,  section_description FROM Sections",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt')]",
        "gold_result": "[('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt')]"
      }
    },
    {
      "db_id": "network_1",
      "question": "Give the name of the student with the most likes.",
      "predicted_sql": "SELECT H1.name\nFROM Highschooler H1\nJOIN (\n  SELECT L.liked_id, COUNT(L.liked_id) as like_count\n  FROM Likes L\n  GROUP BY L.liked_id\n) L1 ON H1.ID = L1.liked_id\nORDER BY L1.like_count DESC\nLIMIT 1;",
      "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('Kris',)]",
        "gold_result": "[('John',)]"
      }
    },
    {
      "db_id": "world_1",
      "question": "Which African countries have a smaller population than that of any country in Asia?",
      "predicted_sql": "SELECT Name\nFROM country\nWHERE Continent = 'Africa'\nAND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');",
      "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('British Indian Ocean Territory',), ('Mayotte',), ('Saint Helena',), ('Sao Tome and Principe',), ('Seychelles',)]",
        "gold_result": "[('British Indian Ocean Territory',), ('Mayotte',), ('Saint Helena',), ('Sao Tome and Principe',), ('Seychelles',)]"
      }
    },
    {
      "db_id": "battle_death",
      "question": "List the name, date and result of each battle.",
      "predicted_sql": "SELECT name, date, result\nFROM battle;",
      "gold_sql": "SELECT name ,  date FROM battle",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('Battle of Adrianople', '14 April 1205', 'Bulgarian victory'), ('Battle of Serres', 'June 1205', 'Bulgarian victory'), ('Battle of Rusion', '31 January 1206', 'Bulgarian victory'), ('Battle of Rodosto', 'February 1206', 'Bulgarian victory'), ('Battle of Messinopolis', '4 September 1207', 'Bulgarian victory'), ('Battle of Boruy', 'June 1205', 'Bulgarian victory'), ('Battle of Philippopolis', '31 June 1208', 'Latin victory'), ('Siege of Constantinople', '1235', 'Two Year Truce')]",
        "gold_result": "[('Battle of Adrianople', '14 April 1205'), ('Battle of Serres', 'June 1205'), ('Battle of Rusion', '31 January 1206'), ('Battle of Rodosto', 'February 1206'), ('Battle of Messinopolis', '4 September 1207'), ('Battle of Boruy', 'June 1205'), ('Battle of Philippopolis', '31 June 1208'), ('Siege of Constantinople', '1235')]"
      }
    },
    {
      "db_id": "course_teach",
      "question": "What are the names of the teachers who are aged either 32 or 33?",
      "predicted_sql": "SELECT Name\nFROM teacher\nWHERE Age IN ('32', '33');",
      "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Joseph Huts',), ('John Deloor',)]",
        "gold_result": "[('Joseph Huts',), ('John Deloor',)]"
      }
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Show all template type codes and the number of documents using each type.",
      "predicted_sql": "SELECT \n  RTT.Template_Type_Code, \n  COUNT(D.Document_ID) AS Number_of_Documents\nFROM \n  Ref_Template_Types RTT\n  JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code\n  JOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY \n  RTT.Template_Type_Code\nORDER BY \n  RTT.Template_Type_Code ASC;",
      "gold_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('AD', 3), ('BK', 5), ('PP', 4), ('PPT', 3)]",
        "gold_result": "[('AD', 3), ('BK', 5), ('PP', 4), ('PPT', 3)]"
      }
    },
    {
      "db_id": "wta_1",
      "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
      "predicted_sql": "SELECT p.first_name, p.country_code, p.birth_date\nFROM players p\nJOIN matches m\nON p.player_id = m.winner_id\nORDER BY m.winner_rank_points DESC\nLIMIT 1;",
      "gold_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Serena', 'USA', 19810926)]",
        "gold_result": "[('Serena', 'USA', 19810926)]"
      }
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the average age of all the dogs?",
      "predicted_sql": "SELECT AVG(age) AS average_age\nFROM Dogs\nWHERE age IS NOT NULL;",
      "gold_sql": "SELECT avg(age) FROM Dogs",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(5.066666666666666,)]",
        "gold_result": "[(5.066666666666666,)]"
      }
    },
    {
      "db_id": "flight_2",
      "question": "What are airlines that have flights arriving at airport 'AHD'?",
      "predicted_sql": "SELECT DISTINCT Airline\nFROM flights\nWHERE DestAirport = 'AHD';",
      "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[]",
        "gold_result": "[]"
      }
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
      "predicted_sql": "SELECT District\nFROM shop\nGROUP BY District\nHAVING MIN(Number_products) < 3000 AND MAX(Number_products) > 10000",
      "gold_sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[]",
        "gold_result": "[]"
      }
    },
    {
      "db_id": "tvshow",
      "question": "list all cartoon titles and their directors ordered by their air date",
      "predicted_sql": "SELECT Title, Directed_by\nFROM Cartoon\nORDER BY Original_air_date ASC;",
      "gold_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang')]",
        "gold_result": "[('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang')]"
      }
    },
    {
      "db_id": "world_1",
      "question": "What is the number of distinct languages used around the world?",
      "predicted_sql": "SELECT COUNT(DISTINCT Language) \n   FROM countrylanguage;",
      "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(457,)]",
        "gold_result": "[(457,)]"
      }
    },
    {
      "db_id": "network_1",
      "question": "What are the names of students who have 2 or more likes?",
      "predicted_sql": "SELECT H.name\nFROM Highschooler H\nJOIN (\n  SELECT L.liked_id, COUNT(L.liked_id) as like_count\n  FROM Likes L\n  GROUP BY L.liked_id\n  HAVING COUNT(L.liked_id) >= 2\n) AS liked_students\nON H.ID = liked_students.liked_id;",
      "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('Kris',), ('Cassandra',)]",
        "gold_result": "[]"
      }
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "Show the date and id of the transcript with at least 2 course results.",
      "predicted_sql": "SELECT T.transcript_date, T.transcript_id\nFROM Transcripts T\nJOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id\nGROUP BY T.transcript_id, T.transcript_date\nHAVING COUNT(DISTINCT TC.student_course_id) >= 2;",
      "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('2013-06-30 13:01:40', 5), ('2010-12-13 10:55:15', 6), ('1975-05-06 12:04:47', 8), ('1998-11-22 12:18:29', 15)]",
        "gold_result": "[('2013-06-30 13:01:40', 5), ('2010-12-13 10:55:15', 6), ('1975-05-06 12:04:47', 8), ('1998-11-22 12:18:29', 15)]"
      }
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What is the template type code for template type description \"Book\".",
      "predicted_sql": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Description = 'Book';",
      "gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('BK',)]",
        "gold_result": "[('BK',)]"
      }
    },
    {
      "db_id": "poker_player",
      "question": "What is the average earnings of poker players with height higher than 200?",
      "predicted_sql": "SELECT AVG(pp.Earnings) AS AverageEarnings\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE p.Height > 200;",
      "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(309445.0,)]",
        "gold_result": "[(309445.0,)]"
      }
    },
    {
      "db_id": "flight_2",
      "question": "Which airports do not have departing or arriving flights?",
      "predicted_sql": "SELECT a.AirportCode, a.AirportName\nFROM airports a\nLEFT JOIN flights f1 ON a.AirportCode = f1.SourceAirport\nLEFT JOIN flights f2 ON a.AirportCode = f2.DestAirport\nWHERE f1.SourceAirport IS NULL AND f2.DestAirport IS NULL;",
      "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('APG', 'Phillips AAF '), ('ABR', 'Municipal '), ('DYS', 'Dyess AFB '), ('ABI', 'Municipal '), ('VJI', 'Virginia Highlands '), ('ADT', 'Ada '), ('ADK', 'Adak Island Ns '), ('ADG', 'Lenawee County '), ('AFO', 'Municipal '), ('AIK', 'Municipal ')]",
        "gold_result": "[('Phillips AAF ',), ('Municipal ',), ('Dyess AFB ',), ('Municipal ',), ('Virginia Highlands ',), ('Ada ',), ('Adak Island Ns ',), ('Lenawee County ',), ('Municipal ',), ('Municipal ',)]"
      }
    },
    {
      "db_id": "museum_visit",
      "question": "What are the opening year and staff number of the museum named Plaza Museum?",
      "predicted_sql": "SELECT Open_Year, Num_of_Staff\nFROM museum\nWHERE Name = 'Plaza Museum';",
      "gold_sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('2000', 62)]",
        "gold_result": "[(62, '2000')]"
      }
    },
    {
      "db_id": "pets_1",
      "question": "Find the id and weight of all pets whose age is older than 1.",
      "predicted_sql": "SELECT PetID, weight\nFROM Pets\nWHERE pet_age > 1;",
      "gold_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(2001, 12.0), (2002, 13.4)]",
        "gold_result": "[(2001, 12.0), (2002, 13.4)]"
      }
    },
    {
      "db_id": "world_1",
      "question": "How many countries have governments that are republics?",
      "predicted_sql": "SELECT COUNT(Code) \nFROM country \nWHERE GovernmentForm = 'Republic';",
      "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(122,)]",
        "gold_result": "[(122,)]"
      }
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the department description for the one whose name has the word computer?",
      "predicted_sql": "SELECT department_description\nFROM Departments\nWHERE LOWER(department_name) LIKE '%computer%';",
      "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('error',)]",
        "gold_result": "[('error',)]"
      }
    },
    {
      "db_id": "flight_2",
      "question": "Return the number of flights departing from Aberdeen.",
      "predicted_sql": "SELECT COUNT(f.FlightNo)\nFROM flights f\nJOIN airports a ON f.SourceAirport = a.AirportCode\nWHERE a.City = 'Aberdeen';",
      "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(0,)]",
        "gold_result": "[(0,)]"
      }
    },
    {
      "db_id": "wta_1",
      "question": "Count the number of matches.",
      "predicted_sql": "SELECT COUNT(*)\nFROM matches;",
      "gold_sql": "SELECT count(*) FROM matches",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(278,)]",
        "gold_result": "[(278,)]"
      }
    },
    {
      "db_id": "wta_1",
      "question": "Find the name and rank points of the winner who won the most times.",
      "predicted_sql": "SELECT P.first_name, P.last_name, R.ranking_points\nFROM (\n  SELECT winner_id, COUNT(*) as win_count\n  FROM matches\n  GROUP BY winner_id\n) M\nJOIN players P ON M.winner_id = P.player_id\nJOIN rankings R ON P.player_id = R.player_id\nWHERE M.win_count = (\n  SELECT MAX(win_count)\n  FROM (\n    SELECT winner_id, COUNT(*) as win_count\n    FROM matches\n    GROUP BY winner_id\n  )\n);",
      "gold_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('Angelique', 'Kerber', 16), ('Angelique', 'Kerber', 16), ('Angelique', 'Kerber', 16), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17)]",
        "gold_result": "[('Angelique Kerber', 3715)]"
      }
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
      "predicted_sql": "SELECT O.owner_id, O.first_name, O.last_name\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nGROUP BY O.owner_id, O.first_name, O.last_name\nHAVING COUNT(D.dog_id) = (\n  SELECT MAX(num_dogs) AS max_dogs\n  FROM (\n    SELECT COUNT(D.dog_id) AS num_dogs\n    FROM Owners O\n    JOIN Dogs D ON O.owner_id = D.owner_id\n    GROUP BY O.owner_id\n  )\n)",
      "gold_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(14, 'Rachelle', 'Funk')]",
        "gold_result": "[(14, 'Rachelle', 'Funk')]"
      }
    },
    {
      "db_id": "employee_hire_evaluation",
      "question": "Find the total amount of bonus given in all the evaluations.",
      "predicted_sql": "SELECT SUM(Bonus) \nFROM evaluation \nWHERE Bonus IS NOT NULL;",
      "gold_sql": "SELECT sum(bonus) FROM evaluation",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(19500.0,)]",
        "gold_result": "[(19500.0,)]"
      }
    },
    {
      "db_id": "tvshow",
      "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
      "predicted_sql": "SELECT Pixel_aspect_ratio_PAR, Country\nFROM TV_Channel\nWHERE Language != 'English';",
      "gold_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy')]",
        "gold_result": "[('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy')]"
      }
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "List all the student details in reversed lexicographical order.",
      "predicted_sql": "-- SQL script type: SQLite\nSELECT \n    student_id,\n    current_address_id,\n    permanent_address_id,\n    first_name,\n    middle_name,\n    last_name,\n    cell_mobile_number,\n    email_address,\n    ssn,\n    date_first_registered,\n    date_left,\n    other_student_details\nFROM \n    Students\nORDER BY \n    last_name DESC,\n    first_name DESC;",
      "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[(13, 9, 8, 'Deon', 'Brooklyn', 'Weimann', '(213)445-0399x85208', 'jhuel@example.com', '68095', '1986-02-24 21:12:23', '2014-05-30 23:32:02', 'assumenda'), (1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (11, 14, 4, 'Gregg', 'Mossie', 'Schuppe', '(462)246-7921', 'nbruen@example.org', '494', '1989-05-24 23:31:29', '1975-10-09 00:49:27', 'omnis'), (6, 6, 3, 'Stanford', 'Mona', 'Rogahn', '436.613.7683', 'skassulke@example.net', '248', '1997-03-20 16:47:25', '2016-04-09 12:27:04', 'qui'), (14, 12, 11, 'Jordy', 'Osborne', 'Rempel', '(605)919-3594x3661', 'gracie29@example.com', '34458427', '2004-12-24 12:36:46', '1999-08-24 00:07:10', 'et'), (9, 2, 15, 'Reva', 'Golda', 'Osinski', '(507)365-8405', \"qo'kon@example.com\", '39', '2017-01-04 08:10:25', '1990-09-01 05:03:27', 'nesciunt'), (10, 15, 14, 'Helga', 'Cleve', 'Mohr', '677.401.9382', 'nya.lesch@example.net', '43', '2009-09-25 00:14:25', '2017-07-09 21:38:43', 'rerum'), (12, 14, 9, 'Orrin', 'Neal', 'Kemmer', '(982)153-1469x1733', 'beth42@example.org', '6274274', '2005-12-15 08:42:10', '2006-08-04 17:26:49', 'non'), (15, 2, 9, 'Jett', 'Alberta', 'Jaskolski', '877.549.9067x8723', 'mya88@example.org', '156', '1982-06-19 13:15:18', '1982-06-11 00:25:39', 'omnis'), (7, 15, 3, 'Frida', 'Aisha', 'Huel', '1-879-796-8987x164', 'baumbach.lucious@example.org', '668', '2018-03-13 09:56:22', '1997-11-16 08:54:33', 'dolorum')]",
        "gold_result": "[('voluptatem',), ('rerum',), ('quia',), ('qui',), ('omnis',), ('omnis',), ('non',), ('nesciunt',), ('laborum',), ('facilis',)]"
      }
    },
    {
      "db_id": "pets_1",
      "question": "Find the number of dog pets that are raised by female students (with sex F).",
      "predicted_sql": "SELECT COUNT(P.PetID) AS Number_of_Dog_Pets\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE S.Sex = 'F' AND P.PetType = 'dog';",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(2,)]",
        "gold_result": "[(2,)]"
      }
    },
    {
      "db_id": "concert_singer",
      "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
      "predicted_sql": "SELECT s.Name, s.Location\nFROM stadium s\nJOIN (\n  SELECT c1.Stadium_ID\n  FROM concert c1\n  JOIN concert c2 ON c1.Stadium_ID = c2.Stadium_ID\n  WHERE c1.Year = '2014' AND c2.Year = '2015'\n) AS sub ON s.Stadium_ID = sub.Stadium_ID",
      "gold_sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Somerset Park', 'Ayr United')]",
        "gold_result": "[('Somerset Park', 'Ayr United')]"
      }
    },
    {
      "db_id": "concert_singer",
      "question": "Which year has most number of concerts?",
      "predicted_sql": "SELECT Year, COUNT(concert_ID) as num_concerts\nFROM concert\nGROUP BY Year\nORDER BY num_concerts DESC\nLIMIT 1;",
      "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('2015', 3)]",
        "gold_result": "[('2015',)]"
      }
    },
    {
      "db_id": "network_1",
      "question": "Return the name of the high school student with the most friends.",
      "predicted_sql": "SELECT H.name\nFROM Highschooler H\nJOIN (\n  SELECT student_id, COUNT(friend_id) as num_friends\n  FROM Friend\n  GROUP BY student_id\n) F ON H.ID = F.student_id\nWHERE F.num_friends = (\n  SELECT MAX(num_friends)\n  FROM (\n    SELECT student_id, COUNT(friend_id) as num_friends\n    FROM Friend\n    GROUP BY student_id\n  )\n);",
      "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Andrew',)]",
        "gold_result": "[('Andrew',)]"
      }
    },
    {
      "db_id": "car_1",
      "question": "What is the maker of the carr produced in the earliest year and what year was it?",
      "predicted_sql": "SELECT T1.Maker, T3.Year\nFROM car_makers T1\nJOIN model_list T2 ON T1.Id = T2.Maker\nJOIN car_names T4 ON T2.ModelId = T4.Model\nJOIN cars_data T3 ON T4.MakeId = T3.Id\nWHERE T3.Year = (SELECT MIN(Year) FROM cars_data)\nLIMIT 1;",
      "gold_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[]",
        "gold_result": "[('chevrolet chevelle malibu', 1970), ('buick skylark 320', 1970), ('plymouth satellite', 1970), ('amc rebel sst', 1970), ('ford torino', 1970), ('ford galaxie 500', 1970), ('chevrolet impala', 1970), ('plymouth fury iii', 1970), ('pontiac catalina', 1970), ('amc ambassador dpl', 1970)]"
      }
    },
    {
      "db_id": "car_1",
      "question": "Which model of the car has the minimum horsepower?",
      "predicted_sql": "SELECT cn.Model, cd.Horsepower\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nWHERE cd.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);",
      "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('amc', '100'), ('chevrolet', '100'), ('amc', '100'), ('pontiac', '100'), ('chevrolet', '100'), ('amc', '100'), ('amc', '100'), ('amc', '100'), ('chevrolet', '100'), ('chevrolet', '100')]",
        "gold_result": "[('amc',)]"
      }
    },
    {
      "db_id": "dog_kennels",
      "question": "What is the description of the treatment type that costs the least money in total?",
      "predicted_sql": "SELECT T2.treatment_type_description\nFROM Treatments T1\nJOIN Treatment_Types T2 ON T1.treatment_type_code = T2.treatment_type_code\nGROUP BY T2.treatment_type_description\nORDER BY SUM(T1.cost_of_treatment) ASC\nLIMIT 1;",
      "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Take for a Walk',)]",
        "gold_result": "[('Take for a Walk',)]"
      }
    },
    {
      "db_id": "singer",
      "question": "For each citizenship, how many singers are from that country?",
      "predicted_sql": "SELECT Citizenship, COUNT(Singer_ID) AS Number_of_Singers\nFROM singer\nGROUP BY Citizenship;",
      "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]",
        "gold_result": "[('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]"
      }
    },
    {
      "db_id": "poker_player",
      "question": "How many people are there of each nationality?",
      "predicted_sql": "SELECT Nationality, COUNT(People_ID) AS Number_of_People\n   FROM people\n   GROUP BY Nationality;",
      "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Bulgaria', 1), ('Russia', 6)]",
        "gold_result": "[('Bulgaria', 1), ('Russia', 6)]"
      }
    },
    {
      "db_id": "pets_1",
      "question": "Find number of pets owned by students who are older than 20.",
      "predicted_sql": "SELECT COUNT(HP.PetID) AS Number_of_Pets\nFROM Student S\nINNER JOIN Has_Pet HP ON S.StuID = HP.StuID\nWHERE S.Age > 20;",
      "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(0,)]",
        "gold_result": "[(0,)]"
      }
    },
    {
      "db_id": "world_1",
      "question": "Give me Brazil\u2019s population and life expectancies.",
      "predicted_sql": "SELECT Population, LifeExpectancy\nFROM country\nWHERE Name = 'Brazil';",
      "gold_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(170115000, 62.9)]",
        "gold_result": "[(170115000, 62.9)]"
      }
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "Which template type code has most number of templates?",
      "predicted_sql": "SELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nHAVING COUNT(Template_ID) = (\n  SELECT MAX(Count)\n  FROM (\n    SELECT Template_Type_Code, COUNT(Template_ID) AS Count\n    FROM Templates\n    GROUP BY Template_Type_Code\n  ) AS Subquery\n);",
      "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('BK',), ('PP',)]",
        "gold_result": "[('PP',)]"
      }
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the different template type codes?",
      "predicted_sql": "SELECT DISTINCT Template_Type_Code\nFROM Ref_Template_Types;",
      "gold_sql": "SELECT DISTINCT template_type_code FROM Templates",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('AD',), ('BK',), ('CV',), ('PP',), ('PPT',)]",
        "gold_result": "[('PP',), ('BK',), ('PPT',), ('AD',), ('CV',)]"
      }
    },
    {
      "db_id": "world_1",
      "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
      "predicted_sql": "SELECT COUNT(DISTINCT T1.Code)\nFROM country AS T1\nJOIN countrylanguage AS T2\nON T1.Code = T2.CountryCode\nWHERE T2.Language = 'Spanish' AND T2.IsOfficial = 'T';",
      "gold_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[(20,)]",
        "gold_result": "[(1, 7.4), (1, 44.6), (1, 96.8), (1, 31.6), (1, 87.7), (1, 0.7), (1, 89.7), (1, 99.0), (1, 97.5), (1, 100.0)]"
      }
    },
    {
      "db_id": "dog_kennels",
      "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
      "predicted_sql": "SELECT P.professional_id, P.cell_number\nFROM Professionals P\nJOIN (\n  SELECT T.professional_id\n  FROM Treatments T\n  GROUP BY T.professional_id\n  HAVING COUNT(DISTINCT T.treatment_type_code) > 1\n) AS PT\nON P.professional_id = PT.professional_id;",
      "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[(6, '139-321-7313'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]",
        "gold_result": "[(4, '00230569697'), (6, '139-321-7313'), (8, '328.842.3792'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]"
      }
    },
    {
      "db_id": "car_1",
      "question": "What is the name of each continent and how many car makers are there in each one?",
      "predicted_sql": "SELECT \n     c.Continent, \n     COUNT(cm.Id) AS Number_of_Car_Makers\n   FROM \n     continents c\n   JOIN \n     countries co ON c.ContId = co.Continent\n   JOIN \n     car_makers cm ON co.CountryId = cm.Country\n   GROUP BY \n     c.Continent\n   ORDER BY \n     c.Continent ASC;",
      "gold_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('america', 4), ('asia', 7), ('europe', 11)]",
        "gold_result": "[('america', 4), ('asia', 7), ('europe', 11)]"
      }
    },
    {
      "db_id": "pets_1",
      "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
      "predicted_sql": "SELECT S.Fname, S.Age\nFROM Student S\nWHERE EXISTS (\n  SELECT 1\n  FROM Has_Pet HP\n  JOIN Pets P ON HP.PetID = P.PetID\n  WHERE P.PetType = 'dog' AND HP.StuID = S.StuID\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM Has_Pet HP\n  JOIN Pets P ON HP.PetID = P.PetID\n  WHERE P.PetType = 'cat' AND HP.StuID = S.StuID\n);",
      "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('Tracy', 19)]",
        "gold_result": "[('Tracy', 19), ('Tracy', 19)]"
      }
    },
    {
      "db_id": "tvshow",
      "question": "How many cartoons were written by \"Joseph Kuhr\"?",
      "predicted_sql": "SELECT COUNT(id)\nFROM Cartoon\nWHERE Written_by = 'Joseph Kuhr';",
      "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(2,)]",
        "gold_result": "[(2,)]"
      }
    },
    {
      "db_id": "world_1",
      "question": "Which continent has the most diverse languages?",
      "predicted_sql": "SELECT T1.Continent, COUNT(DISTINCT T2.Language) as LanguageCount\nFROM country AS T1\nJOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode\nGROUP BY T1.Continent\nORDER BY LanguageCount DESC\nLIMIT 1;",
      "gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('Africa', 215)]",
        "gold_result": "[('Africa',)]"
      }
    },
    {
      "db_id": "car_1",
      "question": "How many countries exist?",
      "predicted_sql": "SELECT COUNT(*) \nFROM countries;",
      "gold_sql": "SELECT count(*) FROM COUNTRIES;",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(15,)]",
        "gold_result": "[(15,)]"
      }
    },
    {
      "db_id": "concert_singer",
      "question": "What are the names of the singers who performed in a concert in 2014?",
      "predicted_sql": "SELECT DISTINCT s.Name\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014';",
      "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Tribal King',), ('Rose White',)]",
        "gold_result": "[('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)]"
      }
    },
    {
      "db_id": "dog_kennels",
      "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
      "predicted_sql": "SELECT P.first_name, P.last_name\nFROM Professionals P\nJOIN Treatments T ON P.professional_id = T.professional_id\nWHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);",
      "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('Domenica', 'Jacobs'), ('Vernice', 'Tillman'), ('Karley', 'Hyatt'), ('Vernice', 'Tillman'), ('Ruben', \"O'Reilly\"), ('Domenica', 'Jacobs'), ('Monte', 'Kshlerin'), ('Monte', 'Kshlerin')]",
        "gold_result": "[('Taryn', 'Braun'), ('Jayson', 'Ullrich'), ('Olaf', 'Watsica'), ('Vernice', 'Tillman'), ('Danny', 'Considine'), ('Ruben', \"O'Reilly\"), ('Velva', 'Hayes'), ('Karley', 'Hyatt'), ('Monte', 'Kshlerin'), ('Domenica', 'Jacobs')]"
      }
    },
    {
      "db_id": "tvshow",
      "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
      "predicted_sql": "SELECT id\nFROM TV_Channel\nWHERE id NOT IN (\n  SELECT Channel\n  FROM Cartoon\n  WHERE Directed_by = 'Ben Jones'\n)",
      "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('701',), ('703',), ('705',), ('706',), ('708',), ('709',), ('713',), ('714',), ('715',), ('717',)]",
        "gold_result": "[('701',), ('703',), ('705',), ('706',), ('708',), ('709',), ('713',), ('714',), ('715',), ('717',)]"
      }
    },
    {
      "db_id": "tvshow",
      "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
      "predicted_sql": "SELECT Package_Option, series_name\nFROM TV_Channel\nWHERE Hight_definition_TV = 'yes';",
      "gold_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Sky Famiglia + Sky HD', 'MTV Live HD')]",
        "gold_result": "[('Sky Famiglia + Sky HD', 'MTV Live HD')]"
      }
    },
    {
      "db_id": "world_1",
      "question": "How many people live in Gelderland district?",
      "predicted_sql": "SELECT SUM(Population) \nFROM city \nWHERE District = 'Gelderland';",
      "gold_sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(545548,)]",
        "gold_result": "[(545548,)]"
      }
    },
    {
      "db_id": "dog_kennels",
      "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
      "predicted_sql": "SELECT O.owner_id, O.zip_code\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nJOIN Treatments T ON D.dog_id = T.dog_id\nGROUP BY O.owner_id, O.zip_code\nORDER BY SUM(T.cost_of_treatment) DESC\nLIMIT 1;",
      "gold_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[(3, '02647')]",
        "gold_result": "[(3, '02647')]"
      }
    },
    {
      "db_id": "wta_1",
      "question": "What are the full names of all left handed players, in order of birth date?",
      "predicted_sql": "SELECT first_name, last_name\nFROM players\nWHERE hand = 'L'\nORDER BY birth_date ASC;",
      "gold_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Ann', 'Jones'), ('Wendy', 'Gilchrist'), ('Martina', 'Navratilova'), ('Mary', 'Carillo'), ('Katerina', 'Bohmova'), ('Petra', 'Delhees Jauch'), ('Nancy', 'Loeffler Caro'), ('Lise', 'Gregory'), ('Rene', 'Collins'), ('Nicole', 'Arendt')]",
        "gold_result": "[('Ann', 'Jones'), ('Wendy', 'Gilchrist'), ('Martina', 'Navratilova'), ('Mary', 'Carillo'), ('Katerina', 'Bohmova'), ('Petra', 'Delhees Jauch'), ('Nancy', 'Loeffler Caro'), ('Lise', 'Gregory'), ('Rene', 'Collins'), ('Nicole', 'Arendt')]"
      }
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the first and second line for all addresses?",
      "predicted_sql": "SELECT line_1, line_2\nFROM Addresses;",
      "gold_sql": "SELECT line_1 ,  line_2 FROM addresses",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830')]",
        "gold_result": "[('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830')]"
      }
    },
    {
      "db_id": "tvshow",
      "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
      "predicted_sql": "SELECT DISTINCT TV_Channel.series_name, TV_Channel.Country\nFROM TV_Channel\nJOIN (\n  SELECT Channel\n  FROM Cartoon\n  WHERE Directed_by IN ('Ben Jones', 'Michael Chang')\n) AS Channels\nON TV_Channel.id = Channels.Channel;",
      "gold_sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('Sky Radio', 'Italy'), ('Music Box Italia', 'Italy'), ('MTV Hits', 'Italy'), ('MTV Rocks', 'United Kingdom'), ('MTV Dance', 'United Kingdom'), ('Classica', 'Italy')]",
        "gold_result": "[('MTV Dance', 'United Kingdom')]"
      }
    },
    {
      "db_id": "world_1",
      "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
      "predicted_sql": "SELECT T1.CountryCode\nFROM countrylanguage AS T1\nJOIN (\n  SELECT CountryCode, MAX(Percentage) AS max_percentage\n  FROM countrylanguage\n  GROUP BY CountryCode\n) AS T2\nON T1.CountryCode = T2.CountryCode AND T1.Percentage = T2.max_percentage\nWHERE T1.Language = 'Spanish'",
      "gold_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('AND',), ('ARG',), ('BOL',), ('CHL',), ('COL',), ('CRI',), ('CUB',), ('DOM',), ('ECU',), ('ESP',)]",
        "gold_result": "[('ABW', 7.4), ('AND', 44.6), ('ARG', 96.8), ('BLZ', 31.6), ('BOL', 87.7), ('CAN', 0.7), ('CHL', 89.7), ('COL', 99.0), ('CRI', 97.5), ('CUB', 100.0)]"
      }
    },
    {
      "db_id": "flight_2",
      "question": "Give the flight numbers of flights arriving in Aberdeen.",
      "predicted_sql": "SELECT F.FlightNo\nFROM flights F\nJOIN airports A ON F.DestAirport = A.AirportCode\nWHERE A.City = 'Aberdeen';",
      "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[]",
        "gold_result": "[]"
      }
    },
    {
      "db_id": "world_1",
      "question": "Give the names of countries with English and French as official languages.",
      "predicted_sql": "SELECT Name \nFROM country \nWHERE Code IN (\n  SELECT CountryCode \n  FROM countrylanguage \n  WHERE Language = 'English' AND IsOfficial = 'T'\n  INTERSECT\n  SELECT CountryCode \n  FROM countrylanguage \n  WHERE Language = 'French' AND IsOfficial = 'T'\n);",
      "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Canada',), ('Seychelles',), ('Vanuatu',)]",
        "gold_result": "[('Canada',), ('Seychelles',), ('Vanuatu',)]"
      }
    },
    {
      "db_id": "cre_Doc_Template_Mgt",
      "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
      "predicted_sql": "SELECT \n  D.Document_ID, \n  D.Document_Name, \n  COUNT(P.Paragraph_ID) AS Number_of_Paragraphs\nFROM \n  Documents D\n  LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY \n  D.Document_ID, \n  D.Document_Name\nORDER BY \n  D.Document_ID ASC;",
      "gold_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[(0, 'Introduction of OS', 0), (1, 'Understanding DB', 0), (3, 'Summer Show', 1), (76, 'Robbin CV', 0), (80, 'Welcome to NY', 2), (82, 'Data base', 0), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1)]",
        "gold_result": "[(3, 'Summer Show', 1), (80, 'Welcome to NY', 2), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]"
      }
    },
    {
      "db_id": "world_1",
      "question": "What are the cities whose population is between 160000 and 900000?",
      "predicted_sql": "SELECT Name\nFROM city\nWHERE Population >= 160000 AND Population <= 900000;",
      "gold_sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
      "execution_match": true,
      "execution_results": {
        "pred_result": "[('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',)]",
        "gold_result": "[('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',)]"
      }
    },
    {
      "db_id": "dog_kennels",
      "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
      "predicted_sql": "SELECT D.name, T.date_of_treatment\nFROM Dogs D\nJOIN Treatments T ON D.dog_id = T.dog_id\nWHERE D.breed_code IN (\n  SELECT breed_code\n  FROM (\n    SELECT D.breed_code, COUNT(D.dog_id) as count\n    FROM Dogs D\n    GROUP BY D.breed_code\n  ) AS sub\n  WHERE sub.count = (\n    SELECT MIN(count)\n    FROM (\n      SELECT D.breed_code, COUNT(D.dog_id) as count\n      FROM Dogs D\n      GROUP BY D.breed_code\n    ) AS sub2\n  )\n);",
      "gold_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('Lyric', '2018-03-19 04:39:54'), ('Houston', '2018-03-15 20:25:34'), ('Lyric', '2018-03-08 05:26:23'), ('Holden', '2018-03-23 13:52:10'), ('Troy', '2018-03-11 04:23:15'), ('Lyric', '2018-03-14 19:10:40'), ('Troy', '2018-02-28 17:09:43'), ('Jesus', '2018-03-16 10:27:36'), ('Troy', '2018-03-04 20:33:43'), ('Kacey', '2018-03-15 19:10:02')]",
        "gold_result": "[('Lyric', '2018-03-19 04:39:54'), ('Houston', '2018-03-15 20:25:34'), ('Lyric', '2018-03-08 05:26:23'), ('Lyric', '2018-03-14 19:10:40'), ('Kacey', '2018-03-15 19:10:02')]"
      }
    },
    {
      "db_id": "student_transcripts_tracking",
      "question": "What is the mobile phone number of the student named Timmothy Ward ?",
      "predicted_sql": "SELECT cell_mobile_number\nFROM Students\nWHERE first_name = 'Timmothy' AND last_name = 'Ward';",
      "gold_sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
      "execution_match": false,
      "execution_results": {
        "pred_result": "[('(096)889-8954x524',)]",
        "gold_result": "[]"
      }
    }
  ]
}