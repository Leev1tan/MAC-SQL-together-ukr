#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Генератор питань та SQL-запитів для бази даних "Авіакомпанія"

Цей скрипт створює різні типи питань та відповідні SQL-запити для бази даних
авіакомпанії, базуючись на її схемі. Питання включають прості, середні
та складні запити, що відображають різні аспекти роботи авіакомпанії.
"""

import json
import os
import random
from datetime import datetime

def add_question(questions, question_text, sql_query, difficulty, db_id="авіакомпанія"):
    """Додає нове питання до списку питань"""
    question_id = f"{db_id}_{len(questions) + 1:03d}"
    questions.append({
        "question_id": question_id,
        "db_id": db_id,
        "question": question_text,
        "gold_sql": sql_query,
        "difficulty": difficulty
    })

def generate_questions():
    """Генерує питання та SQL-запити для бази даних авіакомпанії"""
    questions = []
    
    # Прості питання (фільтрація та агрегація одної таблиці)
    add_question(
        questions,
        "Скільки літаків знаходиться в активному статусі?",
        "SELECT COUNT(*) FROM літаки WHERE статус = 'Активний';",
        "simple"
    )
    
    add_question(
        questions,
        "Які посади мають найвищу базову зарплату?",
        "SELECT назва, базова_зарплата FROM посади ORDER BY базова_зарплата DESC LIMIT 5;",
        "simple"
    )
    
    add_question(
        questions,
        "Скільки пасажирів зареєстровано в системі?",
        "SELECT COUNT(*) FROM пасажири;",
        "simple"
    )
    
    add_question(
        questions,
        "Які типи літаків мають максимальну кількість пасажирів більше 200?",
        "SELECT назва, виробник, максимальна_кількість_пасажирів FROM типи_літаків WHERE максимальна_кількість_пасажирів > 200;",
        "simple"
    )
    
    add_question(
        questions,
        "Знайдіть всі аеропорти, що знаходяться в Україні.",
        "SELECT код_іата, назва, місто FROM аеропорти WHERE країна = 'Україна';",
        "simple"
    )
    
    # Питання середньої складності (JOIN 2-3 таблиць, GROUP BY)
    add_question(
        questions,
        "Скільки рейсів заплановано для кожного літака на наступний місяць?",
        """
        SELECT л.реєстраційний_номер, т.назва AS тип_літака, COUNT(р.id) AS кількість_рейсів
        FROM літаки л
        JOIN типи_літаків т ON л.тип_літака_id = т.id
        LEFT JOIN рейси р ON л.id = р.літак_id
        WHERE р.дата_час_відправлення BETWEEN CURRENT_DATE AND (CURRENT_DATE + INTERVAL '1 month')
        GROUP BY л.id, л.реєстраційний_номер, т.назва
        ORDER BY кількість_рейсів DESC;
        """,
        "medium"
    )
    
    add_question(
        questions,
        "Для кожного маршруту знайдіть середню заповненість літаків (у відсотках від максимальної місткості).",
        """
        SELECT 
            а1.місто AS місто_відправлення, 
            а2.місто AS місто_призначення,
            AVG(
                (р.кількість_місць_економ - р.доступно_місць_економ + 
                 р.кількість_місць_бізнес - р.доступно_місць_бізнес + 
                 р.кількість_місць_перший_клас - р.доступно_місць_перший_клас) * 100.0 / 
                (р.кількість_місць_економ + р.кількість_місць_бізнес + р.кількість_місць_перший_клас)
            ) AS середня_заповненість_відсоток
        FROM рейси р
        JOIN маршрути м ON р.маршрут_id = м.id
        JOIN аеропорти а1 ON м.аеропорт_відправлення_id = а1.id
        JOIN аеропорти а2 ON м.аеропорт_призначення_id = а2.id
        WHERE р.статус_id IN (
            SELECT id FROM статуси_рейсів WHERE назва IN ('Виконано', 'В польоті')
        )
        GROUP BY м.id, а1.місто, а2.місто
        ORDER BY середня_заповненість_відсоток DESC;
        """,
        "medium"
    )
    
    add_question(
        questions,
        "Знайдіть 10 найбільш прибуткових рейсів за останній місяць.",
        """
        SELECT 
            р.номер_рейсу, 
            а1.місто AS місто_відправлення, 
            а2.місто AS місто_призначення,
            р.дата_час_відправлення,
            (
                (р.кількість_місць_економ - р.доступно_місць_економ) * р.вартість_економ +
                (р.кількість_місць_бізнес - р.доступно_місць_бізнес) * р.вартість_бізнес +
                (р.кількість_місць_перший_клас - р.доступно_місць_перший_клас) * р.вартість_перший_клас
            ) AS загальний_дохід
        FROM рейси р
        JOIN маршрути м ON р.маршрут_id = м.id
        JOIN аеропорти а1 ON м.аеропорт_відправлення_id = а1.id
        JOIN аеропорти а2 ON м.аеропорт_призначення_id = а2.id
        WHERE р.дата_час_відправлення >= CURRENT_DATE - INTERVAL '1 month'
          AND р.статус_id IN (SELECT id FROM статуси_рейсів WHERE назва = 'Виконано')
        ORDER BY загальний_дохід DESC
        LIMIT 10;
        """,
        "medium"
    )
    
    add_question(
        questions,
        "Які пілоти здійснили найбільшу кількість рейсів за останній рік?",
        """
        SELECT 
            п.прізвище, 
            п.імя, 
            COUNT(рп.рейс_id) AS кількість_рейсів
        FROM персонал п
        JOIN рейси_персонал рп ON п.id = рп.персонал_id
        JOIN рейси р ON рп.рейс_id = р.id
        JOIN посади пос ON п.посада_id = пос.id
        WHERE р.дата_час_відправлення >= CURRENT_DATE - INTERVAL '1 year'
          AND р.статус_id IN (SELECT id FROM статуси_рейсів WHERE назва = 'Виконано')
          AND пос.назва LIKE '%пілот%'
        GROUP BY п.id, п.прізвище, п.імя
        ORDER BY кількість_рейсів DESC
        LIMIT 10;
        """,
        "medium"
    )
    
    add_question(
        questions,
        "Для кожного класу обслуговування порахуйте середню вартість бронювання та кількість пасажирів.",
        """
        SELECT 
            ко.назва AS клас_обслуговування, 
            COUNT(б.id) AS кількість_бронювань,
            COUNT(бп.пасажир_id) AS кількість_пасажирів,
            AVG(б.загальна_вартість) AS середня_вартість,
            SUM(б.загальна_вартість) AS загальний_дохід
        FROM бронювання б
        JOIN класи_обслуговування ко ON б.клас_обслуговування_id = ко.id
        JOIN бронювання_пасажири бп ON б.id = бп.бронювання_id
        GROUP BY ко.id, ко.назва
        ORDER BY загальний_дохід DESC;
        """,
        "medium"
    )
    
    # Складні питання (складні JOIN, підзапити, HAVING, агрегатні функції)
    add_question(
        questions,
        "Знайдіть маршрути, на яких за останні 3 місяці було найбільше затримок вильоту (більше 30 хвилин).",
        """
        SELECT 
            а1.місто AS місто_відправлення, 
            а2.місто AS місто_призначення,
            COUNT(р.id) AS загальна_кількість_рейсів,
            SUM(CASE 
                WHEN EXTRACT(EPOCH FROM (р.фактичний_час_відправлення - р.дата_час_відправлення))/60 > 30 
                THEN 1 ELSE 0 
            END) AS кількість_затримок,
            ROUND(SUM(CASE 
                WHEN EXTRACT(EPOCH FROM (р.фактичний_час_відправлення - р.дата_час_відправлення))/60 > 30 
                THEN 1 ELSE 0 
            END) * 100.0 / COUNT(р.id), 2) AS відсоток_затримок,
            AVG(CASE 
                WHEN EXTRACT(EPOCH FROM (р.фактичний_час_відправлення - р.дата_час_відправлення))/60 > 30 
                THEN EXTRACT(EPOCH FROM (р.фактичний_час_відправлення - р.дата_час_відправлення))/60 
                ELSE NULL 
            END) AS середня_затримка_хвилин
        FROM рейси р
        JOIN маршрути м ON р.маршрут_id = м.id
        JOIN аеропорти а1 ON м.аеропорт_відправлення_id = а1.id
        JOIN аеропорти а2 ON м.аеропорт_призначення_id = а2.id
        WHERE р.дата_час_відправлення >= CURRENT_DATE - INTERVAL '3 month'
          AND р.фактичний_час_відправлення IS NOT NULL
        GROUP BY м.id, а1.місто, а2.місто
        HAVING COUNT(р.id) >= 10
          AND SUM(CASE 
                WHEN EXTRACT(EPOCH FROM (р.фактичний_час_відправлення - р.дата_час_відправлення))/60 > 30 
                THEN 1 ELSE 0 
            END) > 0
        ORDER BY відсоток_затримок DESC, кількість_затримок DESC
        LIMIT 10;
        """,
        "complex"
    )
    
    add_question(
        questions,
        "Знайдіть пасажирів, які здійснили найбільше рейсів за останній рік та їхній загальний наліт годин.",
        """
        WITH рейси_пасажирів AS (
            SELECT 
                п.id AS пасажир_id,
                п.прізвище,
                п.імя,
                р.id AS рейс_id,
                EXTRACT(EPOCH FROM (р.фактичний_час_прибуття - р.фактичний_час_відправлення))/3600 AS тривалість_годин
            FROM пасажири п
            JOIN бронювання_пасажири бп ON п.id = бп.пасажир_id
            JOIN бронювання б ON бп.бронювання_id = б.id
            JOIN рейси р ON б.рейс_id = р.id
            WHERE р.дата_час_відправлення >= CURRENT_DATE - INTERVAL '1 year'
              AND р.фактичний_час_відправлення IS NOT NULL
              AND р.фактичний_час_прибуття IS NOT NULL
              AND б.статус_id IN (SELECT id FROM статуси_бронювань WHERE назва = 'Виконано')
        )
        SELECT 
            прізвище,
            імя,
            COUNT(DISTINCT рейс_id) AS кількість_рейсів,
            ROUND(SUM(тривалість_годин)::numeric, 2) AS загальний_наліт_годин,
            ROUND(AVG(тривалість_годин)::numeric, 2) AS середня_тривалість_рейсу
        FROM рейси_пасажирів
        GROUP BY пасажир_id, прізвище, імя
        HAVING COUNT(DISTINCT рейс_id) >= 5
        ORDER BY кількість_рейсів DESC, загальний_наліт_годин DESC
        LIMIT 20;
        """,
        "complex"
    )
    
    add_question(
        questions,
        "Проаналізуйте завантаженість різних типів літаків та їхню прибутковість за останні 6 місяців.",
        """
        WITH рейси_статистика AS (
            SELECT 
                р.id AS рейс_id,
                л.id AS літак_id,
                тл.id AS тип_літака_id,
                тл.назва AS тип_літака,
                (р.кількість_місць_економ - р.доступно_місць_економ) * р.вартість_економ +
                (р.кількість_місць_бізнес - р.доступно_місць_бізнес) * р.вартість_бізнес +
                (р.кількість_місць_перший_клас - р.доступно_місць_перший_клас) * р.вартість_перший_клас 
                    AS дохід_рейсу,
                (р.кількість_місць_економ + р.кількість_місць_бізнес + р.кількість_місць_перший_клас - 
                 р.доступно_місць_економ - р.доступно_місць_бізнес - р.доступно_місць_перший_клас) 
                    AS кількість_пасажирів,
                (р.кількість_місць_економ + р.кількість_місць_бізнес + р.кількість_місць_перший_клас) 
                    AS загальна_кількість_місць,
                EXTRACT(EPOCH FROM (р.фактичний_час_прибуття - р.фактичний_час_відправлення))/3600 
                    AS тривалість_годин,
                м.відстань
            FROM рейси р
            JOIN літаки л ON р.літак_id = л.id
            JOIN типи_літаків тл ON л.тип_літака_id = тл.id
            JOIN маршрути м ON р.маршрут_id = м.id
            WHERE р.дата_час_відправлення >= CURRENT_DATE - INTERVAL '6 month'
              AND р.фактичний_час_відправлення IS NOT NULL
              AND р.фактичний_час_прибуття IS NOT NULL
              AND р.статус_id IN (SELECT id FROM статуси_рейсів WHERE назва = 'Виконано')
        )
        SELECT 
            тип_літака,
            COUNT(DISTINCT рейс_id) AS кількість_рейсів,
            ROUND(AVG(кількість_пасажирів * 100.0 / загальна_кількість_місць), 2) AS середня_заповненість_відсоток,
            ROUND(AVG(дохід_рейсу), 2) AS середній_дохід_на_рейс,
            ROUND(SUM(дохід_рейсу), 2) AS загальний_дохід,
            ROUND(SUM(дохід_рейсу) / SUM(кількість_пасажирів), 2) AS середній_дохід_на_пасажира,
            ROUND(SUM(дохід_рейсу) / SUM(тривалість_годин), 2) AS середній_дохід_на_годину_польоту,
            ROUND(SUM(дохід_рейсу) / SUM(відстань), 2) AS середній_дохід_на_кілометр
        FROM рейси_статистика
        GROUP BY тип_літака_id, тип_літака
        ORDER BY загальний_дохід DESC;
        """,
        "complex"
    )
    
    add_question(
        questions,
        "Знайдіть 10 найбільш завантажених аеропортів за кількістю рейсів та пасажирів.",
        """
        WITH статистика_аеропортів AS (
            -- Вильоти
            SELECT 
                а.id AS аеропорт_id,
                а.код_іата,
                а.назва,
                а.місто,
                а.країна,
                р.id AS рейс_id,
                'виліт' AS тип_операції,
                (р.кількість_місць_економ - р.доступно_місць_економ +
                 р.кількість_місць_бізнес - р.доступно_місць_бізнес +
                 р.кількість_місць_перший_клас - р.доступно_місць_перший_клас) AS кількість_пасажирів
            FROM аеропорти а
            JOIN маршрути м ON а.id = м.аеропорт_відправлення_id
            JOIN рейси р ON м.id = р.маршрут_id
            WHERE р.дата_час_відправлення >= CURRENT_DATE - INTERVAL '1 year'
              AND р.статус_id IN (SELECT id FROM статуси_рейсів WHERE назва IN ('Виконано', 'В польоті'))
            
            UNION ALL
            
            -- Прильоти
            SELECT 
                а.id AS аеропорт_id,
                а.код_іата,
                а.назва,
                а.місто,
                а.країна,
                р.id AS рейс_id,
                'приліт' AS тип_операції,
                (р.кількість_місць_економ - р.доступно_місць_економ +
                 р.кількість_місць_бізнес - р.доступно_місць_бізнес +
                 р.кількість_місць_перший_клас - р.доступно_місць_перший_клас) AS кількість_пасажирів
            FROM аеропорти а
            JOIN маршрути м ON а.id = м.аеропорт_призначення_id
            JOIN рейси р ON м.id = р.маршрут_id
            WHERE р.дата_час_відправлення >= CURRENT_DATE - INTERVAL '1 year'
              AND р.статус_id IN (SELECT id FROM статуси_рейсів WHERE назва IN ('Виконано', 'В польоті'))
        )
        SELECT 
            код_іата,
            назва,
            місто,
            країна,
            COUNT(DISTINCT рейс_id) AS кількість_рейсів,
            SUM(CASE WHEN тип_операції = 'виліт' THEN 1 ELSE 0 END) AS кількість_вильотів,
            SUM(CASE WHEN тип_операції = 'приліт' THEN 1 ELSE 0 END) AS кількість_прильотів,
            SUM(кількість_пасажирів) AS загальна_кількість_пасажирів,
            SUM(CASE WHEN тип_операції = 'виліт' THEN кількість_пасажирів ELSE 0 END) AS пасажирів_відправлено,
            SUM(CASE WHEN тип_операції = 'приліт' THEN кількість_пасажирів ELSE 0 END) AS пасажирів_прибуло
        FROM статистика_аеропортів
        GROUP BY аеропорт_id, код_іата, назва, місто, країна
        ORDER BY кількість_рейсів DESC, загальна_кількість_пасажирів DESC
        LIMIT 10;
        """,
        "complex"
    )
    
    add_question(
        questions,
        "Для кожного місяця останнього року знайдіть середні показники пунктуальності рейсів.",
        """
        WITH пунктуальність_рейсів AS (
            SELECT 
                EXTRACT(YEAR FROM р.дата_час_відправлення) AS рік,
                EXTRACT(MONTH FROM р.дата_час_відправлення) AS місяць,
                р.id AS рейс_id,
                CASE 
                    WHEN р.фактичний_час_відправлення IS NULL OR 
                         р.дата_час_відправлення IS NULL THEN NULL
                    ELSE EXTRACT(EPOCH FROM (р.фактичний_час_відправлення - р.дата_час_відправлення))/60 
                END AS затримка_вильоту_хвилин,
                CASE 
                    WHEN р.фактичний_час_прибуття IS NULL OR 
                         р.дата_час_прибуття IS NULL THEN NULL
                    ELSE EXTRACT(EPOCH FROM (р.фактичний_час_прибуття - р.дата_час_прибуття))/60 
                END AS затримка_прибуття_хвилин,
                CASE 
                    WHEN р.фактичний_час_відправлення IS NULL OR 
                         р.дата_час_відправлення IS NULL OR
                         EXTRACT(EPOCH FROM (р.фактичний_час_відправлення - р.дата_час_відправлення))/60 <= 15 
                    THEN 1 ELSE 0 
                END AS вчасний_виліт,
                CASE 
                    WHEN р.фактичний_час_прибуття IS NULL OR 
                         р.дата_час_прибуття IS NULL OR
                         EXTRACT(EPOCH FROM (р.фактичний_час_прибуття - р.дата_час_прибуття))/60 <= 15 
                    THEN 1 ELSE 0 
                END AS вчасне_прибуття
            FROM рейси р
            WHERE р.дата_час_відправлення >= CURRENT_DATE - INTERVAL '1 year'
              AND р.статус_id IN (SELECT id FROM статуси_рейсів WHERE назва = 'Виконано')
        )
        SELECT 
            рік,
            місяць,
            COUNT(рейс_id) AS кількість_рейсів,
            ROUND(AVG(CASE WHEN затримка_вильоту_хвилин > 0 THEN затримка_вильоту_хвилин ELSE 0 END), 2) AS середня_затримка_вильоту_хвилин,
            ROUND(AVG(CASE WHEN затримка_прибуття_хвилин > 0 THEN затримка_прибуття_хвилин ELSE 0 END), 2) AS середня_затримка_прибуття_хвилин,
            ROUND(SUM(вчасний_виліт) * 100.0 / COUNT(рейс_id), 2) AS відсоток_вчасних_вильотів,
            ROUND(SUM(вчасне_прибуття) * 100.0 / COUNT(рейс_id), 2) AS відсоток_вчасних_прибуттів
        FROM пунктуальність_рейсів
        GROUP BY рік, місяць
        ORDER BY рік, місяць;
        """,
        "complex"
    )
    
    # Зберігаємо згенеровані питання у JSON файлі
    output_dir = "bird-ukr/questions"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
        
    output_file = os.path.join(output_dir, "авіакомпанія_questions.json")
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(questions, f, ensure_ascii=False, indent=4)
        
    print(f"Створено {len(questions)} питань та SQL-запитів для бази даних 'Авіакомпанія'")
    print(f"Збережено у файлі: {output_file}")

if __name__ == "__main__":
    generate_questions() 