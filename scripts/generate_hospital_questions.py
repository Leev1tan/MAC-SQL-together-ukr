#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Генератор питань та SQL-запитів для бази даних "Лікарня"

Цей скрипт створює набір питань українською мовою та відповідних SQL-запитів
різних рівнів складності (простий, середній, складний) для бази даних "Лікарня".
"""

import json
import os
from datetime import datetime

# Структура для зберігання питань та SQL-запитів
questions_data = []

# Функція для додавання нового питання
def add_question(question_id, question, sql, difficulty):
    questions_data.append({
        "question_id": question_id,
        "db_id": "лікарня",
        "db_path": "database/лікарня",
        "question": question,
        "gold_sql": sql,
        "difficulty": difficulty,
        "evidence": None,
        "execution_details": {
            "execution_time": None,  # Буде заповнено пізніше
            "result_size": None  # Буде заповнено пізніше
        }
    })

# ПРОСТІ ПИТАННЯ (10 питань)

# 1. Базовий запит на вибірку
add_question(
    "лікарня_001",
    "Які лікарі працюють в хірургічному відділенні?",
    """
    SELECT л.прізвище, л.імя, л.спеціалізація 
    FROM лікарі л
    JOIN відділення в ON л.відділення_id = в.id
    WHERE в.назва = 'Хірургічне відділення'
    ORDER BY л.прізвище
    """,
    "simple"
)

# 2. Запит на підрахунок з групуванням
add_question(
    "лікарня_002",
    "Скільки пацієнтів зареєстровано в кожному відділенні?",
    """
    SELECT в.назва AS відділення, COUNT(п.id) AS кількість_пацієнтів
    FROM відділення в
    LEFT JOIN пацієнти п ON в.id = п.відділення_id
    GROUP BY в.id, в.назва
    ORDER BY кількість_пацієнтів DESC
    """,
    "simple"
)

# 3. Запит з сортуванням за датою
add_question(
    "лікарня_003",
    "Хто з пацієнтів був госпіталізований за останній тиждень?",
    """
    SELECT прізвище, імя, дата_надходження, діагноз
    FROM пацієнти
    WHERE дата_надходження >= CURRENT_DATE - INTERVAL '7 days'
    ORDER BY дата_надходження DESC
    """,
    "simple"
)

# 4. Запит з фільтрацією за статусом
add_question(
    "лікарня_004",
    "Які пацієнти перебувають у критичному стані?",
    """
    SELECT прізвище, імя, діагноз, дата_надходження
    FROM пацієнти
    WHERE стан = 'Критичний'
    ORDER BY дата_надходження
    """,
    "simple"
)

# 5. Запит з пошуком за ключовими словами
add_question(
    "лікарня_005",
    "Які пацієнти мають діагноз, пов'язаний з серцем?",
    """
    SELECT прізвище, імя, діагноз, стан
    FROM пацієнти
    WHERE діагноз ILIKE '%серц%' OR діагноз ILIKE '%кардіо%'
    ORDER BY прізвище
    """,
    "simple"
)

# 6. Запит на максимальне/мінімальне значення
add_question(
    "лікарня_006",
    "Яка найдорожча процедура в лікарні?",
    """
    SELECT назва, вартість
    FROM процедури
    WHERE вартість = (SELECT MAX(вартість) FROM процедури)
    """,
    "simple"
)

# 7. Запит з датою виписки
add_question(
    "лікарня_007",
    "Які пацієнти були виписані протягом останнього місяця?",
    """
    SELECT прізвище, імя, діагноз, дата_виписки
    FROM пацієнти
    WHERE дата_виписки IS NOT NULL 
    AND дата_виписки >= CURRENT_DATE - INTERVAL '1 month'
    ORDER BY дата_виписки DESC
    """,
    "simple"
)

# 8. Запит на об'єднання таблиць з умовою
add_question(
    "лікарня_008",
    "Які медсестри працюють у педіатричному відділенні?",
    """
    SELECT м.прізвище, м.імя, м.категорія, м.досвід_роботи
    FROM медсестри м
    JOIN відділення в ON м.відділення_id = в.id
    WHERE в.назва = 'Педіатричне відділення'
    ORDER BY м.досвід_роботи DESC
    """,
    "simple"
)

# 9. Запит на частоту відвідувань
add_question(
    "лікарня_009",
    "Які лікарі провели найбільше відвідувань пацієнтів за останній тиждень?",
    """
    SELECT л.прізвище, л.імя, COUNT(в.id) AS кількість_відвідувань
    FROM лікарі л
    JOIN відвідування в ON л.id = в.лікар_id
    WHERE в.дата >= CURRENT_DATE - INTERVAL '7 days'
    GROUP BY л.id, л.прізвище, л.імя
    ORDER BY кількість_відвідувань DESC
    LIMIT 5
    """,
    "simple"
)

# 10. Запит на кількість ліків
add_question(
    "лікарня_010",
    "Які ліки призначаються найчастіше?",
    """
    SELECT л.назва, COUNT(п.id) AS кількість_призначень
    FROM ліки л
    JOIN призначення п ON л.id = п.ліки_id
    GROUP BY л.id, л.назва
    ORDER BY кількість_призначень DESC
    LIMIT 5
    """,
    "simple"
)

# СЕРЕДНЯ СКЛАДНІСТЬ (10 питань)

# 11. Запит з підзапитом
add_question(
    "лікарня_011",
    "Які пацієнти отримали найдорожчі процедури?",
    """
    SELECT 
        п.прізвище, 
        п.імя, 
        проц.назва AS процедура, 
        проц.вартість
    FROM пацієнти п
    JOIN проведені_процедури пп ON п.id = пп.пацієнт_id
    JOIN процедури проц ON пп.процедура_id = проц.id
    WHERE проц.вартість > (SELECT AVG(вартість) * 1.5 FROM процедури)
    ORDER BY проц.вартість DESC
    """,
    "medium"
)

# 12. Запит з обчисленнями та групуванням
add_question(
    "лікарня_012",
    "Яка середня тривалість перебування пацієнтів у лікарні за відділеннями?",
    """
    SELECT 
        в.назва AS відділення,
        ROUND(AVG(п.дата_виписки - п.дата_надходження)) AS середня_тривалість_днів
    FROM відділення в
    JOIN пацієнти п ON в.id = п.відділення_id
    WHERE п.дата_виписки IS NOT NULL
    GROUP BY в.id, в.назва
    ORDER BY середня_тривалість_днів DESC
    """,
    "medium"
)

# 13. Запит з умовною логікою
add_question(
    "лікарня_013",
    "Які відділення мають найвищий відсоток пацієнтів у критичному стані?",
    """
    SELECT 
        в.назва AS відділення,
        COUNT(п.id) AS всього_пацієнтів,
        SUM(CASE WHEN п.стан = 'Критичний' THEN 1 ELSE 0 END) AS критичних_пацієнтів,
        ROUND((SUM(CASE WHEN п.стан = 'Критичний' THEN 1 ELSE 0 END)::numeric / 
               COUNT(п.id)::numeric) * 100, 1) AS відсоток_критичних
    FROM відділення в
    JOIN пацієнти п ON в.id = п.відділення_id
    GROUP BY в.id, в.назва
    HAVING COUNT(п.id) > 0
    ORDER BY відсоток_критичних DESC
    """,
    "medium"
)

# 14. Запит з вибіркою за часом
add_question(
    "лікарня_014",
    "У які години доби найчастіше надходять пацієнти з невідкладними станами?",
    """
    SELECT 
        EXTRACT(HOUR FROM дата_надходження) AS година,
        COUNT(*) AS кількість_пацієнтів
    FROM пацієнти
    WHERE терміновість = 'Невідкладна'
    GROUP BY EXTRACT(HOUR FROM дата_надходження)
    ORDER BY година
    """,
    "medium"
)

# 15. Запит зі складними умовами
add_question(
    "лікарня_015",
    "Які пацієнти перебувають у лікарні більше 10 днів і ще не виписані?",
    """
    SELECT 
        прізвище, 
        імя, 
        діагноз, 
        дата_надходження,
        CURRENT_DATE - дата_надходження AS днів_у_лікарні
    FROM пацієнти
    WHERE 
        дата_виписки IS NULL AND 
        CURRENT_DATE - дата_надходження > 10
    ORDER BY днів_у_лікарні DESC
    """,
    "medium"
)

# 16. Складне об'єднання з умовами
add_question(
    "лікарня_016",
    "Які лікарі мають найбільше пацієнтів з хронічними захворюваннями?",
    """
    SELECT 
        л.прізвище, 
        л.імя, 
        л.спеціалізація,
        COUNT(DISTINCT п.id) AS кількість_пацієнтів
    FROM лікарі л
    JOIN відвідування в ON л.id = в.лікар_id
    JOIN пацієнти п ON в.пацієнт_id = п.id
    WHERE п.тип_захворювання = 'Хронічне'
    GROUP BY л.id, л.прізвище, л.імя, л.спеціалізація
    ORDER BY кількість_пацієнтів DESC
    LIMIT 5
    """,
    "medium"
)

# 17. Багатотабличний запит
add_question(
    "лікарня_017",
    "Які ліки найчастіше призначаються для пацієнтів із серцево-судинними захворюваннями?",
    """
    SELECT 
        л.назва AS ліки,
        л.виробник,
        COUNT(п.id) AS кількість_призначень
    FROM ліки л
    JOIN призначення п ON л.id = п.ліки_id
    JOIN пацієнти пц ON п.пацієнт_id = пц.id
    WHERE 
        пц.діагноз ILIKE '%серц%' OR 
        пц.діагноз ILIKE '%кардіо%' OR 
        пц.діагноз ILIKE '%судин%'
    GROUP BY л.id, л.назва, л.виробник
    ORDER BY кількість_призначень DESC
    LIMIT 10
    """,
    "medium"
)

# 18. Багатовимірний аналіз
add_question(
    "лікарня_018",
    "Як розподіляються пацієнти за віком, статтю та типом захворювання?",
    """
    SELECT 
        CASE 
            WHEN вік < 18 THEN 'До 18'
            WHEN вік BETWEEN 18 AND 30 THEN '18-30'
            WHEN вік BETWEEN 31 AND 45 THEN '31-45'
            WHEN вік BETWEEN 46 AND 60 THEN '46-60'
            ELSE 'Понад 60'
        END AS вікова_група,
        стать,
        тип_захворювання,
        COUNT(*) AS кількість_пацієнтів
    FROM пацієнти
    GROUP BY вікова_група, стать, тип_захворювання
    ORDER BY вікова_група, стать, тип_захворювання
    """,
    "medium"
)

# 19. Запит зі змінним вікном
add_question(
    "лікарня_019",
    "Як змінювалася кількість госпіталізацій за місяцями протягом останнього року?",
    """
    SELECT 
        TO_CHAR(DATE_TRUNC('month', дата_надходження), 'YYYY-MM') AS місяць,
        COUNT(*) AS кількість_госпіталізацій,
        ROUND((COUNT(*) - LAG(COUNT(*), 1, NULL) OVER (ORDER BY DATE_TRUNC('month', дата_надходження)))::numeric / 
              NULLIF(LAG(COUNT(*), 1, NULL) OVER (ORDER BY DATE_TRUNC('month', дата_надходження)), 0)::numeric * 100, 1) 
              AS зміна_відсотків
    FROM пацієнти
    WHERE дата_надходження >= CURRENT_DATE - INTERVAL '1 year'
    GROUP BY DATE_TRUNC('month', дата_надходження)
    ORDER BY DATE_TRUNC('month', дата_надходження)
    """,
    "medium"
)

# 20. Складний розрахунок
add_question(
    "лікарня_020",
    "Яка середня вартість лікування пацієнта за категоріями захворювань?",
    """
    SELECT 
        п.тип_захворювання,
        ROUND(AVG(проц.вартість)) AS середня_вартість_процедур,
        ROUND(AVG(л.вартість * пр.кількість)) AS середня_вартість_ліків,
        ROUND(AVG(проц.вартість) + AVG(л.вартість * пр.кількість)) AS загальна_середня_вартість
    FROM пацієнти п
    LEFT JOIN проведені_процедури пп ON п.id = пп.пацієнт_id
    LEFT JOIN процедури проц ON пп.процедура_id = проц.id
    LEFT JOIN призначення пр ON п.id = пр.пацієнт_id
    LEFT JOIN ліки л ON пр.ліки_id = л.id
    GROUP BY п.тип_захворювання
    ORDER BY загальна_середня_вартість DESC
    """,
    "medium"
)

# СКЛАДНІ ПИТАННЯ (5 питань)

# 21. Складний аналіз ефективності
add_question(
    "лікарня_021",
    "Які лікарі мають найкращі показники успішності лікування за співвідношенням виписаних до загальної кількості пацієнтів?",
    """
    WITH статистика_лікарів AS (
        SELECT 
            л.id,
            л.прізвище,
            л.імя,
            л.спеціалізація,
            в.назва AS відділення,
            COUNT(DISTINCT п.id) AS всього_пацієнтів,
            COUNT(DISTINCT CASE WHEN п.дата_виписки IS NOT NULL THEN п.id END) AS виписано,
            COUNT(DISTINCT CASE WHEN п.стан = 'Покращений' OR п.стан = 'Здоровий' THEN п.id END) AS успішно_вилікувано
        FROM лікарі л
        JOIN відділення в ON л.відділення_id = в.id
        JOIN відвідування вд ON л.id = вд.лікар_id
        JOIN пацієнти п ON вд.пацієнт_id = п.id
        WHERE вд.дата >= CURRENT_DATE - INTERVAL '6 months'
        GROUP BY л.id, л.прізвище, л.імя, л.спеціалізація, в.назва
        HAVING COUNT(DISTINCT п.id) >= 5 -- Мінімально необхідна кількість пацієнтів
    )
    SELECT 
        прізвище,
        імя,
        спеціалізація,
        відділення,
        всього_пацієнтів,
        виписано,
        успішно_вилікувано,
        ROUND((виписано::numeric / всього_пацієнтів::numeric) * 100, 1) AS відсоток_виписаних,
        ROUND((успішно_вилікувано::numeric / NULLIF(виписано, 0)::numeric) * 100, 1) AS ефективність_лікування
    FROM статистика_лікарів
    ORDER BY ефективність_лікування DESC, відсоток_виписаних DESC
    LIMIT 10
    """,
    "complex"
)

# 22. Комплексний аналіз процедур і захворювань
add_question(
    "лікарня_022",
    "Які процедури найефективніші для лікування певних типів захворювань?",
    """
    WITH ефективність_процедур AS (
        SELECT 
            п.тип_захворювання,
            проц.id AS процедура_id,
            проц.назва AS процедура,
            COUNT(DISTINCT п.id) AS кількість_пацієнтів,
            SUM(CASE WHEN п.стан = 'Покращений' OR п.стан = 'Здоровий' THEN 1 ELSE 0 END) AS успішних_випадків,
            ROUND(AVG(п.дата_виписки - п.дата_надходження)) AS середня_тривалість_лікування
        FROM пацієнти п
        JOIN проведені_процедури пп ON п.id = пп.пацієнт_id
        JOIN процедури проц ON пп.процедура_id = проц.id
        WHERE п.дата_виписки IS NOT NULL
        GROUP BY п.тип_захворювання, проц.id, проц.назва
        HAVING COUNT(DISTINCT п.id) >= 3 -- Мінімально необхідна кількість пацієнтів
    )
    SELECT 
        тип_захворювання,
        процедура,
        кількість_пацієнтів,
        успішних_випадків,
        ROUND((успішних_випадків::numeric / кількість_пацієнтів::numeric) * 100, 1) AS ефективність_відсоток,
        середня_тривалість_лікування
    FROM ефективність_процедур
    WHERE (успішних_випадків::numeric / кількість_пацієнтів::numeric) > 0.5
    ORDER BY тип_захворювання, ефективність_відсоток DESC
    """,
    "complex"
)

# 23. Складний аналіз ризиків та прогнозів
add_question(
    "лікарня_023",
    "Які фактори найбільше впливають на тривалість перебування пацієнтів у лікарні?",
    """
    WITH фактори_тривалості AS (
        SELECT 
            CASE 
                WHEN вік < 18 THEN 'До 18'
                WHEN вік BETWEEN 18 AND 40 THEN '18-40'
                WHEN вік BETWEEN 41 AND 60 THEN '41-60'
                ELSE 'Понад 60'
            END AS вікова_група,
            стать,
            тип_захворювання,
            терміновість,
            відділення_id,
            ROUND(AVG(дата_виписки - дата_надходження)) AS середня_тривалість,
            COUNT(*) AS кількість_пацієнтів,
            STDDEV(дата_виписки - дата_надходження) AS стандартне_відхилення
        FROM пацієнти
        WHERE дата_виписки IS NOT NULL
        GROUP BY вікова_група, стать, тип_захворювання, терміновість, відділення_id
        HAVING COUNT(*) >= 5 -- Мінімально необхідна кількість пацієнтів
    )
    SELECT 
        ф.вікова_група,
        ф.стать,
        ф.тип_захворювання,
        ф.терміновість,
        в.назва AS відділення,
        ф.середня_тривалість AS середня_тривалість_днів,
        ф.кількість_пацієнтів,
        ROUND(ф.стандартне_відхилення, 1) AS стандартне_відхилення,
        ROUND(ф.середня_тривалість / (SELECT AVG(дата_виписки - дата_надходження) FROM пацієнти WHERE дата_виписки IS NOT NULL), 2) AS відносна_тривалість
    FROM фактори_тривалості ф
    JOIN відділення в ON ф.відділення_id = в.id
    ORDER BY ф.середня_тривалість DESC
    LIMIT 15
    """,
    "complex"
)

# 24. Комплексний аналіз з застосуванням віконних функцій
add_question(
    "лікарня_024",
    "Як змінювався середній час одужання пацієнтів різних вікових груп за останні роки?",
    """
    WITH річна_статистика AS (
        SELECT 
            EXTRACT(YEAR FROM дата_надходження) AS рік,
            CASE 
                WHEN вік < 18 THEN 'До 18'
                WHEN вік BETWEEN 18 AND 40 THEN '18-40'
                WHEN вік BETWEEN 41 AND 60 THEN '41-60'
                ELSE 'Понад 60'
            END AS вікова_група,
            AVG(дата_виписки - дата_надходження) AS середній_час_одужання,
            COUNT(*) AS кількість_пацієнтів
        FROM пацієнти
        WHERE 
            дата_виписки IS NOT NULL AND
            EXTRACT(YEAR FROM дата_надходження) >= EXTRACT(YEAR FROM CURRENT_DATE) - 5
        GROUP BY рік, вікова_група
    ),
    з_динамікою AS (
        SELECT 
            рік,
            вікова_група,
            ROUND(середній_час_одужання, 1) AS середній_час_одужання_днів,
            кількість_пацієнтів,
            ROUND(середній_час_одужання - LAG(середній_час_одужання, 1) OVER (PARTITION BY вікова_група ORDER BY рік), 1) AS зміна_від_попереднього_року,
            ROUND((середній_час_одужання - LAG(середній_час_одужання, 1) OVER (PARTITION BY вікова_група ORDER BY рік)) / 
                 NULLIF(LAG(середній_час_одужання, 1) OVER (PARTITION BY вікова_група ORDER BY рік), 0) * 100, 1) AS відсоток_зміни
        FROM річна_статистика
    )
    SELECT 
        рік,
        вікова_група,
        середній_час_одужання_днів,
        кількість_пацієнтів,
        зміна_від_попереднього_року,
        відсоток_зміни || '%' AS відсоток_зміни
    FROM з_динамікою
    ORDER BY вікова_група, рік
    """,
    "complex"
)

# 25. Детальний аналіз бюджету та витрат
add_question(
    "лікарня_025",
    "Яку економічну ефективність мають різні відділення лікарні?",
    """
    WITH витрати_відділень AS (
        SELECT 
            в.id AS відділення_id,
            в.назва AS відділення,
            COUNT(DISTINCT п.id) AS кількість_пацієнтів,
            SUM(проц.вартість) AS загальна_вартість_процедур,
            SUM(л.вартість * пр.кількість) AS загальна_вартість_ліків,
            (SUM(проц.вартість) + SUM(л.вартість * пр.кількість)) AS загальні_витрати,
            AVG(п.дата_виписки - п.дата_надходження) AS середня_тривалість_перебування,
            COUNT(DISTINCT CASE WHEN п.стан = 'Покращений' OR п.стан = 'Здоровий' THEN п.id END) AS успішно_вилікувано
        FROM відділення в
        LEFT JOIN пацієнти п ON в.id = п.відділення_id
        LEFT JOIN проведені_процедури пп ON п.id = пп.пацієнт_id
        LEFT JOIN процедури проц ON пп.процедура_id = проц.id
        LEFT JOIN призначення пр ON п.id = пр.пацієнт_id
        LEFT JOIN ліки л ON пр.ліки_id = л.id
        WHERE п.дата_надходження >= CURRENT_DATE - INTERVAL '1 year'
        GROUP BY в.id, в.назва
    )
    SELECT 
        відділення,
        кількість_пацієнтів,
        ROUND(загальна_вартість_процедур) AS загальна_вартість_процедур,
        ROUND(загальна_вартість_ліків) AS загальна_вартість_ліків,
        ROUND(загальні_витрати) AS загальні_витрати,
        ROUND(загальні_витрати / NULLIF(кількість_пацієнтів, 0)) AS середні_витрати_на_пацієнта,
        ROUND(середня_тривалість_перебування, 1) AS середня_тривалість_днів,
        успішно_вилікувано AS успішно_вилікувано,
        ROUND((успішно_вилікувано::numeric / NULLIF(кількість_пацієнтів, 0)::numeric) * 100, 1) AS ефективність_лікування_відсоток,
        ROUND(загальні_витрати / NULLIF(успішно_вилікувано, 0)) AS вартість_успішного_лікування,
        ROUND(успішно_вилікувано::numeric / (загальні_витрати / 10000), 2) AS індекс_ефективності
    FROM витрати_відділень
    ORDER BY індекс_ефективності DESC
    """,
    "complex"
)

# Зберігаємо питання в JSON файл
if not os.path.exists("bird-ukr/questions"):
    os.makedirs("bird-ukr/questions")

output_path = "bird-ukr/questions/лікарня_questions.json"
with open(output_path, 'w', encoding='utf-8') as f:
    json.dump(questions_data, f, ensure_ascii=False, indent=4)

print(f"Створено {len(questions_data)} питань та SQL-запитів для бази даних 'Лікарня'.")
print(f"Збережено у файл: {output_path}") 