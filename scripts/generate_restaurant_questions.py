#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Генератор питань та SQL-запитів для бази даних "Ресторан"

Цей скрипт створює різні типи питань та відповідні SQL-запити для бази даних
ресторану, базуючись на її схемі. Питання включають прості, середні
та складні запити, що відображають різні аспекти роботи ресторану.
"""

import json
import os
import random
from datetime import datetime

def add_question(questions, question_text, sql_query, difficulty, db_id="ресторан"):
    """Додає нове питання до списку питань"""
    question_id = f"{db_id}_{len(questions) + 1:03d}"
    questions.append({
        "question_id": question_id,
        "db_id": db_id,
        "question": question_text,
        "gold_sql": sql_query,
        "difficulty": difficulty
    })

def generate_questions():
    """Генерує питання та SQL-запити для бази даних ресторану"""
    questions = []
    
    # Прості питання (фільтрація та агрегація одної таблиці)
    add_question(
        questions,
        "Скільки столиків є в ресторані?",
        "SELECT COUNT(*) FROM столики WHERE активний = TRUE;",
        "simple"
    )
    
    add_question(
        questions,
        "Які категорії страв представлені в меню?",
        "SELECT назва FROM категорії WHERE активна = TRUE ORDER BY порядок_сортування;",
        "simple"
    )
    
    add_question(
        questions,
        "Які страви в меню вегетаріанські?",
        "SELECT назва, ціна, калорійність FROM страви WHERE вегетаріанська = TRUE AND активна = TRUE ORDER BY ціна;",
        "simple"
    )
    
    add_question(
        questions,
        "Скільки працівників працює на кожній посаді?",
        "SELECT п.назва AS посада, COUNT(пер.ід) AS кількість_працівників FROM посади п LEFT JOIN персонал пер ON п.ід = пер.посада_ід WHERE пер.активний = TRUE GROUP BY п.назва ORDER BY кількість_працівників DESC;",
        "simple"
    )
    
    add_question(
        questions,
        "Які безглютенові страви є в меню?",
        "SELECT назва, ціна FROM страви WHERE безглютенова = TRUE AND активна = TRUE ORDER BY ціна;",
        "simple"
    )
    
    add_question(
        questions,
        "Які методи оплати доступні в ресторані?",
        "SELECT назва, комісія_відсоток FROM методи_оплати WHERE активний = TRUE;",
        "simple"
    )
    
    # Питання середньої складності (JOIN 2-3 таблиць, GROUP BY)
    add_question(
        questions,
        "Які найпопулярніші страви за останній місяць?",
        """
        SELECT с.назва AS страва, 
               COUNT(п.ід) AS кількість_замовлень, 
               SUM(п.кількість) AS загальна_кількість
        FROM позиції_замовлення п
        JOIN страви с ON п.страва_ід = с.ід
        JOIN замовлення з ON п.замовлення_ід = з.ід
        WHERE з.дата_час >= CURRENT_DATE - INTERVAL '1 month'
        GROUP BY с.назва
        ORDER BY загальна_кількість DESC
        LIMIT 10;
        """,
        "medium"
    )
    
    add_question(
        questions,
        "Який середній чайові отримує кожен офіціант?",
        """
        SELECT 
            пер.прізвище, 
            пер.імя, 
            ROUND(AVG(з.чайові), 2) AS середні_чайові,
            COUNT(з.ід) AS кількість_замовлень
        FROM персонал пер
        JOIN замовлення з ON пер.ід = з.офіціант_ід
        WHERE з.чайові > 0
        GROUP BY пер.ід, пер.прізвище, пер.імя
        ORDER BY середні_чайові DESC;
        """,
        "medium"
    )
    
    add_question(
        questions,
        "Яка середня завантаженість столиків за днями тижня?",
        """
        SELECT 
            TO_CHAR(р.дата, 'Day') AS день_тижня,
            COUNT(р.ід) AS кількість_резервацій,
            ROUND(AVG(р.кількість_гостей), 2) AS середня_кількість_гостей
        FROM резервації р
        WHERE р.відмітка_про_відвідування = TRUE
        GROUP BY TO_CHAR(р.дата, 'Day'), EXTRACT(DOW FROM р.дата)
        ORDER BY EXTRACT(DOW FROM р.дата);
        """,
        "medium"
    )
    
    add_question(
        questions,
        "Які категорії страв приносять найбільший прибуток?",
        """
        SELECT 
            к.назва AS категорія,
            COUNT(DISTINCT с.ід) AS кількість_страв,
            COUNT(п.ід) AS кількість_замовлень,
            SUM(п.загальна_ціна) AS загальний_дохід
        FROM категорії к
        JOIN страви с ON к.ід = с.категорія_ід
        JOIN позиції_замовлення п ON с.ід = п.страва_ід
        JOIN замовлення з ON п.замовлення_ід = з.ід
        WHERE з.дата_час >= CURRENT_DATE - INTERVAL '6 months'
        GROUP BY к.назва
        ORDER BY загальний_дохід DESC;
        """,
        "medium"
    )
    
    add_question(
        questions,
        "Які інгредієнти закінчуються та потребують термінового замовлення?",
        """
        SELECT 
            і.назва AS інгредієнт,
            і.кількість_на_складі,
            і.мінімальна_кількість,
            п.назва AS постачальник,
            п.телефон AS контакт_постачальника
        FROM інгредієнти і
        JOIN постачальники п ON і.постачальник_ід = п.ід
        WHERE і.кількість_на_складі <= і.мінімальна_кількість
        AND п.активний = TRUE
        ORDER BY (і.кількість_на_складі / NULLIF(і.мінімальна_кількість, 0)) ASC;
        """,
        "medium"
    )
    
    add_question(
        questions,
        "Яка ефективність роботи офіціантів (кількість обслугованих клієнтів за годину)?",
        """
        WITH робочі_години AS (
            SELECT 
                з.персонал_ід,
                SUM(EXTRACT(EPOCH FROM (з.фактичний_час_кінця - з.фактичний_час_початку))/3600 - з.перерва_хвилин/60.0) AS години
            FROM зміни_персоналу з
            WHERE з.фактичний_час_початку IS NOT NULL 
            AND з.фактичний_час_кінця IS NOT NULL
            AND з.дата >= CURRENT_DATE - INTERVAL '3 months'
            GROUP BY з.персонал_ід
        ),
        обслуговані_клієнти AS (
            SELECT 
                з.офіціант_ід,
                SUM(з.кількість_клієнтів) AS клієнтів
            FROM замовлення з
            WHERE з.дата_час >= CURRENT_DATE - INTERVAL '3 months'
            GROUP BY з.офіціант_ід
        )
        SELECT 
            п.прізвище,
            п.імя,
            о.клієнтів AS загальна_кількість_клієнтів,
            р.години AS відпрацьовано_годин,
            ROUND(о.клієнтів / NULLIF(р.години, 0), 2) AS клієнтів_на_годину
        FROM персонал п
        JOIN робочі_години р ON п.ід = р.персонал_ід
        JOIN обслуговані_клієнти о ON п.ід = о.офіціант_ід
        JOIN посади пос ON п.посада_ід = пос.ід
        WHERE пос.назва = 'Офіціант'
        ORDER BY клієнтів_на_годину DESC;
        """,
        "medium"
    )
    
    # Складні питання (складні JOIN, підзапити, HAVING, агрегатні функції, віконні функції)
    add_question(
        questions,
        "Який прибуток ресторану за кожним днем тижня протягом останнього кварталу?",
        """
        WITH щоденні_доходи AS (
            SELECT 
                з.дата_час::date AS дата,
                EXTRACT(DOW FROM з.дата_час) AS день_тижня_номер,
                TO_CHAR(з.дата_час, 'Day') AS день_тижня,
                SUM(з.фінальна_сума) AS дохід,
                COUNT(DISTINCT з.ід) AS кількість_замовлень,
                SUM(з.кількість_клієнтів) AS кількість_клієнтів
            FROM замовлення з
            WHERE з.дата_час >= CURRENT_DATE - INTERVAL '3 months'
            AND з.статус_ід = (SELECT ід FROM статуси_замовлень WHERE назва = 'Оплачено')
            GROUP BY з.дата_час::date, EXTRACT(DOW FROM з.дата_час), TO_CHAR(з.дата_час, 'Day')
        )
        SELECT 
            день_тижня,
            COUNT(*) AS кількість_днів,
            ROUND(AVG(дохід), 2) AS середній_дохід,
            ROUND(AVG(кількість_замовлень), 1) AS середня_кількість_замовлень,
            ROUND(AVG(кількість_клієнтів), 1) AS середня_кількість_клієнтів,
            ROUND(SUM(дохід), 2) AS загальний_дохід,
            ROUND(SUM(дохід) / SUM(кількість_клієнтів), 2) AS середній_чек
        FROM щоденні_доходи
        GROUP BY день_тижня, день_тижня_номер
        ORDER BY день_тижня_номер;
        """,
        "complex"
    )
    
    add_question(
        questions,
        "Які страви мають найкраще співвідношення прибутку до використання інгредієнтів?",
        """
        WITH вартість_інгредієнтів AS (
            SELECT 
                с.ід AS страва_ід,
                с.назва AS страва,
                с.ціна AS ціна_продажу,
                SUM(ві.кількість * і.ціна_за_одиницю) AS собівартість
            FROM страви с
            JOIN використання_інгредієнтів ві ON с.ід = ві.страва_ід
            JOIN інгредієнти і ON ві.інгредієнт_ід = і.ід
            GROUP BY с.ід, с.назва, с.ціна
        ),
        продажі AS (
            SELECT 
                с.ід AS страва_ід,
                COUNT(п.ід) AS кількість_продажів,
                SUM(п.загальна_ціна) AS загальний_дохід
            FROM страви с
            JOIN позиції_замовлення п ON с.ід = п.страва_ід
            JOIN замовлення з ON п.замовлення_ід = з.ід
            WHERE з.дата_час >= CURRENT_DATE - INTERVAL '3 months'
            GROUP BY с.ід
        )
        SELECT 
            ві.страва,
            ві.ціна_продажу,
            ROUND(ві.собівартість, 2) AS собівартість,
            ROUND(ві.ціна_продажу - ві.собівартість, 2) AS прибуток_на_одиницю,
            ROUND((ві.ціна_продажу - ві.собівартість) / NULLIF(ві.собівартість, 0) * 100, 2) AS відсоток_прибутку,
            п.кількість_продажів,
            ROUND(п.загальний_дохід, 2) AS загальний_дохід,
            ROUND(п.загальний_дохід - (п.кількість_продажів * ві.собівартість), 2) AS загальний_прибуток
        FROM вартість_інгредієнтів ві
        JOIN продажі п ON ві.страва_ід = п.страва_ід
        WHERE п.кількість_продажів > 0
        ORDER BY відсоток_прибутку DESC;
        """,
        "complex"
    )
    
    add_question(
        questions,
        "Які часи протягом дня і тижня є найбільш завантаженими для ресторану?",
        """
        WITH годинні_дані AS (
            SELECT 
                EXTRACT(DOW FROM з.дата_час) AS день_тижня,
                TO_CHAR(з.дата_час, 'Day') AS назва_дня,
                EXTRACT(HOUR FROM з.дата_час) AS година,
                TO_CHAR(з.дата_час, 'HH24:00') AS час,
                COUNT(з.ід) AS кількість_замовлень,
                SUM(з.кількість_клієнтів) AS кількість_клієнтів,
                SUM(з.фінальна_сума) AS дохід
            FROM замовлення з
            WHERE з.дата_час >= CURRENT_DATE - INTERVAL '3 months'
            GROUP BY EXTRACT(DOW FROM з.дата_час), TO_CHAR(з.дата_час, 'Day'), 
                     EXTRACT(HOUR FROM з.дата_час), TO_CHAR(з.дата_час, 'HH24:00')
        ),
        рейтинг_годин AS (
            SELECT 
                година,
                SUM(кількість_замовлень) AS загальна_кількість_замовлень,
                SUM(кількість_клієнтів) AS загальна_кількість_клієнтів,
                ROUND(AVG(кількість_замовлень), 2) AS середня_кількість_замовлень,
                ROUND(AVG(кількість_клієнтів), 2) AS середня_кількість_клієнтів
            FROM годинні_дані
            GROUP BY година
            ORDER BY середня_кількість_клієнтів DESC
        ),
        завантаженість_днів AS (
            SELECT 
                день_тижня,
                назва_дня,
                SUM(кількість_замовлень) AS загальна_кількість_замовлень,
                SUM(кількість_клієнтів) AS загальна_кількість_клієнтів,
                ROUND(AVG(кількість_замовлень), 2) AS середня_кількість_замовлень_на_годину,
                ROUND(AVG(кількість_клієнтів), 2) AS середня_кількість_клієнтів_на_годину
            FROM годинні_дані
            GROUP BY день_тижня, назва_дня
            ORDER BY загальна_кількість_клієнтів DESC
        ),
        піки_по_днях AS (
            SELECT 
                гд.день_тижня,
                гд.назва_дня,
                гд.година,
                гд.час,
                гд.кількість_клієнтів,
                RANK() OVER (PARTITION BY гд.день_тижня ORDER BY гд.кількість_клієнтів DESC) AS ранг
            FROM годинні_дані гд
        )
        SELECT 
            'Найзавантаженіші години дня' AS аналіз,
            NULL AS день_тижня,
            рг.година || ':00-' || рг.година || ':59' AS період,
            рг.загальна_кількість_замовлень,
            рг.загальна_кількість_клієнтів,
            рг.середня_кількість_замовлень,
            рг.середня_кількість_клієнтів
        FROM рейтинг_годин рг
        WHERE рг.година BETWEEN 10 AND 23
        LIMIT 5
        
        UNION ALL
        
        SELECT 
            'Найзавантаженіші дні тижня' AS аналіз,
            зд.назва_дня AS день_тижня,
            NULL AS період,
            зд.загальна_кількість_замовлень,
            зд.загальна_кількість_клієнтів,
            зд.середня_кількість_замовлень_на_годину,
            зд.середня_кількість_клієнтів_на_годину
        FROM завантаженість_днів зд
        LIMIT 5
        
        UNION ALL
        
        SELECT 
            'Пікові години для кожного дня' AS аналіз,
            пд.назва_дня AS день_тижня,
            пд.час AS період,
            NULL AS загальна_кількість_замовлень,
            пд.кількість_клієнтів AS загальна_кількість_клієнтів,
            NULL AS середня_кількість_замовлень,
            NULL AS середня_кількість_клієнтів
        FROM піки_по_днях пд
        WHERE пд.ранг = 1
        ORDER BY пд.день_тижня;
        """,
        "complex"
    )
    
    add_question(
        questions,
        "Яка ефективність персоналу, зокрема кухарів, за швидкістю приготування страв?",
        """
        WITH приготування_страв AS (
            SELECT 
                з.ід AS зміна_ід,
                п.ід AS персонал_ід,
                п.прізвище,
                п.імя,
                з.дата,
                пос.назва AS посада,
                COUNT(DISTINCT по.ід) AS кількість_приготованих_позицій,
                SUM(с.час_приготування_хвилин) AS загальний_час_приготування,
                AVG(EXTRACT(EPOCH FROM (по.час_приготування - по.час_замовлення))/60) AS фактичний_середній_час_хвилин
            FROM персонал п
            JOIN посади пос ON п.посада_ід = пос.ід
            JOIN зміни_персоналу з ON п.ід = з.персонал_ід
            JOIN позиції_замовлення по ON 
                по.час_замовлення BETWEEN з.дата::timestamp + з.фактичний_час_початку AND з.дата::timestamp + з.фактичний_час_кінця
            JOIN страви с ON по.страва_ід = с.ід
            WHERE пос.назва LIKE '%кухар%'
            AND з.дата >= CURRENT_DATE - INTERVAL '1 month'
            AND по.час_приготування IS NOT NULL
            GROUP BY з.ід, п.ід, п.прізвище, п.імя, з.дата, пос.назва
        )
        SELECT 
            прізвище,
            імя,
            посада,
            COUNT(зміна_ід) AS кількість_змін,
            SUM(кількість_приготованих_позицій) AS загальна_кількість_страв,
            ROUND(AVG(кількість_приготованих_позицій), 2) AS середня_кількість_страв_за_зміну,
            ROUND(AVG(фактичний_середній_час_хвилин), 2) AS середній_час_приготування,
            ROUND(AVG(загальний_час_приготування / NULLIF(кількість_приготованих_позицій, 0)), 2) AS очікуваний_середній_час,
            ROUND(AVG(загальний_час_приготування / NULLIF(фактичний_середній_час_хвилин, 0) * 100), 2) AS ефективність_відсоток
        FROM приготування_страв
        GROUP BY персонал_ід, прізвище, імя, посада
        HAVING SUM(кількість_приготованих_позицій) > 10
        ORDER BY середня_кількість_страв_за_зміну DESC, ефективність_відсоток DESC;
        """,
        "complex"
    )
    
    add_question(
        questions,
        "Як змінювався дохід ресторану за місяцями, порівняно з минулим роком?",
        """
        WITH місячні_доходи AS (
            SELECT 
                EXTRACT(YEAR FROM з.дата_час) AS рік,
                EXTRACT(MONTH FROM з.дата_час) AS місяць,
                TO_CHAR(з.дата_час, 'Month') AS назва_місяця,
                COUNT(DISTINCT з.ід) AS кількість_замовлень,
                SUM(з.кількість_клієнтів) AS кількість_клієнтів,
                SUM(з.фінальна_сума) AS загальний_дохід
            FROM замовлення з
            WHERE з.дата_час >= (CURRENT_DATE - INTERVAL '2 years')
            AND з.статус_ід = (SELECT ід FROM статуси_замовлень WHERE назва = 'Оплачено')
            GROUP BY EXTRACT(YEAR FROM з.дата_час), EXTRACT(MONTH FROM з.дата_час), TO_CHAR(з.дата_час, 'Month')
        ),
        порівняння_років AS (
            SELECT 
                т.рік,
                т.місяць,
                т.назва_місяця,
                т.кількість_замовлень,
                т.кількість_клієнтів,
                т.загальний_дохід,
                LAG(т.кількість_замовлень, 12) OVER (ORDER BY т.рік, т.місяць) AS минулорічна_кількість_замовлень,
                LAG(т.кількість_клієнтів, 12) OVER (ORDER BY т.рік, т.місяць) AS минулорічна_кількість_клієнтів,
                LAG(т.загальний_дохід, 12) OVER (ORDER BY т.рік, т.місяць) AS минулорічний_дохід
            FROM місячні_доходи т
        )
        SELECT 
            рік,
            місяць,
            назва_місяця,
            кількість_замовлень,
            ROUND(загальний_дохід, 2) AS загальний_дохід,
            ROUND(загальний_дохід / NULLIF(кількість_замовлень, 0), 2) AS середній_чек,
            минулорічна_кількість_замовлень,
            ROUND(минулорічний_дохід, 2) AS минулорічний_дохід,
            CASE 
                WHEN минулорічний_дохід IS NOT NULL AND минулорічний_дохід > 0 
                THEN ROUND(((загальний_дохід - минулорічний_дохід) / минулорічний_дохід * 100), 2)
                ELSE NULL 
            END AS відсоток_зміни
        FROM порівняння_років
        WHERE рік = EXTRACT(YEAR FROM CURRENT_DATE) OR рік = EXTRACT(YEAR FROM CURRENT_DATE) - 1
        ORDER BY рік DESC, місяць;
        """,
        "complex"
    )
    
    # Зберігаємо згенеровані питання у JSON файлі
    output_dir = "bird-ukr/questions"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
        
    output_file = os.path.join(output_dir, "ресторан_questions.json")
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(questions, f, ensure_ascii=False, indent=4)
        
    print(f"Створено {len(questions)} питань та SQL-запитів для бази даних 'Ресторан'")
    print(f"Збережено у файлі: {output_file}")

if __name__ == "__main__":
    generate_questions() 