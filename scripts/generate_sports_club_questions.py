#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Генератор питань та SQL-запитів для бази даних "Спортивний клуб"

Цей скрипт створює набір питань українською мовою та відповідних SQL-запитів
різних рівнів складності (простий, середній, складний) для бази даних "Спортивний клуб".
"""

import json
import os
from datetime import datetime

# Структура для зберігання питань та SQL-запитів
questions_data = []

# Функція для додавання нового питання
def add_question(question_id, question, sql, difficulty):
    questions_data.append({
        "question_id": question_id,
        "db_id": "спортивний_клуб",
        "db_path": "database/спортивний_клуб",
        "question": question,
        "gold_sql": sql,
        "difficulty": difficulty,
        "evidence": None,
        "execution_details": {
            "execution_time": None,  # Буде заповнено пізніше
            "result_size": None  # Буде заповнено пізніше
        }
    })

# ПРОСТІ ПИТАННЯ (10 питань)

# 1. Знайти інформацію про тренерів за певною умовою
add_question(
    "спортивний_клуб_001",
    "Знайти всіх тренерів, які працюють в клубі більше 5 років",
    """
    SELECT прізвище, імя, досвід_роботи 
    FROM тренери 
    WHERE досвід_роботи > 5 AND активний = TRUE
    ORDER BY досвід_роботи DESC
    """,
    "simple"
)

# 2. Показати інформацію, відсортовану за критерієм
add_question(
    "спортивний_клуб_002",
    "Показати всі групові заняття, відсортовані за тривалістю (від найдовших до найкоротших)",
    """
    SELECT назва, тривалість, опис 
    FROM групові_заняття 
    ORDER BY тривалість DESC
    """,
    "simple"
)

# 3. Фільтрація за кількісними показниками
add_question(
    "спортивний_клуб_003",
    "Які групові заняття мають максимальну кількість учасників більше 15 осіб?",
    """
    SELECT назва, максимальна_кількість_учасників, опис 
    FROM групові_заняття 
    WHERE максимальна_кількість_учасників > 15
    ORDER BY максимальна_кількість_учасників DESC
    """,
    "simple"
)

# 4. Вибірка за категорією/типом
add_question(
    "спортивний_клуб_004",
    "Які типи абонементів включають доступ до сауни?",
    """
    SELECT назва, вартість, тривалість, опис 
    FROM типи_абонементів 
    WHERE сауна = TRUE AND активний = TRUE
    ORDER BY вартість
    """,
    "simple"
)

# 5. Вибірка за часовим проміжком
add_question(
    "спортивний_клуб_005",
    "Показати всі заняття, що проводяться в понеділок",
    """
    SELECT з.назва, р.час_початку, р.час_закінчення, т.прізвище, т.імя
    FROM розклад_занять р
    JOIN групові_заняття з ON р.заняття_id = з.id
    JOIN тренери т ON р.тренер_id = т.id
    WHERE р.день_тижня = 'Понеділок' AND р.активний = TRUE
    ORDER BY р.час_початку
    """,
    "simple"
)

# 6. Підрахунок кількості записів
add_question(
    "спортивний_клуб_006",
    "Скільки активних тренерів працює в клубі?",
    """
    SELECT COUNT(*) AS кількість_тренерів
    FROM тренери
    WHERE активний = TRUE
    """,
    "simple"
)

# 7. Пошук з використанням порівняння значень
add_question(
    "спортивний_клуб_007",
    "Які типи абонементів мають вартість менше 1000 гривень?",
    """
    SELECT назва, вартість, тривалість, опис
    FROM типи_абонементів
    WHERE вартість < 1000 AND активний = TRUE
    ORDER BY вартість
    """,
    "simple"
)

# 8. Пошук за частковою відповідністю тексту
add_question(
    "спортивний_клуб_008",
    "Знайти всі групові заняття, в назві яких є слово 'фітнес'",
    """
    SELECT назва, тривалість, опис
    FROM групові_заняття
    WHERE назва ILIKE '%фітнес%'
    ORDER BY назва
    """,
    "simple"
)

# 9. Вибірка унікальних значень
add_question(
    "спортивний_клуб_009",
    "Які спеціалізації представлені серед тренерів клубу?",
    """
    SELECT DISTINCT с.назва
    FROM спеціалізації_тренерів с
    JOIN тренери т ON с.id = т.спеціалізація_id
    WHERE т.активний = TRUE
    ORDER BY с.назва
    """,
    "simple"
)

# 10. Пошук записів з певними умовами
add_question(
    "спортивний_клуб_010",
    "Знайти всіх членів клубу, які зареєструвалися в цьому році",
    """
    SELECT прізвище, імя, дата_реєстрації
    FROM члени_клубу
    WHERE EXTRACT(YEAR FROM дата_реєстрації) = EXTRACT(YEAR FROM CURRENT_DATE)
    ORDER BY дата_реєстрації DESC
    """,
    "simple"
)

# СЕРЕДНІЙ РІВЕНЬ СКЛАДНОСТІ (15 питань)

# 11. Агрегація з групуванням
add_question(
    "спортивний_клуб_011",
    "Скільки членів клубу має кожен тип абонементу?",
    """
    SELECT та.назва AS тип_абонементу, COUNT(чк.id) AS кількість_членів
    FROM типи_абонементів та
    JOIN членства ч ON та.id = ч.тип_абонементу_id
    JOIN члени_клубу чк ON ч.id = чк.членство_id
    WHERE чк.активний = TRUE
    GROUP BY та.назва
    ORDER BY кількість_членів DESC
    """,
    "medium"
)

# 12. З'єднання кількох таблиць
add_question(
    "спортивний_клуб_012",
    "Які тренери проводять заняття в залі для групових тренувань?",
    """
    SELECT DISTINCT т.прізвище, т.імя, т.email, т.телефон
    FROM тренери т
    JOIN розклад_занять рз ON т.id = рз.тренер_id
    JOIN приміщення п ON рз.приміщення_id = п.id
    JOIN типи_приміщень тп ON п.тип_приміщення_id = тп.id
    WHERE тп.назва = 'Зал для групових тренувань' AND т.активний = TRUE
    ORDER BY т.прізвище, т.імя
    """,
    "medium"
)

# 13. Використання підзапиту
add_question(
    "спортивний_клуб_013",
    "Хто з членів клубу має абонемент з найбільшою вартістю?",
    """
    SELECT чк.прізвище, чк.імя, чк.телефон, ч.вартість_фактична
    FROM члени_клубу чк
    JOIN членства ч ON чк.членство_id = ч.id
    WHERE ч.вартість_фактична = (
        SELECT MAX(вартість_фактична)
        FROM членства
    )
    """,
    "medium"
)

# 14. Агрегація з умовою HAVING
add_question(
    "спортивний_клуб_014",
    "Які приміщення використовуються для більш ніж 5 різних групових занять?",
    """
    SELECT п.назва, COUNT(DISTINCT рз.заняття_id) AS кількість_занять
    FROM приміщення п
    JOIN розклад_занять рз ON п.id = рз.приміщення_id
    WHERE рз.активний = TRUE
    GROUP BY п.id, п.назва
    HAVING COUNT(DISTINCT рз.заняття_id) > 5
    ORDER BY кількість_занять DESC
    """,
    "medium"
)

# 15. Комбінована фільтрація даних
add_question(
    "спортивний_клуб_015",
    "Знайти всіх тренерів-жінок, які мають спеціалізацію в йозі або пілатесі",
    """
    SELECT т.прізвище, т.імя, ст.назва AS спеціалізація
    FROM тренери т
    JOIN спеціалізації_тренерів ст ON т.спеціалізація_id = ст.id
    WHERE т.стать = 'Жіноча'
    AND т.активний = TRUE
    AND ст.назва IN ('Йога', 'Пілатес')
    ORDER BY т.прізвище, т.імя
    """,
    "medium"
)

# 16. Аналіз відвідуваності
add_question(
    "спортивний_клуб_016",
    "Які дні тижня мають найбільшу кількість відвідувань?",
    """
    SELECT рз.день_тижня, COUNT(в.id) AS кількість_відвідувань
    FROM відвідування в
    JOIN записи_на_заняття зз ON в.запис_на_заняття_id = зз.id
    JOIN розклад_занять рз ON зз.розклад_заняття_id = рз.id
    GROUP BY рз.день_тижня
    ORDER BY кількість_відвідувань DESC
    """,
    "medium"
)

# 17. Використання CASE для класифікації
add_question(
    "спортивний_клуб_017",
    "Розподілити групові заняття за категоріями тривалості (короткі, середні, довгі)",
    """
    SELECT 
        назва,
        тривалість,
        CASE 
            WHEN тривалість <= 30 THEN 'Коротке'
            WHEN тривалість > 30 AND тривалість <= 60 THEN 'Середнє'
            ELSE 'Довге'
        END AS категорія_тривалості
    FROM групові_заняття
    ORDER BY тривалість
    """,
    "medium"
)

# 18. Аналіз фінансів
add_question(
    "спортивний_клуб_018",
    "Яка загальна сума платежів за кожен місяць поточного року?",
    """
    SELECT 
        EXTRACT(MONTH FROM дата_платежу) AS місяць,
        SUM(сума) AS загальна_сума
    FROM платежі
    WHERE EXTRACT(YEAR FROM дата_платежу) = EXTRACT(YEAR FROM CURRENT_DATE)
    GROUP BY EXTRACT(MONTH FROM дата_платежу)
    ORDER BY місяць
    """,
    "medium"
)

# 19. Підрахунок статистики з використанням JOIN та GROUP BY
add_question(
    "спортивний_клуб_019",
    "Яка середня оцінка кожного тренера від членів клубу?",
    """
    SELECT 
        т.прізвище,
        т.імя,
        ROUND(AVG(о.оцінка), 2) AS середня_оцінка,
        COUNT(о.id) AS кількість_відгуків
    FROM тренери т
    LEFT JOIN оцінки_тренерів о ON т.id = о.тренер_id
    WHERE т.активний = TRUE
    GROUP BY т.id, т.прізвище, т.імя
    ORDER BY середня_оцінка DESC
    """,
    "medium"
)

# 20. Аналіз часових проміжків
add_question(
    "спортивний_клуб_020",
    "Які члени клубу мають абонементи, що закінчуються протягом наступних 30 днів?",
    """
    SELECT 
        чк.прізвище,
        чк.імя,
        чк.телефон,
        ч.дата_завершення,
        та.назва AS тип_абонементу
    FROM члени_клубу чк
    JOIN членства ч ON чк.членство_id = ч.id
    JOIN типи_абонементів та ON ч.тип_абонементу_id = та.id
    WHERE ч.дата_завершення BETWEEN CURRENT_DATE AND (CURRENT_DATE + INTERVAL '30 days')
    ORDER BY ч.дата_завершення
    """,
    "medium"
)

# 21. Використання JOIN з декількома умовами
add_question(
    "спортивний_клуб_021",
    "Які члени клубу відвідали більше 10 групових занять за останній місяць?",
    """
    SELECT 
        чк.прізвище,
        чк.імя,
        COUNT(в.id) AS кількість_відвідувань
    FROM члени_клубу чк
    JOIN відвідування в ON чк.id = в.член_клубу_id
    JOIN записи_на_заняття зз ON в.запис_на_заняття_id = зз.id
    WHERE в.дата_відвідування >= (CURRENT_DATE - INTERVAL '1 month')
    GROUP BY чк.id, чк.прізвище, чк.імя
    HAVING COUNT(в.id) > 10
    ORDER BY кількість_відвідувань DESC
    """,
    "medium"
)

# 22. Використання підзапитів в різних частинах запиту
add_question(
    "спортивний_клуб_022",
    "Які тренери проводять заняття, що мають вищу за середню відвідуваність?",
    """
    SELECT DISTINCT 
        т.прізвище,
        т.імя,
        гз.назва AS назва_заняття
    FROM тренери т
    JOIN розклад_занять рз ON т.id = рз.тренер_id
    JOIN групові_заняття гз ON рз.заняття_id = гз.id
    WHERE рз.id IN (
        SELECT рз.id
        FROM розклад_занять рз
        JOIN записи_на_заняття зз ON рз.id = зз.розклад_заняття_id
        JOIN відвідування в ON зз.id = в.запис_на_заняття_id
        GROUP BY рз.id
        HAVING COUNT(в.id) > (
            SELECT AVG(відвідування_заняття)
            FROM (
                SELECT COUNT(в.id) AS відвідування_заняття
                FROM розклад_занять рз
                JOIN записи_на_заняття зз ON рз.id = зз.розклад_заняття_id
                JOIN відвідування в ON зз.id = в.запис_на_заняття_id
                GROUP BY рз.id
            ) AS підрахунок_відвідувань
        )
    )
    ORDER BY т.прізвище, т.імя
    """,
    "medium"
)

# 23. Комбінований аналіз даних
add_question(
    "спортивний_клуб_023",
    "Які групові заняття є найпопулярнішими серед жінок?",
    """
    SELECT 
        гз.назва,
        COUNT(зз.id) AS кількість_записів
    FROM групові_заняття гз
    JOIN розклад_занять рз ON гз.id = рз.заняття_id
    JOIN записи_на_заняття зз ON рз.id = зз.розклад_заняття_id
    JOIN члени_клубу чк ON зз.член_клубу_id = чк.id
    WHERE чк.стать = 'Жіноча'
    GROUP BY гз.id, гз.назва
    ORDER BY кількість_записів DESC
    LIMIT 5
    """,
    "medium"
)

# 24. Порівняння періодів
add_question(
    "спортивний_клуб_024",
    "Як змінилася кількість відвідувань за останні три місяці порівняно з попередніми трьома?",
    """
    SELECT 
        'Останні 3 місяці' AS період,
        COUNT(id) AS кількість_відвідувань
    FROM відвідування
    WHERE дата_відвідування BETWEEN (CURRENT_DATE - INTERVAL '3 months') AND CURRENT_DATE
    
    UNION ALL
    
    SELECT 
        'Попередні 3 місяці' AS період,
        COUNT(id) AS кількість_відвідувань
    FROM відвідування
    WHERE дата_відвідування BETWEEN (CURRENT_DATE - INTERVAL '6 months') AND (CURRENT_DATE - INTERVAL '3 months')
    """,
    "medium"
)

# 25. Складне групування та сортування
add_question(
    "спортивний_клуб_025",
    "Яка середня тривалість візиту членів клубу в різні дні тижня?",
    """
    SELECT 
        TO_CHAR(дата_відвідування, 'Day') AS день_тижня,
        ROUND(AVG(EXTRACT(EPOCH FROM (час_виходу - час_приходу)) / 60), 2) AS середня_тривалість_хвилин
    FROM відвідування
    WHERE час_виходу IS NOT NULL
    GROUP BY день_тижня
    ORDER BY 
        CASE 
            WHEN день_тижня = 'Monday' THEN 1
            WHEN день_тижня = 'Tuesday' THEN 2
            WHEN день_тижня = 'Wednesday' THEN 3
            WHEN день_тижня = 'Thursday' THEN 4
            WHEN день_тижня = 'Friday' THEN 5
            WHEN день_тижня = 'Saturday' THEN 6
            WHEN день_тижня = 'Sunday' THEN 7
        END
    """,
    "medium"
)

# СКЛАДНИЙ РІВЕНЬ (10 питань)

# 26. Використання віконних функцій
add_question(
    "спортивний_клуб_026",
    "Показати топ-3 найбільш відвідуваних групових занять для кожного місяця цього року",
    """
    WITH рейтинг_занять AS (
        SELECT 
            гз.назва, 
            EXTRACT(MONTH FROM в.дата_відвідування) AS місяць,
            COUNT(*) AS кількість,
            ROW_NUMBER() OVER (PARTITION BY EXTRACT(MONTH FROM в.дата_відвідування) ORDER BY COUNT(*) DESC) AS рейтинг
        FROM групові_заняття гз
        JOIN розклад_занять рз ON гз.id = рз.заняття_id
        JOIN записи_на_заняття зз ON рз.id = зз.розклад_заняття_id
        JOIN відвідування в ON зз.id = в.запис_на_заняття_id
        WHERE EXTRACT(YEAR FROM в.дата_відвідування) = EXTRACT(YEAR FROM CURRENT_DATE)
        GROUP BY гз.id, гз.назва, EXTRACT(MONTH FROM в.дата_відвідування)
    )
    SELECT 
        TO_CHAR(TO_DATE(місяць::TEXT, 'MM'), 'Month') AS місяць,
        назва,
        кількість,
        рейтинг
    FROM рейтинг_занять
    WHERE рейтинг <= 3
    ORDER BY місяць, рейтинг
    """,
    "complex"
)

# 27. Використання рекурсивного CTE
add_question(
    "спортивний_клуб_027",
    "Знайти всіх членів клубу, які відвідували групові заняття протягом кожного місяця за останній рік (постійні відвідувачі)",
    """
    WITH RECURSIVE місяці AS (
        SELECT CAST(DATE_TRUNC('month', CURRENT_DATE - INTERVAL '11 months') AS DATE) AS місяць
        UNION ALL
        SELECT CAST(DATE_TRUNC('month', місяць + INTERVAL '1 month') AS DATE)
        FROM місяці
        WHERE місяць < DATE_TRUNC('month', CURRENT_DATE)
    ),
    відвідування_по_місяцях AS (
        SELECT 
            чк.id AS член_id,
            чк.прізвище,
            чк.імя,
            DATE_TRUNC('month', в.дата_відвідування) AS місяць
        FROM члени_клубу чк
        JOIN відвідування в ON чк.id = в.член_клубу_id
        JOIN записи_на_заняття зз ON в.запис_на_заняття_id = зз.id
        WHERE в.дата_відвідування >= (CURRENT_DATE - INTERVAL '1 year')
        GROUP BY чк.id, чк.прізвище, чк.імя, DATE_TRUNC('month', в.дата_відвідування)
    ),
    кількість_місяців AS (
        SELECT 
            член_id,
            прізвище,
            імя,
            COUNT(DISTINCT місяць) AS відвідані_місяці
        FROM відвідування_по_місяцях
        GROUP BY член_id, прізвище, імя
    )
    SELECT 
        прізвище,
        імя,
        відвідані_місяці
    FROM кількість_місяців
    WHERE відвідані_місяці = 12
    ORDER BY прізвище, імя
    """,
    "complex"
)

# 28. Використання підзапитів у багатьох рівнях
add_question(
    "спортивний_клуб_028",
    "Знайти членів клубу, які відвідували всі типи групових занять",
    """
    SELECT 
        чк.прізвище,
        чк.імя
    FROM члени_клубу чк
    WHERE NOT EXISTS (
        SELECT гз.id
        FROM групові_заняття гз
        WHERE NOT EXISTS (
            SELECT 1
            FROM відвідування в
            JOIN записи_на_заняття зз ON в.запис_на_заняття_id = зз.id
            JOIN розклад_занять рз ON зз.розклад_заняття_id = рз.id
            WHERE в.член_клубу_id = чк.id
            AND рз.заняття_id = гз.id
        )
    )
    ORDER BY чк.прізвище, чк.імя
    """,
    "complex"
)

# 29. Комплексний аналіз з використанням віконних функцій
add_question(
    "спортивний_клуб_029",
    "Для кожного тренера показати зростання кількості проведених занять за останні 6 місяців",
    """
    WITH місячні_заняття AS (
        SELECT 
            т.id AS тренер_id,
            т.прізвище,
            т.імя,
            DATE_TRUNC('month', в.дата_відвідування) AS місяць,
            COUNT(DISTINCT рз.id) AS кількість_занять
        FROM тренери т
        JOIN розклад_занять рз ON т.id = рз.тренер_id
        JOIN записи_на_заняття зз ON рз.id = зз.розклад_заняття_id
        JOIN відвідування в ON зз.id = в.запис_на_заняття_id
        WHERE в.дата_відвідування >= (CURRENT_DATE - INTERVAL '6 months')
        GROUP BY т.id, т.прізвище, т.імя, DATE_TRUNC('month', в.дата_відвідування)
    )
    SELECT 
        прізвище,
        імя,
        TO_CHAR(місяць, 'Month YYYY') AS місяць,
        кількість_занять,
        кількість_занять - LAG(кількість_занять, 1, 0) OVER (PARTITION BY тренер_id ORDER BY місяць) AS зміна_від_попереднього,
        ROUND(((кількість_занять * 100.0) / NULLIF(LAG(кількість_занять, 1) OVER (PARTITION BY тренер_id ORDER BY місяць), 0)) - 100, 2) AS відсоток_росту
    FROM місячні_заняття
    ORDER BY тренер_id, місяць
    """,
    "complex"
)

# 30. Аналіз тенденцій з використанням рухомого середнього
add_question(
    "спортивний_клуб_030",
    "Показати 7-денну ковзну середню кількість відвідувань клубу за останні 30 днів",
    """
    WITH щоденні_відвідування AS (
        SELECT 
            дата_відвідування,
            COUNT(*) AS кількість
        FROM відвідування
        WHERE дата_відвідування >= (CURRENT_DATE - INTERVAL '30 days')
        GROUP BY дата_відвідування
    )
    SELECT 
        дата_відвідування,
        кількість AS денні_відвідування,
        ROUND(AVG(кількість) OVER (ORDER BY дата_відвідування ROWS BETWEEN 6 PRECEDING AND CURRENT ROW), 2) AS ковзна_середня_7_днів
    FROM щоденні_відвідування
    ORDER BY дата_відвідування
    """,
    "complex"
)

# 31. Різниця між наборами даних (використання EXCEPT)
add_question(
    "спортивний_клуб_031",
    "Які члени клубу записувалися на групові заняття, але жодного разу не відвідали їх?",
    """
    SELECT 
        чк.прізвище,
        чк.імя,
        COUNT(зз.id) AS кількість_невідвіданих_занять
    FROM члени_клубу чк
    JOIN записи_на_заняття зз ON чк.id = зз.член_клубу_id
    WHERE NOT EXISTS (
        SELECT 1
        FROM відвідування в
        WHERE в.запис_на_заняття_id = зз.id
    )
    GROUP BY чк.id, чк.прізвище, чк.імя
    ORDER BY кількість_невідвіданих_занять DESC
    """,
    "complex"
)

# 32. Використання віконних функцій для класифікації
add_question(
    "спортивний_клуб_032",
    "Розділити всіх членів клубу на 3 категорії за частотою відвідувань (низька, середня, висока)",
    """
    WITH статистика_відвідувань AS (
        SELECT 
            чк.id AS член_id,
            чк.прізвище,
            чк.імя,
            COUNT(в.id) AS кількість_відвідувань,
            NTILE(3) OVER (ORDER BY COUNT(в.id)) AS категорія
        FROM члени_клубу чк
        LEFT JOIN відвідування в ON чк.id = в.член_клубу_id
        WHERE в.дата_відвідування >= (CURRENT_DATE - INTERVAL '3 months')
        GROUP BY чк.id, чк.прізвище, чк.імя
    )
    SELECT 
        прізвище,
        імя,
        кількість_відвідувань,
        CASE 
            WHEN категорія = 1 THEN 'Низька'
            WHEN категорія = 2 THEN 'Середня'
            WHEN категорія = 3 THEN 'Висока'
        END AS частота_відвідувань
    FROM статистика_відвідувань
    ORDER BY кількість_відвідувань DESC
    """,
    "complex"
)

# 33. Складний аналіз з підзапитами і агрегацією
add_question(
    "спортивний_клуб_033",
    "Виявити тенденції відвідуваності за годинами дня протягом тижня",
    """
    WITH погодинні_відвідування AS (
        SELECT 
            TO_CHAR(дата_відвідування, 'Day') AS день_тижня,
            EXTRACT(HOUR FROM час_приходу) AS година,
            COUNT(*) AS кількість
        FROM відвідування
        WHERE дата_відвідування >= (CURRENT_DATE - INTERVAL '1 month')
        GROUP BY день_тижня, година
    )
    SELECT 
        день_тижня,
        година,
        кількість,
        ROUND(кількість * 100.0 / SUM(кількість) OVER (PARTITION BY день_тижня), 2) AS відсоток_від_денних,
        ROUND(кількість * 100.0 / SUM(кількість) OVER (PARTITION BY година), 2) AS відсоток_від_годинних
    FROM погодинні_відвідування
    ORDER BY 
        CASE 
            WHEN день_тижня = 'Monday' THEN 1
            WHEN день_тижня = 'Tuesday' THEN 2
            WHEN день_тижня = 'Wednesday' THEN 3
            WHEN день_тижня = 'Thursday' THEN 4
            WHEN день_тижня = 'Friday' THEN 5
            WHEN день_тижня = 'Saturday' THEN 6
            WHEN день_тижня = 'Sunday' THEN 7
        END,
        година
    """,
    "complex"
)

# 34. Аналіз ефективності використання обладнання
add_question(
    "спортивний_клуб_034",
    "Яке обладнання є в кожному приміщенні і скільки занять проводиться з його використанням?",
    """
    WITH використання_обладнання AS (
        SELECT 
            п.id AS приміщення_id,
            п.назва AS приміщення,
            о.id AS обладнання_id,
            о.назва AS обладнання,
            оп.кількість,
            COUNT(DISTINCT рз.id) AS кількість_занять
        FROM приміщення п
        JOIN обладнання_приміщень оп ON п.id = оп.приміщення_id
        JOIN обладнання о ON оп.обладнання_id = о.id
        LEFT JOIN розклад_занять рз ON п.id = рз.приміщення_id
        GROUP BY п.id, п.назва, о.id, о.назва, оп.кількість
    )
    SELECT 
        приміщення,
        обладнання,
        кількість,
        кількість_занять,
        ROUND(кількість_занять * 1.0 / кількість, 2) AS занять_на_одиницю
    FROM використання_обладнання
    ORDER BY приміщення, занять_на_одиницю DESC
    """,
    "complex"
)

# 35. Складний аналіз платежів з використанням кумулятивної суми
add_question(
    "спортивний_клуб_035",
    "Показати кумулятивний дохід за типами абонементів помісячно за поточний рік",
    """
    WITH місячні_доходи AS (
        SELECT 
            DATE_TRUNC('month', п.дата_платежу) AS місяць,
            та.назва AS тип_абонементу,
            SUM(п.сума) AS сума
        FROM платежі п
        JOIN членства ч ON п.членство_id = ч.id
        JOIN типи_абонементів та ON ч.тип_абонементу_id = та.id
        WHERE EXTRACT(YEAR FROM п.дата_платежу) = EXTRACT(YEAR FROM CURRENT_DATE)
        GROUP BY DATE_TRUNC('month', п.дата_платежу), та.назва
    )
    SELECT 
        TO_CHAR(місяць, 'Month YYYY') AS місяць,
        тип_абонементу,
        сума AS місячний_дохід,
        SUM(сума) OVER (PARTITION BY тип_абонементу ORDER BY місяць) AS кумулятивний_дохід,
        ROUND(SUM(сума) OVER (PARTITION BY тип_абонементу ORDER BY місяць) * 100.0 / 
               SUM(сума) OVER (PARTITION BY тип_абонементу), 2) AS відсоток_від_річного
    FROM місячні_доходи
    ORDER BY місяць, тип_абонементу
    """,
    "complex"
)

# Записати питання в JSON файл
output_path = "bird-ukr/questions/спортивний_клуб_questions.json"
os.makedirs(os.path.dirname(output_path), exist_ok=True)

with open(output_path, "w", encoding="utf-8") as f:
    json.dump(questions_data, f, ensure_ascii=False, indent=4)

print(f"Створено {len(questions_data)} питань та SQL-запитів для бази даних 'Спортивний клуб'.")
print(f"Збережено у файл: {output_path}") 